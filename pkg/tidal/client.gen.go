// Package tidal provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package tidal

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Authorization_Code_PKCEScopes = "Authorization_Code_PKCE.Scopes"
	Client_CredentialsScopes      = "Client_Credentials.Scopes"
)

// Defines values for AlbumCoverArtRelationshipUpdateOperationPayloadDataType.
const (
	AlbumCoverArtRelationshipUpdateOperationPayloadDataTypeArtworks AlbumCoverArtRelationshipUpdateOperationPayloadDataType = "artworks"
)

// Defines values for AlbumCreateOperationPayloadDataType.
const (
	AlbumCreateOperationPayloadDataTypeAlbums AlbumCreateOperationPayloadDataType = "albums"
)

// Defines values for AlbumCreateOperationPayloadDataRelationshipsArtistsDataType.
const (
	AlbumCreateOperationPayloadDataRelationshipsArtistsDataTypeArtists AlbumCreateOperationPayloadDataRelationshipsArtistsDataType = "artists"
)

// Defines values for AlbumCreateOperationPayloadDataRelationshipsGenresDataType.
const (
	AlbumCreateOperationPayloadDataRelationshipsGenresDataTypeGenres AlbumCreateOperationPayloadDataRelationshipsGenresDataType = "genres"
)

// Defines values for AlbumUpdateOperationPayloadDataType.
const (
	AlbumUpdateOperationPayloadDataTypeAlbums AlbumUpdateOperationPayloadDataType = "albums"
)

// Defines values for AlbumUpdateOperationPayloadDataRelationshipsGenresDataType.
const (
	AlbumUpdateOperationPayloadDataRelationshipsGenresDataTypeGenres AlbumUpdateOperationPayloadDataRelationshipsGenresDataType = "genres"
)

// Defines values for AlbumsAttributesAvailability.
const (
	AlbumsAttributesAvailabilityDJ     AlbumsAttributesAvailability = "DJ"
	AlbumsAttributesAvailabilitySTEM   AlbumsAttributesAvailability = "STEM"
	AlbumsAttributesAvailabilitySTREAM AlbumsAttributesAvailability = "STREAM"
)

// Defines values for AlbumsAttributesType.
const (
	ALBUM  AlbumsAttributesType = "ALBUM"
	EP     AlbumsAttributesType = "EP"
	SINGLE AlbumsAttributesType = "SINGLE"
)

// Defines values for AppreciationsCreateOperationPayloadDataType.
const (
	AppreciationsCreateOperationPayloadDataTypeAppreciations AppreciationsCreateOperationPayloadDataType = "appreciations"
)

// Defines values for AppreciationsCreateOperationPayloadDataRelationshipsAppreciatedItemDataType.
const (
	AppreciationsCreateOperationPayloadDataRelationshipsAppreciatedItemDataTypeArtists AppreciationsCreateOperationPayloadDataRelationshipsAppreciatedItemDataType = "artists"
)

// Defines values for ArtistBiographyUpdateBodyDataType.
const (
	ArtistBiographies ArtistBiographyUpdateBodyDataType = "artistBiographies"
)

// Defines values for ArtistClaimAcceptedArtistsRelationshipUpdateOperationPayloadDataType.
const (
	ArtistClaimAcceptedArtistsRelationshipUpdateOperationPayloadDataTypeArtists ArtistClaimAcceptedArtistsRelationshipUpdateOperationPayloadDataType = "artists"
)

// Defines values for ArtistClaimsCreateOperationPayloadDataType.
const (
	ArtistClaimsCreateOperationPayloadDataTypeArtistClaims ArtistClaimsCreateOperationPayloadDataType = "artistClaims"
)

// Defines values for ArtistClaimsCreateOperationPayloadDataAttributesProvider.
const (
	ArtistClaimsCreateOperationPayloadDataAttributesProviderCDBABY    ArtistClaimsCreateOperationPayloadDataAttributesProvider = "CDBABY"
	ArtistClaimsCreateOperationPayloadDataAttributesProviderDISTROKID ArtistClaimsCreateOperationPayloadDataAttributesProvider = "DISTROKID"
	ArtistClaimsCreateOperationPayloadDataAttributesProviderTUNECORE  ArtistClaimsCreateOperationPayloadDataAttributesProvider = "TUNECORE"
)

// Defines values for ArtistClaimsUpdateOperationPayloadDataType.
const (
	ArtistClaimsUpdateOperationPayloadDataTypeArtistClaims ArtistClaimsUpdateOperationPayloadDataType = "artistClaims"
)

// Defines values for ArtistClaimsAttributesProvider.
const (
	ArtistClaimsAttributesProviderCDBABY    ArtistClaimsAttributesProvider = "CDBABY"
	ArtistClaimsAttributesProviderDISTROKID ArtistClaimsAttributesProvider = "DISTROKID"
	ArtistClaimsAttributesProviderTUNECORE  ArtistClaimsAttributesProvider = "TUNECORE"
)

// Defines values for ArtistClaimsAttributesRecommendation.
const (
	CONTENTMIGRATEDTOUPLOADS ArtistClaimsAttributesRecommendation = "CONTENT_MIGRATED_TO_UPLOADS"
	DSPPROFILECLAIMED        ArtistClaimsAttributesRecommendation = "DSP_PROFILE_CLAIMED"
	NOCONTENTMATCHED         ArtistClaimsAttributesRecommendation = "NO_CONTENT_MATCHED"
)

// Defines values for ArtistClaimsAttributesStatus.
const (
	ArtistClaimsAttributesStatusAUTHENTICATIONFAILED ArtistClaimsAttributesStatus = "AUTHENTICATION_FAILED"
	ArtistClaimsAttributesStatusAWAITINGOAUTH        ArtistClaimsAttributesStatus = "AWAITING_OAUTH"
	ArtistClaimsAttributesStatusCANCELLED            ArtistClaimsAttributesStatus = "CANCELLED"
	ArtistClaimsAttributesStatusCOMPLETED            ArtistClaimsAttributesStatus = "COMPLETED"
	ArtistClaimsAttributesStatusFAILED               ArtistClaimsAttributesStatus = "FAILED"
	ArtistClaimsAttributesStatusFETCHINGCONTENT      ArtistClaimsAttributesStatus = "FETCHING_CONTENT"
	ArtistClaimsAttributesStatusNOMATCHES            ArtistClaimsAttributesStatus = "NO_MATCHES"
	ArtistClaimsAttributesStatusPROCESSING           ArtistClaimsAttributesStatus = "PROCESSING"
	ArtistClaimsAttributesStatusVERIFIED             ArtistClaimsAttributesStatus = "VERIFIED"
)

// Defines values for ArtistCreateOperationPayloadDataType.
const (
	ArtistCreateOperationPayloadDataTypeArtists ArtistCreateOperationPayloadDataType = "artists"
)

// Defines values for ArtistFollowingRelationshipAddOperationPayloadDataType.
const (
	ArtistFollowingRelationshipAddOperationPayloadDataTypeArtists ArtistFollowingRelationshipAddOperationPayloadDataType = "artists"
)

// Defines values for ArtistFollowingRelationshipRemoveOperationPayloadDataType.
const (
	ArtistFollowingRelationshipRemoveOperationPayloadDataTypeArtists ArtistFollowingRelationshipRemoveOperationPayloadDataType = "artists"
)

// Defines values for ArtistProfileArtRelationshipUpdateOperationPayloadDataType.
const (
	ArtistProfileArtRelationshipUpdateOperationPayloadDataTypeArtworks ArtistProfileArtRelationshipUpdateOperationPayloadDataType = "artworks"
)

// Defines values for ArtistUpdateBodyDataType.
const (
	ArtistUpdateBodyDataTypeArtists ArtistUpdateBodyDataType = "artists"
)

// Defines values for ArtworkCreateOperationPayloadDataType.
const (
	ArtworkCreateOperationPayloadDataTypeArtworks ArtworkCreateOperationPayloadDataType = "artworks"
)

// Defines values for ArtworkCreateOperationPayloadDataAttributesMediaType.
const (
	ArtworkCreateOperationPayloadDataAttributesMediaTypeIMAGE ArtworkCreateOperationPayloadDataAttributesMediaType = "IMAGE"
	ArtworkCreateOperationPayloadDataAttributesMediaTypeVIDEO ArtworkCreateOperationPayloadDataAttributesMediaType = "VIDEO"
)

// Defines values for ArtworksAttributesMediaType.
const (
	ArtworksAttributesMediaTypeIMAGE ArtworksAttributesMediaType = "IMAGE"
	ArtworksAttributesMediaTypeVIDEO ArtworksAttributesMediaType = "VIDEO"
)

// Defines values for AttachSourceFileToTrackType.
const (
	AttachSourceFileToTrackTypeTracks AttachSourceFileToTrackType = "tracks"
)

// Defines values for DrmDataDrmSystem.
const (
	FAIRPLAY DrmDataDrmSystem = "FAIRPLAY"
	WIDEVINE DrmDataDrmSystem = "WIDEVINE"
)

// Defines values for ExternalLinkMetaType.
const (
	CASHAPPCONTRIBUTIONS ExternalLinkMetaType = "CASHAPP_CONTRIBUTIONS"
	FACEBOOK             ExternalLinkMetaType = "FACEBOOK"
	INSTAGRAM            ExternalLinkMetaType = "INSTAGRAM"
	OFFICIALHOMEPAGE     ExternalLinkMetaType = "OFFICIAL_HOMEPAGE"
	SNAPCHAT             ExternalLinkMetaType = "SNAPCHAT"
	TIDALAUTOPLAYANDROID ExternalLinkMetaType = "TIDAL_AUTOPLAY_ANDROID"
	TIDALAUTOPLAYIOS     ExternalLinkMetaType = "TIDAL_AUTOPLAY_IOS"
	TIDALAUTOPLAYWEB     ExternalLinkMetaType = "TIDAL_AUTOPLAY_WEB"
	TIDALSHARING         ExternalLinkMetaType = "TIDAL_SHARING"
	TIDALUSERSHARING     ExternalLinkMetaType = "TIDAL_USER_SHARING"
	TIKTOK               ExternalLinkMetaType = "TIKTOK"
	TWITTER              ExternalLinkMetaType = "TWITTER"
)

// Defines values for FileStatusModerationFileStatus.
const (
	FileStatusModerationFileStatusERROR        FileStatusModerationFileStatus = "ERROR"
	FileStatusModerationFileStatusFLAGGED      FileStatusModerationFileStatus = "FLAGGED"
	FileStatusModerationFileStatusNOTMODERATED FileStatusModerationFileStatus = "NOT_MODERATED"
	FileStatusModerationFileStatusOK           FileStatusModerationFileStatus = "OK"
	FileStatusModerationFileStatusSCANNING     FileStatusModerationFileStatus = "SCANNING"
	FileStatusModerationFileStatusTAKENDOWN    FileStatusModerationFileStatus = "TAKEN_DOWN"
)

// Defines values for FileStatusTechnicalFileStatus.
const (
	FileStatusTechnicalFileStatusERROR           FileStatusTechnicalFileStatus = "ERROR"
	FileStatusTechnicalFileStatusOK              FileStatusTechnicalFileStatus = "OK"
	FileStatusTechnicalFileStatusPROCESSING      FileStatusTechnicalFileStatus = "PROCESSING"
	FileStatusTechnicalFileStatusUPLOADREQUESTED FileStatusTechnicalFileStatus = "UPLOAD_REQUESTED"
)

// Defines values for LyricsCreateOperationPayloadDataType.
const (
	LyricsCreateOperationPayloadDataTypeLyrics LyricsCreateOperationPayloadDataType = "lyrics"
)

// Defines values for LyricsCreateOperationPayloadDataRelationshipsTrackType.
const (
	LyricsCreateOperationPayloadDataRelationshipsTrackTypeTracks LyricsCreateOperationPayloadDataRelationshipsTrackType = "tracks"
)

// Defines values for LyricsUpdateOperationPayloadDataType.
const (
	LyricsUpdateOperationPayloadDataTypeLyrics LyricsUpdateOperationPayloadDataType = "lyrics"
)

// Defines values for LyricsAttributesTechnicalStatus.
const (
	LyricsAttributesTechnicalStatusERROR      LyricsAttributesTechnicalStatus = "ERROR"
	LyricsAttributesTechnicalStatusOK         LyricsAttributesTechnicalStatus = "OK"
	LyricsAttributesTechnicalStatusPENDING    LyricsAttributesTechnicalStatus = "PENDING"
	LyricsAttributesTechnicalStatusPROCESSING LyricsAttributesTechnicalStatus = "PROCESSING"
)

// Defines values for PlaylistCoverArtRelationshipUpdateOperationPayloadDataType.
const (
	PlaylistCoverArtRelationshipUpdateOperationPayloadDataTypeArtworks PlaylistCoverArtRelationshipUpdateOperationPayloadDataType = "artworks"
)

// Defines values for PlaylistCreateOperationPayloadDataType.
const (
	PlaylistCreateOperationPayloadDataTypePlaylists PlaylistCreateOperationPayloadDataType = "playlists"
)

// Defines values for PlaylistCreateOperationPayloadDataAttributesAccessType.
const (
	PlaylistCreateOperationPayloadDataAttributesAccessTypePUBLIC   PlaylistCreateOperationPayloadDataAttributesAccessType = "PUBLIC"
	PlaylistCreateOperationPayloadDataAttributesAccessTypeUNLISTED PlaylistCreateOperationPayloadDataAttributesAccessType = "UNLISTED"
)

// Defines values for PlaylistItemsRelationshipAddOperationPayloadDataType.
const (
	PlaylistItemsRelationshipAddOperationPayloadDataTypeTracks PlaylistItemsRelationshipAddOperationPayloadDataType = "tracks"
	PlaylistItemsRelationshipAddOperationPayloadDataTypeVideos PlaylistItemsRelationshipAddOperationPayloadDataType = "videos"
)

// Defines values for PlaylistItemsRelationshipRemoveOperationPayloadDataType.
const (
	PlaylistItemsRelationshipRemoveOperationPayloadDataTypeTracks PlaylistItemsRelationshipRemoveOperationPayloadDataType = "tracks"
	PlaylistItemsRelationshipRemoveOperationPayloadDataTypeVideos PlaylistItemsRelationshipRemoveOperationPayloadDataType = "videos"
)

// Defines values for PlaylistItemsRelationshipReorderOperationPayloadDataType.
const (
	PlaylistItemsRelationshipReorderOperationPayloadDataTypeTracks PlaylistItemsRelationshipReorderOperationPayloadDataType = "tracks"
	PlaylistItemsRelationshipReorderOperationPayloadDataTypeVideos PlaylistItemsRelationshipReorderOperationPayloadDataType = "videos"
)

// Defines values for PlaylistUpdateOperationPayloadDataType.
const (
	PlaylistUpdateOperationPayloadDataTypePlaylists PlaylistUpdateOperationPayloadDataType = "playlists"
)

// Defines values for PlaylistUpdateOperationPayloadDataAttributesAccessType.
const (
	PlaylistUpdateOperationPayloadDataAttributesAccessTypePUBLIC   PlaylistUpdateOperationPayloadDataAttributesAccessType = "PUBLIC"
	PlaylistUpdateOperationPayloadDataAttributesAccessTypeUNLISTED PlaylistUpdateOperationPayloadDataAttributesAccessType = "UNLISTED"
)

// Defines values for PlaylistsAttributesAccessType.
const (
	PlaylistsAttributesAccessTypePUBLIC   PlaylistsAttributesAccessType = "PUBLIC"
	PlaylistsAttributesAccessTypeUNLISTED PlaylistsAttributesAccessType = "UNLISTED"
)

// Defines values for PlaylistsAttributesPlaylistType.
const (
	ARTIST    PlaylistsAttributesPlaylistType = "ARTIST"
	EDITORIAL PlaylistsAttributesPlaylistType = "EDITORIAL"
	MIX       PlaylistsAttributesPlaylistType = "MIX"
	USER      PlaylistsAttributesPlaylistType = "USER"
)

// Defines values for TrackCreateOperationPayloadDataType.
const (
	TrackCreateOperationPayloadDataTypeTracks TrackCreateOperationPayloadDataType = "tracks"
)

// Defines values for TrackCreateOperationPayloadDataAttributesAccessType.
const (
	TrackCreateOperationPayloadDataAttributesAccessTypePRIVATE  TrackCreateOperationPayloadDataAttributesAccessType = "PRIVATE"
	TrackCreateOperationPayloadDataAttributesAccessTypePUBLIC   TrackCreateOperationPayloadDataAttributesAccessType = "PUBLIC"
	TrackCreateOperationPayloadDataAttributesAccessTypeUNLISTED TrackCreateOperationPayloadDataAttributesAccessType = "UNLISTED"
)

// Defines values for TrackCreateOperationPayloadDataRelationshipsAlbumsDataType.
const (
	TrackCreateOperationPayloadDataRelationshipsAlbumsDataTypeAlbums TrackCreateOperationPayloadDataRelationshipsAlbumsDataType = "albums"
)

// Defines values for TrackCreateOperationPayloadDataRelationshipsArtistsDataType.
const (
	TrackCreateOperationPayloadDataRelationshipsArtistsDataTypeArtists TrackCreateOperationPayloadDataRelationshipsArtistsDataType = "artists"
)

// Defines values for TrackCreateOperationPayloadDataRelationshipsGenresDataType.
const (
	TrackCreateOperationPayloadDataRelationshipsGenresDataTypeGenres TrackCreateOperationPayloadDataRelationshipsGenresDataType = "genres"
)

// Defines values for TrackFilesAttributesFormat.
const (
	TrackFilesAttributesFormatAACLC     TrackFilesAttributesFormat = "AACLC"
	TrackFilesAttributesFormatFLAC      TrackFilesAttributesFormat = "FLAC"
	TrackFilesAttributesFormatFLACHIRES TrackFilesAttributesFormat = "FLAC_HIRES"
	TrackFilesAttributesFormatHEAACV1   TrackFilesAttributesFormat = "HEAACV1"
)

// Defines values for TrackFilesAttributesTrackPresentation.
const (
	TrackFilesAttributesTrackPresentationFULL    TrackFilesAttributesTrackPresentation = "FULL"
	TrackFilesAttributesTrackPresentationPREVIEW TrackFilesAttributesTrackPresentation = "PREVIEW"
)

// Defines values for TrackManifestsAttributesFormats.
const (
	TrackManifestsAttributesFormatsAACLC     TrackManifestsAttributesFormats = "AACLC"
	TrackManifestsAttributesFormatsFLAC      TrackManifestsAttributesFormats = "FLAC"
	TrackManifestsAttributesFormatsFLACHIRES TrackManifestsAttributesFormats = "FLAC_HIRES"
	TrackManifestsAttributesFormatsHEAACV1   TrackManifestsAttributesFormats = "HEAACV1"
)

// Defines values for TrackManifestsAttributesTrackPresentation.
const (
	TrackManifestsAttributesTrackPresentationFULL    TrackManifestsAttributesTrackPresentation = "FULL"
	TrackManifestsAttributesTrackPresentationPREVIEW TrackManifestsAttributesTrackPresentation = "PREVIEW"
)

// Defines values for TrackSourceFileCreateOperationPayloadDataType.
const (
	TrackSourceFiles TrackSourceFileCreateOperationPayloadDataType = "trackSourceFiles"
)

// Defines values for TrackUpdateOperationPayloadDataType.
const (
	TrackUpdateOperationPayloadDataTypeTracks TrackUpdateOperationPayloadDataType = "tracks"
)

// Defines values for TrackUpdateOperationPayloadDataAttributesAccessType.
const (
	TrackUpdateOperationPayloadDataAttributesAccessTypePRIVATE  TrackUpdateOperationPayloadDataAttributesAccessType = "PRIVATE"
	TrackUpdateOperationPayloadDataAttributesAccessTypePUBLIC   TrackUpdateOperationPayloadDataAttributesAccessType = "PUBLIC"
	TrackUpdateOperationPayloadDataAttributesAccessTypeUNLISTED TrackUpdateOperationPayloadDataAttributesAccessType = "UNLISTED"
)

// Defines values for TrackUpdateOperationPayloadDataAttributesKey.
const (
	TrackUpdateOperationPayloadDataAttributesKeyA       TrackUpdateOperationPayloadDataAttributesKey = "A"
	TrackUpdateOperationPayloadDataAttributesKeyAb      TrackUpdateOperationPayloadDataAttributesKey = "Ab"
	TrackUpdateOperationPayloadDataAttributesKeyB       TrackUpdateOperationPayloadDataAttributesKey = "B"
	TrackUpdateOperationPayloadDataAttributesKeyBb      TrackUpdateOperationPayloadDataAttributesKey = "Bb"
	TrackUpdateOperationPayloadDataAttributesKeyC       TrackUpdateOperationPayloadDataAttributesKey = "C"
	TrackUpdateOperationPayloadDataAttributesKeyCSharp  TrackUpdateOperationPayloadDataAttributesKey = "CSharp"
	TrackUpdateOperationPayloadDataAttributesKeyD       TrackUpdateOperationPayloadDataAttributesKey = "D"
	TrackUpdateOperationPayloadDataAttributesKeyE       TrackUpdateOperationPayloadDataAttributesKey = "E"
	TrackUpdateOperationPayloadDataAttributesKeyEb      TrackUpdateOperationPayloadDataAttributesKey = "Eb"
	TrackUpdateOperationPayloadDataAttributesKeyF       TrackUpdateOperationPayloadDataAttributesKey = "F"
	TrackUpdateOperationPayloadDataAttributesKeyFSharp  TrackUpdateOperationPayloadDataAttributesKey = "FSharp"
	TrackUpdateOperationPayloadDataAttributesKeyG       TrackUpdateOperationPayloadDataAttributesKey = "G"
	TrackUpdateOperationPayloadDataAttributesKeyUNKNOWN TrackUpdateOperationPayloadDataAttributesKey = "UNKNOWN"
)

// Defines values for TrackUpdateOperationPayloadDataAttributesKeyScale.
const (
	TrackUpdateOperationPayloadDataAttributesKeyScaleAEOLIAN         TrackUpdateOperationPayloadDataAttributesKeyScale = "AEOLIAN"
	TrackUpdateOperationPayloadDataAttributesKeyScaleBLUES           TrackUpdateOperationPayloadDataAttributesKeyScale = "BLUES"
	TrackUpdateOperationPayloadDataAttributesKeyScaleDORIAN          TrackUpdateOperationPayloadDataAttributesKeyScale = "DORIAN"
	TrackUpdateOperationPayloadDataAttributesKeyScaleHARMONICMINOR   TrackUpdateOperationPayloadDataAttributesKeyScale = "HARMONIC_MINOR"
	TrackUpdateOperationPayloadDataAttributesKeyScaleLOCRIAN         TrackUpdateOperationPayloadDataAttributesKeyScale = "LOCRIAN"
	TrackUpdateOperationPayloadDataAttributesKeyScaleLYDIAN          TrackUpdateOperationPayloadDataAttributesKeyScale = "LYDIAN"
	TrackUpdateOperationPayloadDataAttributesKeyScaleMAJOR           TrackUpdateOperationPayloadDataAttributesKeyScale = "MAJOR"
	TrackUpdateOperationPayloadDataAttributesKeyScaleMELODICMINOR    TrackUpdateOperationPayloadDataAttributesKeyScale = "MELODIC_MINOR"
	TrackUpdateOperationPayloadDataAttributesKeyScaleMINOR           TrackUpdateOperationPayloadDataAttributesKeyScale = "MINOR"
	TrackUpdateOperationPayloadDataAttributesKeyScaleMIXOLYDIAN      TrackUpdateOperationPayloadDataAttributesKeyScale = "MIXOLYDIAN"
	TrackUpdateOperationPayloadDataAttributesKeyScalePENTATONICMAJOR TrackUpdateOperationPayloadDataAttributesKeyScale = "PENTATONIC_MAJOR"
	TrackUpdateOperationPayloadDataAttributesKeyScalePENTATONICMINOR TrackUpdateOperationPayloadDataAttributesKeyScale = "PENTATONIC_MINOR"
	TrackUpdateOperationPayloadDataAttributesKeyScalePHRYGIAN        TrackUpdateOperationPayloadDataAttributesKeyScale = "PHRYGIAN"
	TrackUpdateOperationPayloadDataAttributesKeyScaleUNKNOWN         TrackUpdateOperationPayloadDataAttributesKeyScale = "UNKNOWN"
)

// Defines values for TrackUpdateOperationPayloadDataRelationshipsGenresDataType.
const (
	TrackUpdateOperationPayloadDataRelationshipsGenresDataTypeGenres TrackUpdateOperationPayloadDataRelationshipsGenresDataType = "genres"
)

// Defines values for TracksAttributesAccessType.
const (
	TracksAttributesAccessTypePRIVATE  TracksAttributesAccessType = "PRIVATE"
	TracksAttributesAccessTypePUBLIC   TracksAttributesAccessType = "PUBLIC"
	TracksAttributesAccessTypeUNLISTED TracksAttributesAccessType = "UNLISTED"
)

// Defines values for TracksAttributesAvailability.
const (
	TracksAttributesAvailabilityDJ     TracksAttributesAvailability = "DJ"
	TracksAttributesAvailabilitySTEM   TracksAttributesAvailability = "STEM"
	TracksAttributesAvailabilitySTREAM TracksAttributesAvailability = "STREAM"
)

// Defines values for TracksAttributesKey.
const (
	TracksAttributesKeyA       TracksAttributesKey = "A"
	TracksAttributesKeyAb      TracksAttributesKey = "Ab"
	TracksAttributesKeyB       TracksAttributesKey = "B"
	TracksAttributesKeyBb      TracksAttributesKey = "Bb"
	TracksAttributesKeyC       TracksAttributesKey = "C"
	TracksAttributesKeyCSharp  TracksAttributesKey = "CSharp"
	TracksAttributesKeyD       TracksAttributesKey = "D"
	TracksAttributesKeyE       TracksAttributesKey = "E"
	TracksAttributesKeyEb      TracksAttributesKey = "Eb"
	TracksAttributesKeyF       TracksAttributesKey = "F"
	TracksAttributesKeyFSharp  TracksAttributesKey = "FSharp"
	TracksAttributesKeyG       TracksAttributesKey = "G"
	TracksAttributesKeyUNKNOWN TracksAttributesKey = "UNKNOWN"
)

// Defines values for TracksAttributesKeyScale.
const (
	TracksAttributesKeyScaleAEOLIAN         TracksAttributesKeyScale = "AEOLIAN"
	TracksAttributesKeyScaleBLUES           TracksAttributesKeyScale = "BLUES"
	TracksAttributesKeyScaleDORIAN          TracksAttributesKeyScale = "DORIAN"
	TracksAttributesKeyScaleHARMONICMINOR   TracksAttributesKeyScale = "HARMONIC_MINOR"
	TracksAttributesKeyScaleLOCRIAN         TracksAttributesKeyScale = "LOCRIAN"
	TracksAttributesKeyScaleLYDIAN          TracksAttributesKeyScale = "LYDIAN"
	TracksAttributesKeyScaleMAJOR           TracksAttributesKeyScale = "MAJOR"
	TracksAttributesKeyScaleMELODICMINOR    TracksAttributesKeyScale = "MELODIC_MINOR"
	TracksAttributesKeyScaleMINOR           TracksAttributesKeyScale = "MINOR"
	TracksAttributesKeyScaleMIXOLYDIAN      TracksAttributesKeyScale = "MIXOLYDIAN"
	TracksAttributesKeyScalePENTATONICMAJOR TracksAttributesKeyScale = "PENTATONIC_MAJOR"
	TracksAttributesKeyScalePENTATONICMINOR TracksAttributesKeyScale = "PENTATONIC_MINOR"
	TracksAttributesKeyScalePHRYGIAN        TracksAttributesKeyScale = "PHRYGIAN"
	TracksAttributesKeyScaleUNKNOWN         TracksAttributesKeyScale = "UNKNOWN"
)

// Defines values for UserCollectionAlbumsRelationshipAddOperationPayloadDataType.
const (
	UserCollectionAlbumsRelationshipAddOperationPayloadDataTypeAlbums UserCollectionAlbumsRelationshipAddOperationPayloadDataType = "albums"
)

// Defines values for UserCollectionAlbumsRelationshipRemoveOperationPayloadDataType.
const (
	UserCollectionAlbumsRelationshipRemoveOperationPayloadDataTypeAlbums UserCollectionAlbumsRelationshipRemoveOperationPayloadDataType = "albums"
)

// Defines values for UserCollectionArtistsRelationshipAddOperationPayloadDataType.
const (
	UserCollectionArtistsRelationshipAddOperationPayloadDataTypeArtists UserCollectionArtistsRelationshipAddOperationPayloadDataType = "artists"
)

// Defines values for UserCollectionArtistsRelationshipRemoveOperationPayloadDataType.
const (
	UserCollectionArtistsRelationshipRemoveOperationPayloadDataTypeArtists UserCollectionArtistsRelationshipRemoveOperationPayloadDataType = "artists"
)

// Defines values for UserCollectionPlaylistsRelationshipRemoveOperationPayloadDataType.
const (
	UserCollectionPlaylistsRelationshipRemoveOperationPayloadDataTypePlaylists UserCollectionPlaylistsRelationshipRemoveOperationPayloadDataType = "playlists"
)

// Defines values for UserCollectionTracksRelationshipAddOperationPayloadDataType.
const (
	UserCollectionTracksRelationshipAddOperationPayloadDataTypeTracks UserCollectionTracksRelationshipAddOperationPayloadDataType = "tracks"
)

// Defines values for UserCollectionTracksRelationshipRemoveOperationPayloadDataType.
const (
	UserCollectionTracksRelationshipRemoveOperationPayloadDataTypeTracks UserCollectionTracksRelationshipRemoveOperationPayloadDataType = "tracks"
)

// Defines values for UserCollectionVideosRelationshipAddOperationPayloadDataType.
const (
	UserCollectionVideosRelationshipAddOperationPayloadDataTypeAlbums              UserCollectionVideosRelationshipAddOperationPayloadDataType = "albums"
	UserCollectionVideosRelationshipAddOperationPayloadDataTypeAppreciations       UserCollectionVideosRelationshipAddOperationPayloadDataType = "appreciations"
	UserCollectionVideosRelationshipAddOperationPayloadDataTypeArtistClaims        UserCollectionVideosRelationshipAddOperationPayloadDataType = "artistClaims"
	UserCollectionVideosRelationshipAddOperationPayloadDataTypeArtistRoles         UserCollectionVideosRelationshipAddOperationPayloadDataType = "artistRoles"
	UserCollectionVideosRelationshipAddOperationPayloadDataTypeArtists             UserCollectionVideosRelationshipAddOperationPayloadDataType = "artists"
	UserCollectionVideosRelationshipAddOperationPayloadDataTypeArtworks            UserCollectionVideosRelationshipAddOperationPayloadDataType = "artworks"
	UserCollectionVideosRelationshipAddOperationPayloadDataTypePlaylists           UserCollectionVideosRelationshipAddOperationPayloadDataType = "playlists"
	UserCollectionVideosRelationshipAddOperationPayloadDataTypeProviders           UserCollectionVideosRelationshipAddOperationPayloadDataType = "providers"
	UserCollectionVideosRelationshipAddOperationPayloadDataTypeSearchResults       UserCollectionVideosRelationshipAddOperationPayloadDataType = "searchResults"
	UserCollectionVideosRelationshipAddOperationPayloadDataTypeSearchSuggestions   UserCollectionVideosRelationshipAddOperationPayloadDataType = "searchSuggestions"
	UserCollectionVideosRelationshipAddOperationPayloadDataTypeTrackStatistics     UserCollectionVideosRelationshipAddOperationPayloadDataType = "trackStatistics"
	UserCollectionVideosRelationshipAddOperationPayloadDataTypeTracks              UserCollectionVideosRelationshipAddOperationPayloadDataType = "tracks"
	UserCollectionVideosRelationshipAddOperationPayloadDataTypeUserCollections     UserCollectionVideosRelationshipAddOperationPayloadDataType = "userCollections"
	UserCollectionVideosRelationshipAddOperationPayloadDataTypeUserEntitlements    UserCollectionVideosRelationshipAddOperationPayloadDataType = "userEntitlements"
	UserCollectionVideosRelationshipAddOperationPayloadDataTypeUserRecommendations UserCollectionVideosRelationshipAddOperationPayloadDataType = "userRecommendations"
	UserCollectionVideosRelationshipAddOperationPayloadDataTypeUserReports         UserCollectionVideosRelationshipAddOperationPayloadDataType = "userReports"
	UserCollectionVideosRelationshipAddOperationPayloadDataTypeUsers               UserCollectionVideosRelationshipAddOperationPayloadDataType = "users"
	UserCollectionVideosRelationshipAddOperationPayloadDataTypeVideos              UserCollectionVideosRelationshipAddOperationPayloadDataType = "videos"
)

// Defines values for UserCollectionVideosRelationshipRemoveOperationPayloadDataType.
const (
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypeAlbums              UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "albums"
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypeAppreciations       UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "appreciations"
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypeArtistClaims        UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "artistClaims"
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypeArtistRoles         UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "artistRoles"
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypeArtists             UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "artists"
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypeArtworks            UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "artworks"
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypePlaylists           UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "playlists"
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypeProviders           UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "providers"
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypeSearchResults       UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "searchResults"
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypeSearchSuggestions   UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "searchSuggestions"
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypeTrackStatistics     UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "trackStatistics"
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypeTracks              UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "tracks"
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypeUserCollections     UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "userCollections"
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypeUserEntitlements    UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "userEntitlements"
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypeUserRecommendations UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "userRecommendations"
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypeUserReports         UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "userReports"
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypeUsers               UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "users"
	UserCollectionVideosRelationshipRemoveOperationPayloadDataTypeVideos              UserCollectionVideosRelationshipRemoveOperationPayloadDataType = "videos"
)

// Defines values for UserEntitlementsAttributesEntitlements.
const (
	UserEntitlementsAttributesEntitlementsDJ    UserEntitlementsAttributesEntitlements = "DJ"
	UserEntitlementsAttributesEntitlementsMUSIC UserEntitlementsAttributesEntitlements = "MUSIC"
)

// Defines values for UserReportCreateOperationPayloadDataType.
const (
	UserReports UserReportCreateOperationPayloadDataType = "userReports"
)

// Defines values for UserReportCreateOperationPayloadDataAttributesReason.
const (
	UserReportCreateOperationPayloadDataAttributesReasonCOPYRIGHTINFRINGEMENT     UserReportCreateOperationPayloadDataAttributesReason = "COPYRIGHT_INFRINGEMENT"
	UserReportCreateOperationPayloadDataAttributesReasonHARASSMENT                UserReportCreateOperationPayloadDataAttributesReason = "HARASSMENT"
	UserReportCreateOperationPayloadDataAttributesReasonHATEFULORABUSIVECONTENT   UserReportCreateOperationPayloadDataAttributesReason = "HATEFUL_OR_ABUSIVE_CONTENT"
	UserReportCreateOperationPayloadDataAttributesReasonPRIVACYVIOLATION          UserReportCreateOperationPayloadDataAttributesReason = "PRIVACY_VIOLATION"
	UserReportCreateOperationPayloadDataAttributesReasonSCAMSORFRAUD              UserReportCreateOperationPayloadDataAttributesReason = "SCAMS_OR_FRAUD"
	UserReportCreateOperationPayloadDataAttributesReasonSEXUALCONTENTORNUDITY     UserReportCreateOperationPayloadDataAttributesReason = "SEXUAL_CONTENT_OR_NUDITY"
	UserReportCreateOperationPayloadDataAttributesReasonSPAM                      UserReportCreateOperationPayloadDataAttributesReason = "SPAM"
	UserReportCreateOperationPayloadDataAttributesReasonUNKNOWN                   UserReportCreateOperationPayloadDataAttributesReason = "UNKNOWN"
	UserReportCreateOperationPayloadDataAttributesReasonVIOLENTORDANGEROUSCONTENT UserReportCreateOperationPayloadDataAttributesReason = "VIOLENT_OR_DANGEROUS_CONTENT"
)

// Defines values for UserReportsCreateOperationPayloadDataRelationshipsReportedResourcesDataType.
const (
	UserReportsCreateOperationPayloadDataRelationshipsReportedResourcesDataTypeArtists   UserReportsCreateOperationPayloadDataRelationshipsReportedResourcesDataType = "artists"
	UserReportsCreateOperationPayloadDataRelationshipsReportedResourcesDataTypePlaylists UserReportsCreateOperationPayloadDataRelationshipsReportedResourcesDataType = "playlists"
	UserReportsCreateOperationPayloadDataRelationshipsReportedResourcesDataTypeTracks    UserReportsCreateOperationPayloadDataRelationshipsReportedResourcesDataType = "tracks"
)

// Defines values for UserReportsAttributesReason.
const (
	UserReportsAttributesReasonCOPYRIGHTINFRINGEMENT     UserReportsAttributesReason = "COPYRIGHT_INFRINGEMENT"
	UserReportsAttributesReasonHARASSMENT                UserReportsAttributesReason = "HARASSMENT"
	UserReportsAttributesReasonHATEFULORABUSIVECONTENT   UserReportsAttributesReason = "HATEFUL_OR_ABUSIVE_CONTENT"
	UserReportsAttributesReasonPRIVACYVIOLATION          UserReportsAttributesReason = "PRIVACY_VIOLATION"
	UserReportsAttributesReasonSCAMSORFRAUD              UserReportsAttributesReason = "SCAMS_OR_FRAUD"
	UserReportsAttributesReasonSEXUALCONTENTORNUDITY     UserReportsAttributesReason = "SEXUAL_CONTENT_OR_NUDITY"
	UserReportsAttributesReasonSPAM                      UserReportsAttributesReason = "SPAM"
	UserReportsAttributesReasonUNKNOWN                   UserReportsAttributesReason = "UNKNOWN"
	UserReportsAttributesReasonVIOLENTORDANGEROUSCONTENT UserReportsAttributesReason = "VIOLENT_OR_DANGEROUS_CONTENT"
)

// Defines values for UserSharesCreateOperationPayloadDataType.
const (
	UserShares UserSharesCreateOperationPayloadDataType = "userShares"
)

// Defines values for UserSharesCreateOperationPayloadDataRelationshipsSharedResourcesDataType.
const (
	UserSharesCreateOperationPayloadDataRelationshipsSharedResourcesDataTypeTracks UserSharesCreateOperationPayloadDataRelationshipsSharedResourcesDataType = "tracks"
)

// Defines values for VideosAttributesAvailability.
const (
	VideosAttributesAvailabilityDJ     VideosAttributesAvailability = "DJ"
	VideosAttributesAvailabilitySTEM   VideosAttributesAvailability = "STEM"
	VideosAttributesAvailabilitySTREAM VideosAttributesAvailability = "STREAM"
)

// Defines values for GetPlaylistsParamsSort.
const (
	CreatedAt           GetPlaylistsParamsSort = "createdAt"
	LastModifiedAt      GetPlaylistsParamsSort = "lastModifiedAt"
	MinusCreatedAt      GetPlaylistsParamsSort = "-createdAt"
	MinusLastModifiedAt GetPlaylistsParamsSort = "-lastModifiedAt"
	MinusName           GetPlaylistsParamsSort = "-name"
	Name                GetPlaylistsParamsSort = "name"
)

// Defines values for GetUserCollectionsIdRelationshipsAlbumsParamsSort.
const (
	AlbumsAddedAt          GetUserCollectionsIdRelationshipsAlbumsParamsSort = "albums.addedAt"
	AlbumsArtistsName      GetUserCollectionsIdRelationshipsAlbumsParamsSort = "albums.artists.name"
	AlbumsReleaseDate      GetUserCollectionsIdRelationshipsAlbumsParamsSort = "albums.releaseDate"
	AlbumsTitle            GetUserCollectionsIdRelationshipsAlbumsParamsSort = "albums.title"
	MinusAlbumsAddedAt     GetUserCollectionsIdRelationshipsAlbumsParamsSort = "-albums.addedAt"
	MinusAlbumsArtistsName GetUserCollectionsIdRelationshipsAlbumsParamsSort = "-albums.artists.name"
	MinusAlbumsReleaseDate GetUserCollectionsIdRelationshipsAlbumsParamsSort = "-albums.releaseDate"
	MinusAlbumsTitle       GetUserCollectionsIdRelationshipsAlbumsParamsSort = "-albums.title"
)

// Defines values for GetUserCollectionsIdRelationshipsArtistsParamsSort.
const (
	ArtistsAddedAt      GetUserCollectionsIdRelationshipsArtistsParamsSort = "artists.addedAt"
	ArtistsName         GetUserCollectionsIdRelationshipsArtistsParamsSort = "artists.name"
	MinusArtistsAddedAt GetUserCollectionsIdRelationshipsArtistsParamsSort = "-artists.addedAt"
	MinusArtistsName    GetUserCollectionsIdRelationshipsArtistsParamsSort = "-artists.name"
)

// Defines values for GetUserCollectionsIdRelationshipsPlaylistsParamsSort.
const (
	MinusPlaylistsAddedAt       GetUserCollectionsIdRelationshipsPlaylistsParamsSort = "-playlists.addedAt"
	MinusPlaylistsLastUpdatedAt GetUserCollectionsIdRelationshipsPlaylistsParamsSort = "-playlists.lastUpdatedAt"
	MinusPlaylistsName          GetUserCollectionsIdRelationshipsPlaylistsParamsSort = "-playlists.name"
	PlaylistsAddedAt            GetUserCollectionsIdRelationshipsPlaylistsParamsSort = "playlists.addedAt"
	PlaylistsLastUpdatedAt      GetUserCollectionsIdRelationshipsPlaylistsParamsSort = "playlists.lastUpdatedAt"
	PlaylistsName               GetUserCollectionsIdRelationshipsPlaylistsParamsSort = "playlists.name"
)

// Defines values for GetUserCollectionsIdRelationshipsTracksParamsSort.
const (
	MinusTracksAddedAt     GetUserCollectionsIdRelationshipsTracksParamsSort = "-tracks.addedAt"
	MinusTracksAlbumsTitle GetUserCollectionsIdRelationshipsTracksParamsSort = "-tracks.albums.title"
	MinusTracksArtistsName GetUserCollectionsIdRelationshipsTracksParamsSort = "-tracks.artists.name"
	MinusTracksDuration    GetUserCollectionsIdRelationshipsTracksParamsSort = "-tracks.duration"
	MinusTracksTitle       GetUserCollectionsIdRelationshipsTracksParamsSort = "-tracks.title"
	TracksAddedAt          GetUserCollectionsIdRelationshipsTracksParamsSort = "tracks.addedAt"
	TracksAlbumsTitle      GetUserCollectionsIdRelationshipsTracksParamsSort = "tracks.albums.title"
	TracksArtistsName      GetUserCollectionsIdRelationshipsTracksParamsSort = "tracks.artists.name"
	TracksDuration         GetUserCollectionsIdRelationshipsTracksParamsSort = "tracks.duration"
	TracksTitle            GetUserCollectionsIdRelationshipsTracksParamsSort = "tracks.title"
)

// Defines values for GetUserCollectionsIdRelationshipsVideosParamsSort.
const (
	MinusVideosAddedAt     GetUserCollectionsIdRelationshipsVideosParamsSort = "-videos.addedAt"
	MinusVideosArtistsName GetUserCollectionsIdRelationshipsVideosParamsSort = "-videos.artists.name"
	MinusVideosDuration    GetUserCollectionsIdRelationshipsVideosParamsSort = "-videos.duration"
	MinusVideosTitle       GetUserCollectionsIdRelationshipsVideosParamsSort = "-videos.title"
	VideosAddedAt          GetUserCollectionsIdRelationshipsVideosParamsSort = "videos.addedAt"
	VideosArtistsName      GetUserCollectionsIdRelationshipsVideosParamsSort = "videos.artists.name"
	VideosDuration         GetUserCollectionsIdRelationshipsVideosParamsSort = "videos.duration"
	VideosTitle            GetUserCollectionsIdRelationshipsVideosParamsSort = "videos.title"
)

// AlbumCoverArtRelationshipUpdateOperationPayload defines model for AlbumCoverArtRelationshipUpdateOperation_Payload.
type AlbumCoverArtRelationshipUpdateOperationPayload struct {
	Data []AlbumCoverArtRelationshipUpdateOperationPayloadData `json:"data"`
}

// AlbumCoverArtRelationshipUpdateOperationPayloadData defines model for AlbumCoverArtRelationshipUpdateOperation_Payload_Data.
type AlbumCoverArtRelationshipUpdateOperationPayloadData struct {
	Id   string                                                  `json:"id"`
	Type AlbumCoverArtRelationshipUpdateOperationPayloadDataType `json:"type"`
}

// AlbumCoverArtRelationshipUpdateOperationPayloadDataType defines model for AlbumCoverArtRelationshipUpdateOperationPayloadData.Type.
type AlbumCoverArtRelationshipUpdateOperationPayloadDataType string

// AlbumCreateOperationPayload defines model for AlbumCreateOperation_Payload.
type AlbumCreateOperationPayload struct {
	Data AlbumCreateOperationPayloadData `json:"data"`
}

// AlbumCreateOperationPayloadData defines model for AlbumCreateOperation_Payload_Data.
type AlbumCreateOperationPayloadData struct {
	Attributes    AlbumCreateOperationPayloadDataAttributes    `json:"attributes"`
	Relationships AlbumCreateOperationPayloadDataRelationships `json:"relationships"`
	Type          AlbumCreateOperationPayloadDataType          `json:"type"`
}

// AlbumCreateOperationPayloadDataType defines model for AlbumCreateOperationPayloadData.Type.
type AlbumCreateOperationPayloadDataType string

// AlbumCreateOperationPayloadDataAttributes defines model for AlbumCreateOperation_Payload_Data_Attributes.
type AlbumCreateOperationPayloadDataAttributes struct {
	// Copyright Copyright information
	Copyright      *Copyright          `json:"copyright,omitempty"`
	ExplicitLyrics *bool               `json:"explicitLyrics,omitempty"`
	ReleaseDate    *openapi_types.Date `json:"releaseDate,omitempty"`
	Title          string              `json:"title"`
	Upc            *string             `json:"upc,omitempty"`
	Version        *string             `json:"version,omitempty"`
}

// AlbumCreateOperationPayloadDataRelationships defines model for AlbumCreateOperation_Payload_Data_Relationships.
type AlbumCreateOperationPayloadDataRelationships struct {
	Artists AlbumCreateOperationPayloadDataRelationshipsArtists `json:"artists"`
	Genres  *AlbumCreateOperationPayloadDataRelationshipsGenres `json:"genres,omitempty"`
}

// AlbumCreateOperationPayloadDataRelationshipsArtists defines model for AlbumCreateOperation_Payload_Data_Relationships_Artists.
type AlbumCreateOperationPayloadDataRelationshipsArtists struct {
	Data []AlbumCreateOperationPayloadDataRelationshipsArtistsData `json:"data"`
}

// AlbumCreateOperationPayloadDataRelationshipsArtistsData defines model for AlbumCreateOperation_Payload_Data_Relationships_Artists_Data.
type AlbumCreateOperationPayloadDataRelationshipsArtistsData struct {
	Id   string                                                      `json:"id"`
	Type AlbumCreateOperationPayloadDataRelationshipsArtistsDataType `json:"type"`
}

// AlbumCreateOperationPayloadDataRelationshipsArtistsDataType defines model for AlbumCreateOperationPayloadDataRelationshipsArtistsData.Type.
type AlbumCreateOperationPayloadDataRelationshipsArtistsDataType string

// AlbumCreateOperationPayloadDataRelationshipsGenres defines model for AlbumCreateOperation_Payload_Data_Relationships_Genres.
type AlbumCreateOperationPayloadDataRelationshipsGenres struct {
	Data []AlbumCreateOperationPayloadDataRelationshipsGenresData `json:"data"`
}

// AlbumCreateOperationPayloadDataRelationshipsGenresData defines model for AlbumCreateOperation_Payload_Data_Relationships_Genres_Data.
type AlbumCreateOperationPayloadDataRelationshipsGenresData struct {
	Id   string                                                     `json:"id"`
	Type AlbumCreateOperationPayloadDataRelationshipsGenresDataType `json:"type"`
}

// AlbumCreateOperationPayloadDataRelationshipsGenresDataType defines model for AlbumCreateOperationPayloadDataRelationshipsGenresData.Type.
type AlbumCreateOperationPayloadDataRelationshipsGenresDataType string

// AlbumUpdateOperationPayload defines model for AlbumUpdateOperation_Payload.
type AlbumUpdateOperationPayload struct {
	Data AlbumUpdateOperationPayloadData `json:"data"`
}

// AlbumUpdateOperationPayloadData defines model for AlbumUpdateOperation_Payload_Data.
type AlbumUpdateOperationPayloadData struct {
	Attributes    *AlbumUpdateOperationPayloadDataAttributes    `json:"attributes,omitempty"`
	Id            string                                        `json:"id"`
	Relationships *AlbumUpdateOperationPayloadDataRelationships `json:"relationships,omitempty"`
	Type          AlbumUpdateOperationPayloadDataType           `json:"type"`
}

// AlbumUpdateOperationPayloadDataType defines model for AlbumUpdateOperationPayloadData.Type.
type AlbumUpdateOperationPayloadDataType string

// AlbumUpdateOperationPayloadDataAttributes defines model for AlbumUpdateOperation_Payload_Data_Attributes.
type AlbumUpdateOperationPayloadDataAttributes struct {
	// Copyright Copyright information
	Copyright      *Copyright          `json:"copyright,omitempty"`
	ExplicitLyrics *bool               `json:"explicitLyrics,omitempty"`
	ReleaseDate    *openapi_types.Date `json:"releaseDate,omitempty"`
	Title          *string             `json:"title,omitempty"`
	Version        *string             `json:"version,omitempty"`
}

// AlbumUpdateOperationPayloadDataRelationships defines model for AlbumUpdateOperation_Payload_Data_Relationships.
type AlbumUpdateOperationPayloadDataRelationships struct {
	Genres *AlbumUpdateOperationPayloadDataRelationshipsGenres `json:"genres,omitempty"`
}

// AlbumUpdateOperationPayloadDataRelationshipsGenres defines model for AlbumUpdateOperation_Payload_Data_Relationships_Genres.
type AlbumUpdateOperationPayloadDataRelationshipsGenres struct {
	Data []AlbumUpdateOperationPayloadDataRelationshipsGenresData `json:"data"`
}

// AlbumUpdateOperationPayloadDataRelationshipsGenresData defines model for AlbumUpdateOperation_Payload_Data_Relationships_Genres_Data.
type AlbumUpdateOperationPayloadDataRelationshipsGenresData struct {
	Id   string                                                     `json:"id"`
	Type AlbumUpdateOperationPayloadDataRelationshipsGenresDataType `json:"type"`
}

// AlbumUpdateOperationPayloadDataRelationshipsGenresDataType defines model for AlbumUpdateOperationPayloadDataRelationshipsGenresData.Type.
type AlbumUpdateOperationPayloadDataRelationshipsGenresDataType string

// AlbumsAttributes defines model for Albums_Attributes.
type AlbumsAttributes struct {
	// Availability Available usage for this album
	Availability *[]AlbumsAttributesAvailability `json:"availability,omitempty"`

	// BarcodeId Barcode id (EAN-13 or UPC-A)
	BarcodeId string `json:"barcodeId"`

	// Copyright Copyright information
	Copyright *Copyright `json:"copyright,omitempty"`

	// Duration Duration (ISO 8601)
	Duration string `json:"duration"`

	// Explicit Explicit content
	Explicit bool `json:"explicit"`

	// ExternalLinks Album links external to TIDAL API
	ExternalLinks *[]ExternalLink `json:"externalLinks,omitempty"`
	MediaTags     []string        `json:"mediaTags"`

	// NumberOfItems Number of items in album
	NumberOfItems int32 `json:"numberOfItems"`

	// NumberOfVolumes Number of volumes
	NumberOfVolumes int32 `json:"numberOfVolumes"`

	// Popularity Popularity (0.0 - 1.0)
	Popularity float64 `json:"popularity"`

	// ReleaseDate Release date (ISO-8601)
	ReleaseDate *openapi_types.Date `json:"releaseDate,omitempty"`

	// Title Album title
	Title string `json:"title"`

	// Type Album type
	Type AlbumsAttributesType `json:"type"`

	// Version Album version
	Version *string `json:"version,omitempty"`
}

// AlbumsAttributesAvailability defines model for AlbumsAttributes.Availability.
type AlbumsAttributesAvailability string

// AlbumsAttributesType Album type
type AlbumsAttributesType string

// AlbumsItemsMultiRelationshipDataDocument defines model for Albums_Items_Multi_Relationship_Data_Document.
type AlbumsItemsMultiRelationshipDataDocument struct {
	Data  *[]AlbumsItemsResourceIdentifier `json:"data,omitempty"`
	Links Links                            `json:"links"`
}

// AlbumsItemsResourceIdentifier defines model for Albums_Items_Resource_Identifier.
type AlbumsItemsResourceIdentifier struct {
	// Id Resource id
	Id   string                             `json:"id"`
	Meta *AlbumsItemsResourceIdentifierMeta `json:"meta,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// AlbumsItemsResourceIdentifierMeta defines model for Albums_Items_Resource_Identifier_Meta.
type AlbumsItemsResourceIdentifierMeta struct {
	// TrackNumber track number
	TrackNumber int32 `json:"trackNumber"`

	// VolumeNumber volume number
	VolumeNumber int32 `json:"volumeNumber"`
}

// AlbumsMultiRelationshipDataDocument defines model for Albums_Multi_Relationship_Data_Document.
type AlbumsMultiRelationshipDataDocument struct {
	Data     *[]ResourceIdentifier `json:"data,omitempty"`
	Included *Included             `json:"included,omitempty"`
	Links    Links                 `json:"links"`
}

// AlbumsMultiResourceDataDocument defines model for Albums_Multi_Resource_Data_Document.
type AlbumsMultiResourceDataDocument struct {
	Data     []AlbumsResourceObject `json:"data"`
	Included *Included              `json:"included,omitempty"`
	Links    Links                  `json:"links"`
}

// AlbumsRelationships defines model for Albums_Relationships.
type AlbumsRelationships struct {
	Artists       MultiRelationshipDataDocument            `json:"artists"`
	CoverArt      MultiRelationshipDataDocument            `json:"coverArt"`
	Genres        MultiRelationshipDataDocument            `json:"genres"`
	Items         AlbumsItemsMultiRelationshipDataDocument `json:"items"`
	Owners        MultiRelationshipDataDocument            `json:"owners"`
	Providers     MultiRelationshipDataDocument            `json:"providers"`
	SimilarAlbums MultiRelationshipDataDocument            `json:"similarAlbums"`
}

// AlbumsResourceObject defines model for Albums_Resource_Object.
type AlbumsResourceObject struct {
	Attributes *AlbumsAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id            string               `json:"id"`
	Relationships *AlbumsRelationships `json:"relationships,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// AlbumsSingleResourceDataDocument defines model for Albums_Single_Resource_Data_Document.
type AlbumsSingleResourceDataDocument struct {
	Data     AlbumsResourceObject `json:"data"`
	Included *Included            `json:"included,omitempty"`
	Links    Links                `json:"links"`
}

// AppreciationsCreateOperationPayload defines model for AppreciationsCreateOperation_Payload.
type AppreciationsCreateOperationPayload struct {
	Data AppreciationsCreateOperationPayloadData `json:"data"`
	Meta *ArtistCreateOperationMeta              `json:"meta,omitempty"`
}

// AppreciationsCreateOperationPayloadData defines model for AppreciationsCreateOperation_Payload_Data.
type AppreciationsCreateOperationPayloadData struct {
	Relationships AppreciationsCreateOperationPayloadDataRelationships `json:"relationships"`
	Type          AppreciationsCreateOperationPayloadDataType          `json:"type"`
}

// AppreciationsCreateOperationPayloadDataType defines model for AppreciationsCreateOperationPayloadData.Type.
type AppreciationsCreateOperationPayloadDataType string

// AppreciationsCreateOperationPayloadDataRelationships defines model for AppreciationsCreateOperation_Payload_Data_Relationships.
type AppreciationsCreateOperationPayloadDataRelationships struct {
	AppreciatedItems AppreciationsCreateOperationPayloadDataRelationshipsAppreciatedItem `json:"appreciatedItems"`
}

// AppreciationsCreateOperationPayloadDataRelationshipsAppreciatedItem defines model for AppreciationsCreateOperation_Payload_Data_Relationships_AppreciatedItem.
type AppreciationsCreateOperationPayloadDataRelationshipsAppreciatedItem struct {
	Data []AppreciationsCreateOperationPayloadDataRelationshipsAppreciatedItemData `json:"data"`
}

// AppreciationsCreateOperationPayloadDataRelationshipsAppreciatedItemData defines model for AppreciationsCreateOperation_Payload_Data_Relationships_AppreciatedItem_Data.
type AppreciationsCreateOperationPayloadDataRelationshipsAppreciatedItemData struct {
	Id   string                                                                      `json:"id"`
	Type AppreciationsCreateOperationPayloadDataRelationshipsAppreciatedItemDataType `json:"type"`
}

// AppreciationsCreateOperationPayloadDataRelationshipsAppreciatedItemDataType defines model for AppreciationsCreateOperationPayloadDataRelationshipsAppreciatedItemData.Type.
type AppreciationsCreateOperationPayloadDataRelationshipsAppreciatedItemDataType string

// AppreciationsAttributes defines model for Appreciations_Attributes.
type AppreciationsAttributes struct {
	// CreatedAt Time when the appreciation was created
	CreatedAt time.Time `json:"createdAt"`
}

// AppreciationsResourceObject defines model for Appreciations_Resource_Object.
type AppreciationsResourceObject struct {
	Attributes *AppreciationsAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id string `json:"id"`

	// Type Resource type
	Type string `json:"type"`
}

// AppreciationsSingleResourceDataDocument defines model for Appreciations_Single_Resource_Data_Document.
type AppreciationsSingleResourceDataDocument struct {
	Data     AppreciationsResourceObject `json:"data"`
	Included *Included                   `json:"included,omitempty"`
	Links    Links                       `json:"links"`
}

// ArtistBiographiesAttributes defines model for ArtistBiographies_Attributes.
type ArtistBiographiesAttributes struct {
	// Editable Boolean to indicate if the biography is editable (source = tidal or artist)
	Editable bool `json:"editable"`

	// Text Artist biography
	Text string `json:"text"`
}

// ArtistBiographiesMultiRelationshipDataDocument defines model for ArtistBiographies_Multi_Relationship_Data_Document.
type ArtistBiographiesMultiRelationshipDataDocument struct {
	Data     *[]ResourceIdentifier `json:"data,omitempty"`
	Included *Included             `json:"included,omitempty"`
	Links    Links                 `json:"links"`
}

// ArtistBiographiesMultiResourceDataDocument defines model for ArtistBiographies_Multi_Resource_Data_Document.
type ArtistBiographiesMultiResourceDataDocument struct {
	Data     []ArtistBiographiesResourceObject `json:"data"`
	Included *Included                         `json:"included,omitempty"`
	Links    Links                             `json:"links"`
}

// ArtistBiographiesRelationships defines model for ArtistBiographies_Relationships.
type ArtistBiographiesRelationships struct {
	Owners MultiRelationshipDataDocument `json:"owners"`
}

// ArtistBiographiesResourceObject defines model for ArtistBiographies_Resource_Object.
type ArtistBiographiesResourceObject struct {
	Attributes *ArtistBiographiesAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id            string                          `json:"id"`
	Relationships *ArtistBiographiesRelationships `json:"relationships,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// ArtistBiographiesSingleResourceDataDocument defines model for ArtistBiographies_Single_Resource_Data_Document.
type ArtistBiographiesSingleResourceDataDocument struct {
	Data     ArtistBiographiesResourceObject `json:"data"`
	Included *Included                       `json:"included,omitempty"`
	Links    Links                           `json:"links"`
}

// ArtistBiographyUpdateBody defines model for ArtistBiographyUpdateBody.
type ArtistBiographyUpdateBody struct {
	Data ArtistBiographyUpdateBodyData `json:"data"`
}

// ArtistBiographyUpdateBodyData defines model for ArtistBiographyUpdateBody_Data.
type ArtistBiographyUpdateBodyData struct {
	Attributes ArtistBiographyUpdateBodyDataAttributes `json:"attributes"`
	Id         string                                  `json:"id"`
	Type       ArtistBiographyUpdateBodyDataType       `json:"type"`
}

// ArtistBiographyUpdateBodyDataType defines model for ArtistBiographyUpdateBodyData.Type.
type ArtistBiographyUpdateBodyDataType string

// ArtistBiographyUpdateBodyDataAttributes defines model for ArtistBiographyUpdateBody_Data_Attributes.
type ArtistBiographyUpdateBodyDataAttributes struct {
	Text *string `json:"text,omitempty"`
}

// ArtistClaimAcceptedArtistsRelationshipUpdateOperationPayload defines model for ArtistClaimAcceptedArtistsRelationshipUpdateOperation_Payload.
type ArtistClaimAcceptedArtistsRelationshipUpdateOperationPayload struct {
	Data []ArtistClaimAcceptedArtistsRelationshipUpdateOperationPayloadData `json:"data"`
}

// ArtistClaimAcceptedArtistsRelationshipUpdateOperationPayloadData defines model for ArtistClaimAcceptedArtistsRelationshipUpdateOperation_Payload_Data.
type ArtistClaimAcceptedArtistsRelationshipUpdateOperationPayloadData struct {
	Id   string                                                               `json:"id"`
	Type ArtistClaimAcceptedArtistsRelationshipUpdateOperationPayloadDataType `json:"type"`
}

// ArtistClaimAcceptedArtistsRelationshipUpdateOperationPayloadDataType defines model for ArtistClaimAcceptedArtistsRelationshipUpdateOperationPayloadData.Type.
type ArtistClaimAcceptedArtistsRelationshipUpdateOperationPayloadDataType string

// ArtistClaimsCreateOperationPayload defines model for ArtistClaimsCreateOperation_Payload.
type ArtistClaimsCreateOperationPayload struct {
	Data ArtistClaimsCreateOperationPayloadData `json:"data"`
}

// ArtistClaimsCreateOperationPayloadData defines model for ArtistClaimsCreateOperation_Payload_Data.
type ArtistClaimsCreateOperationPayloadData struct {
	Attributes ArtistClaimsCreateOperationPayloadDataAttributes `json:"attributes"`
	Type       ArtistClaimsCreateOperationPayloadDataType       `json:"type"`
}

// ArtistClaimsCreateOperationPayloadDataType defines model for ArtistClaimsCreateOperationPayloadData.Type.
type ArtistClaimsCreateOperationPayloadDataType string

// ArtistClaimsCreateOperationPayloadDataAttributes defines model for ArtistClaimsCreateOperation_Payload_Data_Attributes.
type ArtistClaimsCreateOperationPayloadDataAttributes struct {
	Provider ArtistClaimsCreateOperationPayloadDataAttributesProvider `json:"provider"`
}

// ArtistClaimsCreateOperationPayloadDataAttributesProvider defines model for ArtistClaimsCreateOperationPayloadDataAttributes.Provider.
type ArtistClaimsCreateOperationPayloadDataAttributesProvider string

// ArtistClaimsUpdateOperationPayload defines model for ArtistClaimsUpdateOperation_Payload.
type ArtistClaimsUpdateOperationPayload struct {
	Data *ArtistClaimsUpdateOperationPayloadData `json:"data,omitempty"`
	Meta ArtistClaimsUpdateOperationPayloadMeta  `json:"meta"`
}

// ArtistClaimsUpdateOperationPayloadData defines model for ArtistClaimsUpdateOperation_Payload_Data.
type ArtistClaimsUpdateOperationPayloadData struct {
	Attributes *ArtistClaimsUpdateOperationPayloadDataAttributes `json:"attributes,omitempty"`
	Id         *string                                           `json:"id,omitempty"`
	Type       ArtistClaimsUpdateOperationPayloadDataType        `json:"type"`
}

// ArtistClaimsUpdateOperationPayloadDataType defines model for ArtistClaimsUpdateOperationPayloadData.Type.
type ArtistClaimsUpdateOperationPayloadDataType string

// ArtistClaimsUpdateOperationPayloadDataAttributes defines model for ArtistClaimsUpdateOperation_Payload_Data_Attributes.
type ArtistClaimsUpdateOperationPayloadDataAttributes = map[string]interface{}

// ArtistClaimsUpdateOperationPayloadMeta defines model for ArtistClaimsUpdateOperation_Payload_Meta.
type ArtistClaimsUpdateOperationPayloadMeta struct {
	AuthorizationCode string `json:"authorizationCode"`
}

// ArtistClaimsAttributes defines model for ArtistClaims_Attributes.
type ArtistClaimsAttributes struct {
	// Provider The DSP used for authentication
	Provider ArtistClaimsAttributesProvider `json:"provider"`

	// Recommendation The recommended claim resolution
	Recommendation *ArtistClaimsAttributesRecommendation `json:"recommendation,omitempty"`

	// RedirectUrl The DSP redirect url used for authentication
	RedirectUrl *string `json:"redirectUrl,omitempty"`

	// RetrievedUpcs List of UPCs retrieved from the DSP
	RetrievedUpcs *[]BarcodeId `json:"retrievedUpcs,omitempty"`

	// Status Current status of this claim
	Status *ArtistClaimsAttributesStatus `json:"status,omitempty"`
}

// ArtistClaimsAttributesProvider The DSP used for authentication
type ArtistClaimsAttributesProvider string

// ArtistClaimsAttributesRecommendation The recommended claim resolution
type ArtistClaimsAttributesRecommendation string

// ArtistClaimsAttributesStatus Current status of this claim
type ArtistClaimsAttributesStatus string

// ArtistClaimsMultiRelationshipDataDocument defines model for ArtistClaims_Multi_Relationship_Data_Document.
type ArtistClaimsMultiRelationshipDataDocument struct {
	Data     *[]ResourceIdentifier `json:"data,omitempty"`
	Included *Included             `json:"included,omitempty"`
	Links    Links                 `json:"links"`
}

// ArtistClaimsRelationships defines model for ArtistClaims_Relationships.
type ArtistClaimsRelationships struct {
	AcceptedArtists    MultiRelationshipDataDocument `json:"acceptedArtists"`
	Owners             MultiRelationshipDataDocument `json:"owners"`
	RecommendedArtists MultiRelationshipDataDocument `json:"recommendedArtists"`
}

// ArtistClaimsResourceObject defines model for ArtistClaims_Resource_Object.
type ArtistClaimsResourceObject struct {
	Attributes *ArtistClaimsAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id            string                     `json:"id"`
	Relationships *ArtistClaimsRelationships `json:"relationships,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// ArtistClaimsSingleResourceDataDocument defines model for ArtistClaims_Single_Resource_Data_Document.
type ArtistClaimsSingleResourceDataDocument struct {
	Data     ArtistClaimsResourceObject `json:"data"`
	Included *Included                  `json:"included,omitempty"`
	Links    Links                      `json:"links"`
}

// ArtistCreateOperationMeta defines model for ArtistCreateOperation_Meta.
type ArtistCreateOperationMeta struct {
	DryRun *bool `json:"dryRun,omitempty"`
}

// ArtistCreateOperationPayload defines model for ArtistCreateOperation_Payload.
type ArtistCreateOperationPayload struct {
	Data ArtistCreateOperationPayloadData `json:"data"`
	Meta *ArtistCreateOperationMeta       `json:"meta,omitempty"`
}

// ArtistCreateOperationPayloadData defines model for ArtistCreateOperation_Payload_Data.
type ArtistCreateOperationPayloadData struct {
	Attributes ArtistCreateOperationPayloadDataAttributes `json:"attributes"`
	Type       ArtistCreateOperationPayloadDataType       `json:"type"`
}

// ArtistCreateOperationPayloadDataType defines model for ArtistCreateOperationPayloadData.Type.
type ArtistCreateOperationPayloadDataType string

// ArtistCreateOperationPayloadDataAttributes defines model for ArtistCreateOperation_Payload_Data_Attributes.
type ArtistCreateOperationPayloadDataAttributes struct {
	Handle *string `json:"handle,omitempty"`
	Name   string  `json:"name"`
}

// ArtistFollowingRelationshipAddOperationPayload defines model for ArtistFollowingRelationshipAddOperation_Payload.
type ArtistFollowingRelationshipAddOperationPayload struct {
	Data []ArtistFollowingRelationshipAddOperationPayloadData `json:"data"`
}

// ArtistFollowingRelationshipAddOperationPayloadData defines model for ArtistFollowingRelationshipAddOperation_Payload_Data.
type ArtistFollowingRelationshipAddOperationPayloadData struct {
	Id   string                                                 `json:"id"`
	Type ArtistFollowingRelationshipAddOperationPayloadDataType `json:"type"`
}

// ArtistFollowingRelationshipAddOperationPayloadDataType defines model for ArtistFollowingRelationshipAddOperationPayloadData.Type.
type ArtistFollowingRelationshipAddOperationPayloadDataType string

// ArtistFollowingRelationshipRemoveOperationPayload defines model for ArtistFollowingRelationshipRemoveOperation_Payload.
type ArtistFollowingRelationshipRemoveOperationPayload struct {
	Data []ArtistFollowingRelationshipRemoveOperationPayloadData `json:"data"`
}

// ArtistFollowingRelationshipRemoveOperationPayloadData defines model for ArtistFollowingRelationshipRemoveOperation_Payload_Data.
type ArtistFollowingRelationshipRemoveOperationPayloadData struct {
	Id   string                                                    `json:"id"`
	Type ArtistFollowingRelationshipRemoveOperationPayloadDataType `json:"type"`
}

// ArtistFollowingRelationshipRemoveOperationPayloadDataType defines model for ArtistFollowingRelationshipRemoveOperationPayloadData.Type.
type ArtistFollowingRelationshipRemoveOperationPayloadDataType string

// ArtistProfileArtRelationshipUpdateOperationPayload defines model for ArtistProfileArtRelationshipUpdateOperation_Payload.
type ArtistProfileArtRelationshipUpdateOperationPayload struct {
	Data []ArtistProfileArtRelationshipUpdateOperationPayloadData `json:"data"`
}

// ArtistProfileArtRelationshipUpdateOperationPayloadData defines model for ArtistProfileArtRelationshipUpdateOperation_Payload_Data.
type ArtistProfileArtRelationshipUpdateOperationPayloadData struct {
	Id   string                                                     `json:"id"`
	Type ArtistProfileArtRelationshipUpdateOperationPayloadDataType `json:"type"`
}

// ArtistProfileArtRelationshipUpdateOperationPayloadDataType defines model for ArtistProfileArtRelationshipUpdateOperationPayloadData.Type.
type ArtistProfileArtRelationshipUpdateOperationPayloadDataType string

// ArtistRolesAttributes defines model for ArtistRoles_Attributes.
type ArtistRolesAttributes struct {
	Name *string `json:"name,omitempty"`
}

// ArtistRolesMultiResourceDataDocument defines model for ArtistRoles_Multi_Resource_Data_Document.
type ArtistRolesMultiResourceDataDocument struct {
	Data     []ArtistRolesResourceObject `json:"data"`
	Included *Included                   `json:"included,omitempty"`
	Links    Links                       `json:"links"`
}

// ArtistRolesResourceObject defines model for ArtistRoles_Resource_Object.
type ArtistRolesResourceObject struct {
	Attributes *ArtistRolesAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id string `json:"id"`

	// Type Resource type
	Type string `json:"type"`
}

// ArtistRolesSingleResourceDataDocument defines model for ArtistRoles_Single_Resource_Data_Document.
type ArtistRolesSingleResourceDataDocument struct {
	Data     ArtistRolesResourceObject `json:"data"`
	Included *Included                 `json:"included,omitempty"`
	Links    Links                     `json:"links"`
}

// ArtistUpdateBody defines model for ArtistUpdateBody.
type ArtistUpdateBody struct {
	Data ArtistUpdateBodyData  `json:"data"`
	Meta *ArtistUpdateBodyMeta `json:"meta,omitempty"`
}

// ArtistUpdateBodyData defines model for ArtistUpdateBody_Data.
type ArtistUpdateBodyData struct {
	Attributes ArtistUpdateBodyDataAttributes `json:"attributes"`
	Id         string                         `json:"id"`
	Type       ArtistUpdateBodyDataType       `json:"type"`
}

// ArtistUpdateBodyDataType defines model for ArtistUpdateBodyData.Type.
type ArtistUpdateBodyDataType string

// ArtistUpdateBodyDataAttributes defines model for ArtistUpdateBody_Data_Attributes.
type ArtistUpdateBodyDataAttributes struct {
	ContributionsEnabled    *bool                  `json:"contributionsEnabled,omitempty"`
	ContributionsSalesPitch *string                `json:"contributionsSalesPitch,omitempty"`
	ExternalLinks           *[]ExternalLinkPayload `json:"externalLinks,omitempty"`
	Handle                  *string                `json:"handle,omitempty"`
	Name                    *string                `json:"name,omitempty"`
}

// ArtistUpdateBodyMeta defines model for ArtistUpdateBody_Meta.
type ArtistUpdateBodyMeta struct {
	DryRun *bool `json:"dryRun,omitempty"`
}

// ArtistsAttributes defines model for Artists_Attributes.
type ArtistsAttributes struct {
	// ContributionsEnabled Is the artist enabled for contributions?
	ContributionsEnabled *bool `json:"contributionsEnabled,omitempty"`

	// ContributionsSalesPitch Contributions sales pitch
	ContributionsSalesPitch *string `json:"contributionsSalesPitch,omitempty"`

	// ExternalLinks Artist links external to TIDAL API
	ExternalLinks *[]ExternalLink `json:"externalLinks,omitempty"`

	// Handle Artist handle
	Handle *string `json:"handle,omitempty"`

	// Name Artist name
	Name string `json:"name"`

	// Popularity Artist popularity (0.0 - 1.0)
	Popularity float64 `json:"popularity"`

	// Spotlighted Is the artist spotlighted?
	Spotlighted *bool `json:"spotlighted,omitempty"`
}

// ArtistsFollowersMultiRelationshipDataDocument defines model for Artists_Followers_Multi_Relationship_Data_Document.
type ArtistsFollowersMultiRelationshipDataDocument struct {
	Data  *[]ArtistsFollowersResourceIdentifier `json:"data,omitempty"`
	Links Links                                 `json:"links"`
}

// ArtistsFollowersResourceIdentifier defines model for Artists_Followers_Resource_Identifier.
type ArtistsFollowersResourceIdentifier struct {
	// Id Resource id
	Id   string                                  `json:"id"`
	Meta *ArtistsFollowersResourceIdentifierMeta `json:"meta,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// ArtistsFollowersResourceIdentifierMeta defines model for Artists_Followers_Resource_Identifier_Meta.
type ArtistsFollowersResourceIdentifierMeta struct {
	// Viewer Optional context about the relationship
	Viewer *ArtistsFollowersResourceMetaViewerContext `json:"viewer,omitempty"`
}

// ArtistsFollowersResourceMetaViewerContext Optional context about the relationship
type ArtistsFollowersResourceMetaViewerContext struct {
	// FollowsMyArtist Boolean to indicate if the artist is following my artist
	FollowsMyArtist *bool `json:"followsMyArtist,omitempty"`

	// MyArtistFollows Boolean to indicate if my artist is following the artist
	MyArtistFollows *bool `json:"myArtistFollows,omitempty"`
}

// ArtistsFollowingMultiRelationshipDataDocument defines model for Artists_Following_Multi_Relationship_Data_Document.
type ArtistsFollowingMultiRelationshipDataDocument struct {
	Data  *[]ArtistsFollowingResourceIdentifier `json:"data,omitempty"`
	Links Links                                 `json:"links"`
}

// ArtistsFollowingResourceIdentifier defines model for Artists_Following_Resource_Identifier.
type ArtistsFollowingResourceIdentifier struct {
	// Id Resource id
	Id   string                                  `json:"id"`
	Meta *ArtistsFollowingResourceIdentifierMeta `json:"meta,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// ArtistsFollowingResourceIdentifierMeta defines model for Artists_Following_Resource_Identifier_Meta.
type ArtistsFollowingResourceIdentifierMeta struct {
	// Viewer Optional context about the relationship
	Viewer *ArtistsFollowersResourceMetaViewerContext `json:"viewer,omitempty"`
}

// ArtistsMultiRelationshipDataDocument defines model for Artists_Multi_Relationship_Data_Document.
type ArtistsMultiRelationshipDataDocument struct {
	Data     *[]ResourceIdentifier `json:"data,omitempty"`
	Included *Included             `json:"included,omitempty"`
	Links    Links                 `json:"links"`
}

// ArtistsMultiResourceDataDocument defines model for Artists_Multi_Resource_Data_Document.
type ArtistsMultiResourceDataDocument struct {
	Data     []ArtistsResourceObject `json:"data"`
	Included *Included               `json:"included,omitempty"`
	Links    Links                   `json:"links"`
}

// ArtistsRelationships defines model for Artists_Relationships.
type ArtistsRelationships struct {
	Albums         MultiRelationshipDataDocument                      `json:"albums"`
	Biography      SingleRelationshipDataDocument                     `json:"biography"`
	Followers      ArtistsFollowersMultiRelationshipDataDocument      `json:"followers"`
	Following      ArtistsFollowingMultiRelationshipDataDocument      `json:"following"`
	Owners         MultiRelationshipDataDocument                      `json:"owners"`
	ProfileArt     MultiRelationshipDataDocument                      `json:"profileArt"`
	Radio          MultiRelationshipDataDocument                      `json:"radio"`
	Roles          MultiRelationshipDataDocument                      `json:"roles"`
	SimilarArtists MultiRelationshipDataDocument                      `json:"similarArtists"`
	TrackProviders ArtistsTrackProvidersMultiRelationshipDataDocument `json:"trackProviders"`
	Tracks         MultiRelationshipDataDocument                      `json:"tracks"`
	Videos         MultiRelationshipDataDocument                      `json:"videos"`
}

// ArtistsResourceObject defines model for Artists_Resource_Object.
type ArtistsResourceObject struct {
	Attributes *ArtistsAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id            string                `json:"id"`
	Relationships *ArtistsRelationships `json:"relationships,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// ArtistsSingleRelationshipDataDocument defines model for Artists_Single_Relationship_Data_Document.
type ArtistsSingleRelationshipDataDocument struct {
	Data     *ResourceIdentifier `json:"data,omitempty"`
	Included *Included           `json:"included,omitempty"`
	Links    Links               `json:"links"`
}

// ArtistsSingleResourceDataDocument defines model for Artists_Single_Resource_Data_Document.
type ArtistsSingleResourceDataDocument struct {
	Data     ArtistsResourceObject `json:"data"`
	Included *Included             `json:"included,omitempty"`
	Links    Links                 `json:"links"`
}

// ArtistsTrackProvidersMultiRelationshipDataDocument defines model for Artists_TrackProviders_Multi_Relationship_Data_Document.
type ArtistsTrackProvidersMultiRelationshipDataDocument struct {
	Data  *[]ArtistsTrackProvidersResourceIdentifier `json:"data,omitempty"`
	Links Links                                      `json:"links"`
}

// ArtistsTrackProvidersResourceIdentifier defines model for Artists_TrackProviders_Resource_Identifier.
type ArtistsTrackProvidersResourceIdentifier struct {
	// Id Resource id
	Id   string                                       `json:"id"`
	Meta *ArtistsTrackProvidersResourceIdentifierMeta `json:"meta,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// ArtistsTrackProvidersResourceIdentifierMeta defines model for Artists_TrackProviders_Resource_Identifier_Meta.
type ArtistsTrackProvidersResourceIdentifierMeta struct {
	// NumberOfTracks Total number of tracks released together with the provider
	NumberOfTracks int64 `json:"numberOfTracks"`
}

// ArtworkCreateOperationPayload defines model for ArtworkCreateOperation_Payload.
type ArtworkCreateOperationPayload struct {
	Data ArtworkCreateOperationPayloadData `json:"data"`
}

// ArtworkCreateOperationPayloadData defines model for ArtworkCreateOperation_Payload_Data.
type ArtworkCreateOperationPayloadData struct {
	Attributes ArtworkCreateOperationPayloadDataAttributes `json:"attributes"`
	Type       ArtworkCreateOperationPayloadDataType       `json:"type"`
}

// ArtworkCreateOperationPayloadDataType defines model for ArtworkCreateOperationPayloadData.Type.
type ArtworkCreateOperationPayloadDataType string

// ArtworkCreateOperationPayloadDataAttributes defines model for ArtworkCreateOperation_Payload_Data_Attributes.
type ArtworkCreateOperationPayloadDataAttributes struct {
	MediaType  ArtworkCreateOperationPayloadDataAttributesMediaType  `json:"mediaType"`
	SourceFile ArtworkCreateOperationPayloadDataAttributesSourceFile `json:"sourceFile"`
}

// ArtworkCreateOperationPayloadDataAttributesMediaType defines model for ArtworkCreateOperationPayloadDataAttributes.MediaType.
type ArtworkCreateOperationPayloadDataAttributesMediaType string

// ArtworkCreateOperationPayloadDataAttributesSourceFile defines model for ArtworkCreateOperation_Payload_Data_Attributes_SourceFile.
type ArtworkCreateOperationPayloadDataAttributesSourceFile struct {
	Md5Hash string `json:"md5Hash"`
	Size    int64  `json:"size"`
}

// ArtworkFile Artwork files
type ArtworkFile struct {
	// Href Artwork file href
	Href string `json:"href"`

	// Meta Metadata about an artwork file
	Meta *ArtworkFileMeta `json:"meta,omitempty"`
}

// ArtworkFileMeta Metadata about an artwork file
type ArtworkFileMeta struct {
	// Height Height (in pixels)
	Height int32 `json:"height"`

	// Width Width (in pixels)
	Width int32 `json:"width"`
}

// ArtworkSourceFile Artwork source file
type ArtworkSourceFile struct {
	// Md5Hash MD5 hash of file to be uploaded
	Md5Hash string `json:"md5Hash"`

	// Size File size of the artwork in bytes
	Size int64 `json:"size"`

	// Status File status
	Status FileStatus `json:"status"`

	// UploadLink Upload link
	UploadLink FileUploadLink `json:"uploadLink"`
}

// ArtworksAttributes defines model for Artworks_Attributes.
type ArtworksAttributes struct {
	// Files Artwork files
	Files []ArtworkFile `json:"files"`

	// MediaType Media type of artwork files
	MediaType ArtworksAttributesMediaType `json:"mediaType"`

	// SourceFile Artwork source file
	SourceFile *ArtworkSourceFile `json:"sourceFile,omitempty"`
}

// ArtworksAttributesMediaType Media type of artwork files
type ArtworksAttributesMediaType string

// ArtworksMultiRelationshipDataDocument defines model for Artworks_Multi_Relationship_Data_Document.
type ArtworksMultiRelationshipDataDocument struct {
	Data     *[]ResourceIdentifier `json:"data,omitempty"`
	Included *Included             `json:"included,omitempty"`
	Links    Links                 `json:"links"`
}

// ArtworksMultiResourceDataDocument defines model for Artworks_Multi_Resource_Data_Document.
type ArtworksMultiResourceDataDocument struct {
	Data     []ArtworksResourceObject `json:"data"`
	Included *Included                `json:"included,omitempty"`
	Links    Links                    `json:"links"`
}

// ArtworksRelationships defines model for Artworks_Relationships.
type ArtworksRelationships struct {
	Owners MultiRelationshipDataDocument `json:"owners"`
}

// ArtworksResourceObject defines model for Artworks_Resource_Object.
type ArtworksResourceObject struct {
	Attributes *ArtworksAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id            string                 `json:"id"`
	Relationships *ArtworksRelationships `json:"relationships,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// ArtworksSingleResourceDataDocument defines model for Artworks_Single_Resource_Data_Document.
type ArtworksSingleResourceDataDocument struct {
	Data     ArtworksResourceObject `json:"data"`
	Included *Included              `json:"included,omitempty"`
	Links    Links                  `json:"links"`
}

// AttachSourceFileToTrack defines model for AttachSourceFileToTrack.
type AttachSourceFileToTrack struct {
	Id   string                      `json:"id"`
	Type AttachSourceFileToTrackType `json:"type"`
}

// AttachSourceFileToTrackType defines model for AttachSourceFileToTrack.Type.
type AttachSourceFileToTrackType string

// AudioNormalizationData Track normalization data
type AudioNormalizationData struct {
	PeakAmplitude *float32 `json:"peakAmplitude,omitempty"`
	ReplayGain    *float32 `json:"replayGain,omitempty"`
}

// BarcodeId Barcode Id
type BarcodeId struct {
	Value string `json:"value"`
}

// Copyright Copyright information
type Copyright struct {
	Text string `json:"text"`
}

// DrmData DRM data. Absence implies no DRM.
type DrmData struct {
	CertificateUrl *string           `json:"certificateUrl,omitempty"`
	DrmSystem      *DrmDataDrmSystem `json:"drmSystem,omitempty"`
	LicenseUrl     *string           `json:"licenseUrl,omitempty"`
}

// DrmDataDrmSystem defines model for DrmData.DrmSystem.
type DrmDataDrmSystem string

// ErrorObject defines model for Error_Object.
type ErrorObject struct {
	// Code application-specific error code
	Code *string `json:"code,omitempty"`

	// Detail human-readable explanation specific to this occurrence of the problem
	Detail *string `json:"detail,omitempty"`

	// Id unique identifier for this particular occurrence of the problem
	Id     *string            `json:"id,omitempty"`
	Source *ErrorObjectSource `json:"source,omitempty"`

	// Status HTTP status code applicable to this problem
	Status *string `json:"status,omitempty"`
}

// ErrorObjectSource defines model for Error_Object_Source.
type ErrorObjectSource struct {
	// Header string indicating the name of a single request header which caused the error
	Header *string `json:"header,omitempty"`

	// Parameter string indicating which URI query parameter caused the error.
	Parameter *string `json:"parameter,omitempty"`

	// Pointer a JSON Pointer [RFC6901] to the value in the request document that caused the error
	Pointer *string `json:"pointer,omitempty"`
}

// ErrorsDocument defines model for Errors_Document.
type ErrorsDocument struct {
	// Errors Array of error objects
	Errors *[]ErrorObject `json:"errors,omitempty"`
	Links  *Links         `json:"links,omitempty"`
}

// ExternalLink defines model for External_Link.
type ExternalLink struct {
	Href string `json:"href"`

	// Meta metadata about an external link
	Meta ExternalLinkMeta `json:"meta"`
}

// ExternalLinkMeta metadata about an external link
type ExternalLinkMeta struct {
	Type ExternalLinkMetaType `json:"type"`
}

// ExternalLinkMetaType defines model for ExternalLinkMeta.Type.
type ExternalLinkMetaType string

// ExternalLinkPayload defines model for External_Link_Payload.
type ExternalLinkPayload struct {
	Href *string `json:"href,omitempty"`

	// Meta metadata about an external link
	Meta ExternalLinkMeta `json:"meta"`
}

// FileStatus File status
type FileStatus struct {
	// ModerationFileStatus Moderation status for file
	ModerationFileStatus FileStatusModerationFileStatus `json:"moderationFileStatus"`

	// TechnicalFileStatus Technical status for file
	TechnicalFileStatus FileStatusTechnicalFileStatus `json:"technicalFileStatus"`
}

// FileStatusModerationFileStatus Moderation status for file
type FileStatusModerationFileStatus string

// FileStatusTechnicalFileStatus Technical status for file
type FileStatusTechnicalFileStatus string

// FileUploadLink Upload link
type FileUploadLink struct {
	// Href Href to upload actual file to
	Href string `json:"href"`

	// Meta metadata for upload link
	Meta FileUploadLinkMeta `json:"meta"`
}

// FileUploadLinkMeta metadata for upload link
type FileUploadLinkMeta struct {
	// Headers HTTP headers that must be added to the operation
	Headers *map[string]string `json:"headers,omitempty"`

	// Method HTTP method
	Method string `json:"method"`
}

// GenresAttributes defines model for Genres_Attributes.
type GenresAttributes struct {
	// GenreName Genre name
	GenreName string `json:"genreName"`
}

// GenresMultiResourceDataDocument defines model for Genres_Multi_Resource_Data_Document.
type GenresMultiResourceDataDocument struct {
	Data     []GenresResourceObject `json:"data"`
	Included *Included              `json:"included,omitempty"`
	Links    Links                  `json:"links"`
}

// GenresResourceObject defines model for Genres_Resource_Object.
type GenresResourceObject struct {
	Attributes *GenresAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id string `json:"id"`

	// Type Resource type
	Type string `json:"type"`
}

// GenresSingleResourceDataDocument defines model for Genres_Single_Resource_Data_Document.
type GenresSingleResourceDataDocument struct {
	Data     GenresResourceObject `json:"data"`
	Included *Included            `json:"included,omitempty"`
	Links    Links                `json:"links"`
}

// Included defines model for Included.
type Included = []Included_Item

// Included_Item defines model for Included.Item.
type Included_Item struct {
	union json.RawMessage
}

// Links defines model for Links.
type Links struct {
	// Meta Non-standard meta information for links
	Meta *LinksMeta `json:"meta,omitempty"`

	// Next Link to next page
	Next *string `json:"next,omitempty"`

	// Self Link to self
	Self string `json:"self"`
}

// LinksMeta Non-standard meta information for links
type LinksMeta struct {
	// NextCursor Only cursor part of next link
	NextCursor string `json:"nextCursor"`
}

// LyricsCreateOperationPayload defines model for LyricsCreateOperation_Payload.
type LyricsCreateOperationPayload struct {
	Data LyricsCreateOperationPayloadData  `json:"data"`
	Meta *LyricsCreateOperationPayloadMeta `json:"meta,omitempty"`
}

// LyricsCreateOperationPayloadData defines model for LyricsCreateOperation_Payload_Data.
type LyricsCreateOperationPayloadData struct {
	Attributes    *LyricsCreateOperationPayloadDataAttributes   `json:"attributes,omitempty"`
	Relationships LyricsCreateOperationPayloadDataRelationships `json:"relationships"`
	Type          LyricsCreateOperationPayloadDataType          `json:"type"`
}

// LyricsCreateOperationPayloadDataType defines model for LyricsCreateOperationPayloadData.Type.
type LyricsCreateOperationPayloadDataType string

// LyricsCreateOperationPayloadDataAttributes defines model for LyricsCreateOperation_Payload_Data_Attributes.
type LyricsCreateOperationPayloadDataAttributes struct {
	Text *string `json:"text,omitempty"`
}

// LyricsCreateOperationPayloadDataRelationships defines model for LyricsCreateOperation_Payload_Data_Relationships.
type LyricsCreateOperationPayloadDataRelationships struct {
	Track LyricsCreateOperationPayloadDataRelationshipsTrack `json:"track"`
}

// LyricsCreateOperationPayloadDataRelationshipsTrack defines model for LyricsCreateOperation_Payload_Data_Relationships_Track.
type LyricsCreateOperationPayloadDataRelationshipsTrack struct {
	Id   string                                                 `json:"id"`
	Type LyricsCreateOperationPayloadDataRelationshipsTrackType `json:"type"`
}

// LyricsCreateOperationPayloadDataRelationshipsTrackType defines model for LyricsCreateOperationPayloadDataRelationshipsTrack.Type.
type LyricsCreateOperationPayloadDataRelationshipsTrackType string

// LyricsCreateOperationPayloadMeta defines model for LyricsCreateOperation_Payload_Meta.
type LyricsCreateOperationPayloadMeta struct {
	Generate *bool `json:"generate,omitempty"`
}

// LyricsUpdateOperationPayload defines model for LyricsUpdateOperation_Payload.
type LyricsUpdateOperationPayload struct {
	Data LyricsUpdateOperationPayloadData `json:"data"`
}

// LyricsUpdateOperationPayloadData defines model for LyricsUpdateOperation_Payload_Data.
type LyricsUpdateOperationPayloadData struct {
	Attributes LyricsUpdateOperationPayloadDataAttributes `json:"attributes"`
	Id         string                                     `json:"id"`
	Type       LyricsUpdateOperationPayloadDataType       `json:"type"`
}

// LyricsUpdateOperationPayloadDataType defines model for LyricsUpdateOperationPayloadData.Type.
type LyricsUpdateOperationPayloadDataType string

// LyricsUpdateOperationPayloadDataAttributes defines model for LyricsUpdateOperation_Payload_Data_Attributes.
type LyricsUpdateOperationPayloadDataAttributes struct {
	Text string `json:"text"`
}

// LyricsAttributes defines model for Lyrics_Attributes.
type LyricsAttributes struct {
	TechnicalStatus LyricsAttributesTechnicalStatus `json:"technicalStatus"`
	Text            *string                         `json:"text,omitempty"`
}

// LyricsAttributesTechnicalStatus defines model for LyricsAttributes.TechnicalStatus.
type LyricsAttributesTechnicalStatus string

// LyricsMultiRelationshipDataDocument defines model for Lyrics_Multi_Relationship_Data_Document.
type LyricsMultiRelationshipDataDocument struct {
	Data     *[]ResourceIdentifier `json:"data,omitempty"`
	Included *Included             `json:"included,omitempty"`
	Links    Links                 `json:"links"`
}

// LyricsMultiResourceDataDocument defines model for Lyrics_Multi_Resource_Data_Document.
type LyricsMultiResourceDataDocument struct {
	Data     []LyricsResourceObject `json:"data"`
	Included *Included              `json:"included,omitempty"`
	Links    Links                  `json:"links"`
}

// LyricsRelationships defines model for Lyrics_Relationships.
type LyricsRelationships struct {
	Owners MultiRelationshipDataDocument  `json:"owners"`
	Track  SingleRelationshipDataDocument `json:"track"`
}

// LyricsResourceObject defines model for Lyrics_Resource_Object.
type LyricsResourceObject struct {
	Attributes *LyricsAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id            string               `json:"id"`
	Relationships *LyricsRelationships `json:"relationships,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// LyricsSingleRelationshipDataDocument defines model for Lyrics_Single_Relationship_Data_Document.
type LyricsSingleRelationshipDataDocument struct {
	Data     *ResourceIdentifier `json:"data,omitempty"`
	Included *Included           `json:"included,omitempty"`
	Links    Links               `json:"links"`
}

// LyricsSingleResourceDataDocument defines model for Lyrics_Single_Resource_Data_Document.
type LyricsSingleResourceDataDocument struct {
	Data     LyricsResourceObject `json:"data"`
	Included *Included            `json:"included,omitempty"`
	Links    Links                `json:"links"`
}

// MultiRelationshipDataDocument defines model for Multi_Relationship_Data_Document.
type MultiRelationshipDataDocument struct {
	Data  *[]ResourceIdentifier `json:"data,omitempty"`
	Links Links                 `json:"links"`
}

// PlaylistCoverArtRelationshipUpdateOperationPayload defines model for PlaylistCoverArtRelationshipUpdateOperation_Payload.
type PlaylistCoverArtRelationshipUpdateOperationPayload struct {
	Data []PlaylistCoverArtRelationshipUpdateOperationPayloadData `json:"data"`
}

// PlaylistCoverArtRelationshipUpdateOperationPayloadData defines model for PlaylistCoverArtRelationshipUpdateOperation_Payload_Data.
type PlaylistCoverArtRelationshipUpdateOperationPayloadData struct {
	Id   string                                                     `json:"id"`
	Type PlaylistCoverArtRelationshipUpdateOperationPayloadDataType `json:"type"`
}

// PlaylistCoverArtRelationshipUpdateOperationPayloadDataType defines model for PlaylistCoverArtRelationshipUpdateOperationPayloadData.Type.
type PlaylistCoverArtRelationshipUpdateOperationPayloadDataType string

// PlaylistCreateOperationPayload defines model for PlaylistCreateOperation_Payload.
type PlaylistCreateOperationPayload struct {
	Data PlaylistCreateOperationPayloadData `json:"data"`
}

// PlaylistCreateOperationPayloadData defines model for PlaylistCreateOperation_Payload_Data.
type PlaylistCreateOperationPayloadData struct {
	Attributes PlaylistCreateOperationPayloadDataAttributes `json:"attributes"`
	Type       PlaylistCreateOperationPayloadDataType       `json:"type"`
}

// PlaylistCreateOperationPayloadDataType defines model for PlaylistCreateOperationPayloadData.Type.
type PlaylistCreateOperationPayloadDataType string

// PlaylistCreateOperationPayloadDataAttributes defines model for PlaylistCreateOperation_Payload_Data_Attributes.
type PlaylistCreateOperationPayloadDataAttributes struct {
	// AccessType Access type
	AccessType  *PlaylistCreateOperationPayloadDataAttributesAccessType `json:"accessType,omitempty"`
	Description *string                                                 `json:"description,omitempty"`
	Name        string                                                  `json:"name"`
}

// PlaylistCreateOperationPayloadDataAttributesAccessType Access type
type PlaylistCreateOperationPayloadDataAttributesAccessType string

// PlaylistItemsRelationshipAddOperationPayload defines model for PlaylistItemsRelationshipAddOperation_Payload.
type PlaylistItemsRelationshipAddOperationPayload struct {
	Data []PlaylistItemsRelationshipAddOperationPayloadData `json:"data"`
	Meta *PlaylistItemsRelationshipAddOperationPayloadMeta  `json:"meta,omitempty"`
}

// PlaylistItemsRelationshipAddOperationPayloadData defines model for PlaylistItemsRelationshipAddOperation_Payload_Data.
type PlaylistItemsRelationshipAddOperationPayloadData struct {
	Id   string                                               `json:"id"`
	Type PlaylistItemsRelationshipAddOperationPayloadDataType `json:"type"`
}

// PlaylistItemsRelationshipAddOperationPayloadDataType defines model for PlaylistItemsRelationshipAddOperationPayloadData.Type.
type PlaylistItemsRelationshipAddOperationPayloadDataType string

// PlaylistItemsRelationshipAddOperationPayloadMeta defines model for PlaylistItemsRelationshipAddOperation_Payload_Meta.
type PlaylistItemsRelationshipAddOperationPayloadMeta struct {
	PositionBefore string `json:"positionBefore"`
}

// PlaylistItemsRelationshipRemoveOperationPayload defines model for PlaylistItemsRelationshipRemoveOperation_Payload.
type PlaylistItemsRelationshipRemoveOperationPayload struct {
	Data []PlaylistItemsRelationshipRemoveOperationPayloadData `json:"data"`
}

// PlaylistItemsRelationshipRemoveOperationPayloadData defines model for PlaylistItemsRelationshipRemoveOperation_Payload_Data.
type PlaylistItemsRelationshipRemoveOperationPayloadData struct {
	Id   string                                                  `json:"id"`
	Meta PlaylistItemsRelationshipRemoveOperationPayloadDataMeta `json:"meta"`
	Type PlaylistItemsRelationshipRemoveOperationPayloadDataType `json:"type"`
}

// PlaylistItemsRelationshipRemoveOperationPayloadDataType defines model for PlaylistItemsRelationshipRemoveOperationPayloadData.Type.
type PlaylistItemsRelationshipRemoveOperationPayloadDataType string

// PlaylistItemsRelationshipRemoveOperationPayloadDataMeta defines model for PlaylistItemsRelationshipRemoveOperation_Payload_Data_Meta.
type PlaylistItemsRelationshipRemoveOperationPayloadDataMeta struct {
	ItemId string `json:"itemId"`
}

// PlaylistItemsRelationshipReorderOperationPayload defines model for PlaylistItemsRelationshipReorderOperation_Payload.
type PlaylistItemsRelationshipReorderOperationPayload struct {
	Data []PlaylistItemsRelationshipReorderOperationPayloadData `json:"data"`
	Meta *PlaylistItemsRelationshipReorderOperationPayloadMeta  `json:"meta,omitempty"`
}

// PlaylistItemsRelationshipReorderOperationPayloadData defines model for PlaylistItemsRelationshipReorderOperation_Payload_Data.
type PlaylistItemsRelationshipReorderOperationPayloadData struct {
	Id   string                                                   `json:"id"`
	Meta PlaylistItemsRelationshipReorderOperationPayloadDataMeta `json:"meta"`
	Type PlaylistItemsRelationshipReorderOperationPayloadDataType `json:"type"`
}

// PlaylistItemsRelationshipReorderOperationPayloadDataType defines model for PlaylistItemsRelationshipReorderOperationPayloadData.Type.
type PlaylistItemsRelationshipReorderOperationPayloadDataType string

// PlaylistItemsRelationshipReorderOperationPayloadDataMeta defines model for PlaylistItemsRelationshipReorderOperation_Payload_Data_Meta.
type PlaylistItemsRelationshipReorderOperationPayloadDataMeta struct {
	ItemId string `json:"itemId"`
}

// PlaylistItemsRelationshipReorderOperationPayloadMeta defines model for PlaylistItemsRelationshipReorderOperation_Payload_Meta.
type PlaylistItemsRelationshipReorderOperationPayloadMeta struct {
	PositionBefore string `json:"positionBefore"`
}

// PlaylistUpdateOperationPayload defines model for PlaylistUpdateOperation_Payload.
type PlaylistUpdateOperationPayload struct {
	Data PlaylistUpdateOperationPayloadData `json:"data"`
}

// PlaylistUpdateOperationPayloadData defines model for PlaylistUpdateOperation_Payload_Data.
type PlaylistUpdateOperationPayloadData struct {
	Attributes PlaylistUpdateOperationPayloadDataAttributes `json:"attributes"`
	Id         string                                       `json:"id"`
	Type       PlaylistUpdateOperationPayloadDataType       `json:"type"`
}

// PlaylistUpdateOperationPayloadDataType defines model for PlaylistUpdateOperationPayloadData.Type.
type PlaylistUpdateOperationPayloadDataType string

// PlaylistUpdateOperationPayloadDataAttributes defines model for PlaylistUpdateOperation_Payload_Data_Attributes.
type PlaylistUpdateOperationPayloadDataAttributes struct {
	// AccessType Access type
	AccessType  *PlaylistUpdateOperationPayloadDataAttributesAccessType `json:"accessType,omitempty"`
	Description *string                                                 `json:"description,omitempty"`
	Name        *string                                                 `json:"name,omitempty"`
}

// PlaylistUpdateOperationPayloadDataAttributesAccessType Access type
type PlaylistUpdateOperationPayloadDataAttributesAccessType string

// PlaylistsAttributes defines model for Playlists_Attributes.
type PlaylistsAttributes struct {
	// AccessType Access type
	AccessType PlaylistsAttributesAccessType `json:"accessType"`

	// Bounded Indicates if the playlist has a duration and set number of tracks
	Bounded bool `json:"bounded"`

	// CreatedAt Datetime of playlist creation (ISO 8601)
	CreatedAt time.Time `json:"createdAt"`

	// Description Playlist description
	Description *string `json:"description,omitempty"`

	// Duration Duration of playlist (ISO 8601)
	Duration      *string        `json:"duration,omitempty"`
	ExternalLinks []ExternalLink `json:"externalLinks"`

	// LastModifiedAt Datetime of last modification of the playlist (ISO 8601)
	LastModifiedAt time.Time `json:"lastModifiedAt"`

	// Name Playlist name
	Name string `json:"name"`

	// NumberOfItems Number of items in the playlist
	NumberOfItems *int32 `json:"numberOfItems,omitempty"`

	// PlaylistType The type of the playlist
	PlaylistType PlaylistsAttributesPlaylistType `json:"playlistType"`
}

// PlaylistsAttributesAccessType Access type
type PlaylistsAttributesAccessType string

// PlaylistsAttributesPlaylistType The type of the playlist
type PlaylistsAttributesPlaylistType string

// PlaylistsItemsMultiRelationshipDataDocument defines model for Playlists_Items_Multi_Relationship_Data_Document.
type PlaylistsItemsMultiRelationshipDataDocument struct {
	Data  *[]PlaylistsItemsResourceIdentifier `json:"data,omitempty"`
	Links Links                               `json:"links"`
}

// PlaylistsItemsResourceIdentifier defines model for Playlists_Items_Resource_Identifier.
type PlaylistsItemsResourceIdentifier struct {
	// Id Resource id
	Id   string                                `json:"id"`
	Meta *PlaylistsItemsResourceIdentifierMeta `json:"meta,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// PlaylistsItemsResourceIdentifierMeta defines model for Playlists_Items_Resource_Identifier_Meta.
type PlaylistsItemsResourceIdentifierMeta struct {
	AddedAt *time.Time `json:"addedAt,omitempty"`
	ItemId  *string    `json:"itemId,omitempty"`
}

// PlaylistsMultiRelationshipDataDocument defines model for Playlists_Multi_Relationship_Data_Document.
type PlaylistsMultiRelationshipDataDocument struct {
	Data     *[]ResourceIdentifier `json:"data,omitempty"`
	Included *Included             `json:"included,omitempty"`
	Links    Links                 `json:"links"`
}

// PlaylistsMultiResourceDataDocument defines model for Playlists_Multi_Resource_Data_Document.
type PlaylistsMultiResourceDataDocument struct {
	Data     []PlaylistsResourceObject `json:"data"`
	Included *Included                 `json:"included,omitempty"`
	Links    Links                     `json:"links"`
}

// PlaylistsRelationships defines model for Playlists_Relationships.
type PlaylistsRelationships struct {
	CoverArt MultiRelationshipDataDocument               `json:"coverArt"`
	Items    PlaylistsItemsMultiRelationshipDataDocument `json:"items"`
	Owners   MultiRelationshipDataDocument               `json:"owners"`
}

// PlaylistsResourceObject defines model for Playlists_Resource_Object.
type PlaylistsResourceObject struct {
	Attributes *PlaylistsAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id            string                  `json:"id"`
	Relationships *PlaylistsRelationships `json:"relationships,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// PlaylistsSingleResourceDataDocument defines model for Playlists_Single_Resource_Data_Document.
type PlaylistsSingleResourceDataDocument struct {
	Data     PlaylistsResourceObject `json:"data"`
	Included *Included               `json:"included,omitempty"`
	Links    Links                   `json:"links"`
}

// ProvidersAttributes defines model for Providers_Attributes.
type ProvidersAttributes struct {
	// Name Provider name
	Name string `json:"name"`
}

// ProvidersMultiResourceDataDocument defines model for Providers_Multi_Resource_Data_Document.
type ProvidersMultiResourceDataDocument struct {
	Data     []ProvidersResourceObject `json:"data"`
	Included *Included                 `json:"included,omitempty"`
	Links    Links                     `json:"links"`
}

// ProvidersResourceObject defines model for Providers_Resource_Object.
type ProvidersResourceObject struct {
	Attributes *ProvidersAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id string `json:"id"`

	// Type Resource type
	Type string `json:"type"`
}

// ProvidersSingleResourceDataDocument defines model for Providers_Single_Resource_Data_Document.
type ProvidersSingleResourceDataDocument struct {
	Data     ProvidersResourceObject `json:"data"`
	Included *Included               `json:"included,omitempty"`
	Links    Links                   `json:"links"`
}

// ResourceIdentifier defines model for Resource_Identifier.
type ResourceIdentifier struct {
	// Id Resource id
	Id string `json:"id"`

	// Type Resource type
	Type string `json:"type"`
}

// SearchResultsAttributes defines model for SearchResults_Attributes.
type SearchResultsAttributes struct {
	// DidYouMean 'did you mean' prompt
	DidYouMean *string `json:"didYouMean,omitempty"`

	// TrackingId search request unique tracking number
	TrackingId string `json:"trackingId"`
}

// SearchResultsMultiRelationshipDataDocument defines model for SearchResults_Multi_Relationship_Data_Document.
type SearchResultsMultiRelationshipDataDocument struct {
	Data     *[]ResourceIdentifier `json:"data,omitempty"`
	Included *Included             `json:"included,omitempty"`
	Links    Links                 `json:"links"`
}

// SearchResultsRelationships defines model for SearchResults_Relationships.
type SearchResultsRelationships struct {
	Albums    MultiRelationshipDataDocument `json:"albums"`
	Artists   MultiRelationshipDataDocument `json:"artists"`
	Playlists MultiRelationshipDataDocument `json:"playlists"`
	TopHits   MultiRelationshipDataDocument `json:"topHits"`
	Tracks    MultiRelationshipDataDocument `json:"tracks"`
	Videos    MultiRelationshipDataDocument `json:"videos"`
}

// SearchResultsResourceObject defines model for SearchResults_Resource_Object.
type SearchResultsResourceObject struct {
	Attributes *SearchResultsAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id            string                      `json:"id"`
	Relationships *SearchResultsRelationships `json:"relationships,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// SearchResultsSingleResourceDataDocument defines model for SearchResults_Single_Resource_Data_Document.
type SearchResultsSingleResourceDataDocument struct {
	Data     SearchResultsResourceObject `json:"data"`
	Included *Included                   `json:"included,omitempty"`
	Links    Links                       `json:"links"`
}

// SearchSuggestionsAttributes defines model for SearchSuggestions_Attributes.
type SearchSuggestionsAttributes struct {
	// History Suggestions from search history
	History *[]SearchSuggestionsHistory `json:"history,omitempty"`

	// Suggestions Suggested search queries
	Suggestions *[]SearchSuggestionsSuggestions `json:"suggestions,omitempty"`

	// TrackingId Unique tracking id
	TrackingId string `json:"trackingId"`
}

// SearchSuggestionsHighlights defines model for SearchSuggestions_Highlights.
type SearchSuggestionsHighlights struct {
	Length int32 `json:"length"`
	Start  int32 `json:"start"`
}

// SearchSuggestionsHistory Suggestions from search history
type SearchSuggestionsHistory struct {
	Highlights *[]SearchSuggestionsHighlights `json:"highlights,omitempty"`
	Query      string                         `json:"query"`
}

// SearchSuggestionsMultiRelationshipDataDocument defines model for SearchSuggestions_Multi_Relationship_Data_Document.
type SearchSuggestionsMultiRelationshipDataDocument struct {
	Data     *[]ResourceIdentifier `json:"data,omitempty"`
	Included *Included             `json:"included,omitempty"`
	Links    Links                 `json:"links"`
}

// SearchSuggestionsRelationships defines model for SearchSuggestions_Relationships.
type SearchSuggestionsRelationships struct {
	DirectHits MultiRelationshipDataDocument `json:"directHits"`
}

// SearchSuggestionsResourceObject defines model for SearchSuggestions_Resource_Object.
type SearchSuggestionsResourceObject struct {
	Attributes *SearchSuggestionsAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id            string                          `json:"id"`
	Relationships *SearchSuggestionsRelationships `json:"relationships,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// SearchSuggestionsSingleResourceDataDocument defines model for SearchSuggestions_Single_Resource_Data_Document.
type SearchSuggestionsSingleResourceDataDocument struct {
	Data     SearchSuggestionsResourceObject `json:"data"`
	Included *Included                       `json:"included,omitempty"`
	Links    Links                           `json:"links"`
}

// SearchSuggestionsSuggestions Suggested search queries
type SearchSuggestionsSuggestions struct {
	Highlights *[]SearchSuggestionsHighlights `json:"highlights,omitempty"`
	Query      string                         `json:"query"`
}

// SingleRelationshipDataDocument defines model for Single_Relationship_Data_Document.
type SingleRelationshipDataDocument struct {
	Data  *ResourceIdentifier `json:"data,omitempty"`
	Links Links               `json:"links"`
}

// TrackCreateOperationPayload defines model for TrackCreateOperation_Payload.
type TrackCreateOperationPayload struct {
	Data TrackCreateOperationPayloadData `json:"data"`
}

// TrackCreateOperationPayloadData defines model for TrackCreateOperation_Payload_Data.
type TrackCreateOperationPayloadData struct {
	Attributes    TrackCreateOperationPayloadDataAttributes    `json:"attributes"`
	Relationships TrackCreateOperationPayloadDataRelationships `json:"relationships"`
	Type          TrackCreateOperationPayloadDataType          `json:"type"`
}

// TrackCreateOperationPayloadDataType defines model for TrackCreateOperationPayloadData.Type.
type TrackCreateOperationPayloadDataType string

// TrackCreateOperationPayloadDataAttributes defines model for TrackCreateOperation_Payload_Data_Attributes.
type TrackCreateOperationPayloadDataAttributes struct {
	// AccessType Access type
	AccessType TrackCreateOperationPayloadDataAttributesAccessType `json:"accessType"`

	// Explicit Explicit content
	Explicit *bool  `json:"explicit,omitempty"`
	Title    string `json:"title"`
}

// TrackCreateOperationPayloadDataAttributesAccessType Access type
type TrackCreateOperationPayloadDataAttributesAccessType string

// TrackCreateOperationPayloadDataRelationships defines model for TrackCreateOperation_Payload_Data_Relationships.
type TrackCreateOperationPayloadDataRelationships struct {
	Albums  TrackCreateOperationPayloadDataRelationshipsAlbums  `json:"albums"`
	Artists TrackCreateOperationPayloadDataRelationshipsArtists `json:"artists"`
	Genres  *TrackCreateOperationPayloadDataRelationshipsGenres `json:"genres,omitempty"`
}

// TrackCreateOperationPayloadDataRelationshipsAlbums defines model for TrackCreateOperation_Payload_Data_Relationships_Albums.
type TrackCreateOperationPayloadDataRelationshipsAlbums struct {
	Data []TrackCreateOperationPayloadDataRelationshipsAlbumsData `json:"data"`
}

// TrackCreateOperationPayloadDataRelationshipsAlbumsData defines model for TrackCreateOperation_Payload_Data_Relationships_Albums_Data.
type TrackCreateOperationPayloadDataRelationshipsAlbumsData struct {
	Id   string                                                     `json:"id"`
	Type TrackCreateOperationPayloadDataRelationshipsAlbumsDataType `json:"type"`
}

// TrackCreateOperationPayloadDataRelationshipsAlbumsDataType defines model for TrackCreateOperationPayloadDataRelationshipsAlbumsData.Type.
type TrackCreateOperationPayloadDataRelationshipsAlbumsDataType string

// TrackCreateOperationPayloadDataRelationshipsArtists defines model for TrackCreateOperation_Payload_Data_Relationships_Artists.
type TrackCreateOperationPayloadDataRelationshipsArtists struct {
	Data []TrackCreateOperationPayloadDataRelationshipsArtistsData `json:"data"`
}

// TrackCreateOperationPayloadDataRelationshipsArtistsData defines model for TrackCreateOperation_Payload_Data_Relationships_Artists_Data.
type TrackCreateOperationPayloadDataRelationshipsArtistsData struct {
	Id   string                                                      `json:"id"`
	Type TrackCreateOperationPayloadDataRelationshipsArtistsDataType `json:"type"`
}

// TrackCreateOperationPayloadDataRelationshipsArtistsDataType defines model for TrackCreateOperationPayloadDataRelationshipsArtistsData.Type.
type TrackCreateOperationPayloadDataRelationshipsArtistsDataType string

// TrackCreateOperationPayloadDataRelationshipsGenres defines model for TrackCreateOperation_Payload_Data_Relationships_Genres.
type TrackCreateOperationPayloadDataRelationshipsGenres struct {
	Data []TrackCreateOperationPayloadDataRelationshipsGenresData `json:"data"`
}

// TrackCreateOperationPayloadDataRelationshipsGenresData defines model for TrackCreateOperation_Payload_Data_Relationships_Genres_Data.
type TrackCreateOperationPayloadDataRelationshipsGenresData struct {
	Id   string                                                     `json:"id"`
	Type TrackCreateOperationPayloadDataRelationshipsGenresDataType `json:"type"`
}

// TrackCreateOperationPayloadDataRelationshipsGenresDataType defines model for TrackCreateOperationPayloadDataRelationshipsGenresData.Type.
type TrackCreateOperationPayloadDataRelationshipsGenresDataType string

// TrackFilesAttributes defines model for TrackFiles_Attributes.
type TrackFilesAttributes struct {
	// AlbumAudioNormalizationData Track normalization data
	AlbumAudioNormalizationData *AudioNormalizationData `json:"albumAudioNormalizationData,omitempty"`

	// Format File's audio format
	Format *TrackFilesAttributesFormat `json:"format,omitempty"`

	// TrackAudioNormalizationData Track normalization data
	TrackAudioNormalizationData *AudioNormalizationData `json:"trackAudioNormalizationData,omitempty"`

	// TrackPresentation Track presentation
	TrackPresentation *TrackFilesAttributesTrackPresentation `json:"trackPresentation,omitempty"`

	// Url File URL
	Url *string `json:"url,omitempty"`
}

// TrackFilesAttributesFormat File's audio format
type TrackFilesAttributesFormat string

// TrackFilesAttributesTrackPresentation Track presentation
type TrackFilesAttributesTrackPresentation string

// TrackFilesResourceObject defines model for TrackFiles_Resource_Object.
type TrackFilesResourceObject struct {
	Attributes *TrackFilesAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id string `json:"id"`

	// Type Resource type
	Type string `json:"type"`
}

// TrackFilesSingleResourceDataDocument defines model for TrackFiles_Single_Resource_Data_Document.
type TrackFilesSingleResourceDataDocument struct {
	Data     TrackFilesResourceObject `json:"data"`
	Included *Included                `json:"included,omitempty"`
	Links    Links                    `json:"links"`
}

// TrackManifestsAttributes defines model for TrackManifests_Attributes.
type TrackManifestsAttributes struct {
	// AlbumAudioNormalizationData Track normalization data
	AlbumAudioNormalizationData *AudioNormalizationData `json:"albumAudioNormalizationData,omitempty"`

	// DrmData DRM data. Absence implies no DRM.
	DrmData *DrmData `json:"drmData,omitempty"`

	// Formats Formats present in manifest
	Formats *[]TrackManifestsAttributesFormats `json:"formats,omitempty"`

	// Hash Unique manifest hash
	Hash *string `json:"hash,omitempty"`

	// TrackAudioNormalizationData Track normalization data
	TrackAudioNormalizationData *AudioNormalizationData `json:"trackAudioNormalizationData,omitempty"`

	// TrackPresentation Track presentation
	TrackPresentation *TrackManifestsAttributesTrackPresentation `json:"trackPresentation,omitempty"`

	// Uri Manifest URI
	Uri *string `json:"uri,omitempty"`
}

// TrackManifestsAttributesFormats Formats present in manifest
type TrackManifestsAttributesFormats string

// TrackManifestsAttributesTrackPresentation Track presentation
type TrackManifestsAttributesTrackPresentation string

// TrackManifestsResourceObject defines model for TrackManifests_Resource_Object.
type TrackManifestsResourceObject struct {
	Attributes *TrackManifestsAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id string `json:"id"`

	// Type Resource type
	Type string `json:"type"`
}

// TrackManifestsSingleResourceDataDocument defines model for TrackManifests_Single_Resource_Data_Document.
type TrackManifestsSingleResourceDataDocument struct {
	Data     TrackManifestsResourceObject `json:"data"`
	Included *Included                    `json:"included,omitempty"`
	Links    Links                        `json:"links"`
}

// TrackSourceFileCreateOperationPayload defines model for TrackSourceFileCreateOperation_Payload.
type TrackSourceFileCreateOperationPayload struct {
	Data TrackSourceFileCreateOperationPayloadData `json:"data"`
}

// TrackSourceFileCreateOperationPayloadData defines model for TrackSourceFileCreateOperation_Payload_Data.
type TrackSourceFileCreateOperationPayloadData struct {
	Attributes    TrackSourceFileCreateOperationPayloadDataAttributes    `json:"attributes"`
	Relationships TrackSourceFileCreateOperationPayloadDataRelationships `json:"relationships"`
	Type          TrackSourceFileCreateOperationPayloadDataType          `json:"type"`
}

// TrackSourceFileCreateOperationPayloadDataType defines model for TrackSourceFileCreateOperationPayloadData.Type.
type TrackSourceFileCreateOperationPayloadDataType string

// TrackSourceFileCreateOperationPayloadDataAttributes defines model for TrackSourceFileCreateOperation_Payload_Data_Attributes.
type TrackSourceFileCreateOperationPayloadDataAttributes struct {
	Md5Hash string `json:"md5Hash"`
	Size    int64  `json:"size"`
}

// TrackSourceFileCreateOperationPayloadDataRelationships defines model for TrackSourceFileCreateOperation_Payload_Data_Relationships.
type TrackSourceFileCreateOperationPayloadDataRelationships struct {
	Track AttachSourceFileToTrack `json:"track"`
}

// TrackSourceFilesAttributes defines model for TrackSourceFiles_Attributes.
type TrackSourceFilesAttributes struct {
	// Md5Hash MD5 hash of file to be uploaded
	Md5Hash string `json:"md5Hash"`

	// Size File size of the track in bytes
	Size int64 `json:"size"`

	// Status File status
	Status FileStatus `json:"status"`

	// UploadLink Upload link
	UploadLink FileUploadLink `json:"uploadLink"`
}

// TrackSourceFilesMultiRelationshipDataDocument defines model for TrackSourceFiles_Multi_Relationship_Data_Document.
type TrackSourceFilesMultiRelationshipDataDocument struct {
	Data     *[]ResourceIdentifier `json:"data,omitempty"`
	Included *Included             `json:"included,omitempty"`
	Links    Links                 `json:"links"`
}

// TrackSourceFilesMultiResourceDataDocument defines model for TrackSourceFiles_Multi_Resource_Data_Document.
type TrackSourceFilesMultiResourceDataDocument struct {
	Data     []TrackSourceFilesResourceObject `json:"data"`
	Included *Included                        `json:"included,omitempty"`
	Links    Links                            `json:"links"`
}

// TrackSourceFilesRelationships defines model for TrackSourceFiles_Relationships.
type TrackSourceFilesRelationships struct {
	Owners MultiRelationshipDataDocument `json:"owners"`
}

// TrackSourceFilesResourceObject defines model for TrackSourceFiles_Resource_Object.
type TrackSourceFilesResourceObject struct {
	Attributes *TrackSourceFilesAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id            string                         `json:"id"`
	Relationships *TrackSourceFilesRelationships `json:"relationships,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// TrackSourceFilesSingleResourceDataDocument defines model for TrackSourceFiles_Single_Resource_Data_Document.
type TrackSourceFilesSingleResourceDataDocument struct {
	Data     TrackSourceFilesResourceObject `json:"data"`
	Included *Included                      `json:"included,omitempty"`
	Links    Links                          `json:"links"`
}

// TrackStatisticsAttributes defines model for TrackStatistics_Attributes.
type TrackStatisticsAttributes struct {
	// TotalPlaybacks Total playbacks
	TotalPlaybacks int32 `json:"totalPlaybacks"`

	// UniqueListeners Unique listeners
	UniqueListeners int32 `json:"uniqueListeners"`
}

// TrackStatisticsMultiRelationshipDataDocument defines model for TrackStatistics_Multi_Relationship_Data_Document.
type TrackStatisticsMultiRelationshipDataDocument struct {
	Data     *[]ResourceIdentifier `json:"data,omitempty"`
	Included *Included             `json:"included,omitempty"`
	Links    Links                 `json:"links"`
}

// TrackStatisticsMultiResourceDataDocument defines model for TrackStatistics_Multi_Resource_Data_Document.
type TrackStatisticsMultiResourceDataDocument struct {
	Data     []TrackStatisticsResourceObject `json:"data"`
	Included *Included                       `json:"included,omitempty"`
	Links    Links                           `json:"links"`
}

// TrackStatisticsRelationships defines model for TrackStatistics_Relationships.
type TrackStatisticsRelationships struct {
	Owners MultiRelationshipDataDocument `json:"owners"`
}

// TrackStatisticsResourceObject defines model for TrackStatistics_Resource_Object.
type TrackStatisticsResourceObject struct {
	Attributes *TrackStatisticsAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id            string                        `json:"id"`
	Relationships *TrackStatisticsRelationships `json:"relationships,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// TrackStatisticsSingleResourceDataDocument defines model for TrackStatistics_Single_Resource_Data_Document.
type TrackStatisticsSingleResourceDataDocument struct {
	Data     TrackStatisticsResourceObject `json:"data"`
	Included *Included                     `json:"included,omitempty"`
	Links    Links                         `json:"links"`
}

// TrackUpdateOperationPayload defines model for TrackUpdateOperation_Payload.
type TrackUpdateOperationPayload struct {
	Data TrackUpdateOperationPayloadData `json:"data"`
}

// TrackUpdateOperationPayloadData defines model for TrackUpdateOperation_Payload_Data.
type TrackUpdateOperationPayloadData struct {
	Attributes    *TrackUpdateOperationPayloadDataAttributes    `json:"attributes,omitempty"`
	Id            string                                        `json:"id"`
	Relationships *TrackUpdateOperationPayloadDataRelationships `json:"relationships,omitempty"`
	Type          TrackUpdateOperationPayloadDataType           `json:"type"`
}

// TrackUpdateOperationPayloadDataType defines model for TrackUpdateOperationPayloadData.Type.
type TrackUpdateOperationPayloadDataType string

// TrackUpdateOperationPayloadDataAttributes defines model for TrackUpdateOperation_Payload_Data_Attributes.
type TrackUpdateOperationPayloadDataAttributes struct {
	// AccessType Access type
	AccessType *TrackUpdateOperationPayloadDataAttributesAccessType `json:"accessType,omitempty"`
	Bpm        *float32                                             `json:"bpm,omitempty"`

	// Explicit Explicit content
	Explicit *bool                                              `json:"explicit,omitempty"`
	Key      *TrackUpdateOperationPayloadDataAttributesKey      `json:"key,omitempty"`
	KeyScale *TrackUpdateOperationPayloadDataAttributesKeyScale `json:"keyScale,omitempty"`
	Title    *string                                            `json:"title,omitempty"`
	ToneTags *[]string                                          `json:"toneTags,omitempty"`
}

// TrackUpdateOperationPayloadDataAttributesAccessType Access type
type TrackUpdateOperationPayloadDataAttributesAccessType string

// TrackUpdateOperationPayloadDataAttributesKey defines model for TrackUpdateOperationPayloadDataAttributes.Key.
type TrackUpdateOperationPayloadDataAttributesKey string

// TrackUpdateOperationPayloadDataAttributesKeyScale defines model for TrackUpdateOperationPayloadDataAttributes.KeyScale.
type TrackUpdateOperationPayloadDataAttributesKeyScale string

// TrackUpdateOperationPayloadDataRelationships defines model for TrackUpdateOperation_Payload_Data_Relationships.
type TrackUpdateOperationPayloadDataRelationships struct {
	Genres *TrackUpdateOperationPayloadDataRelationshipsGenres `json:"genres,omitempty"`
}

// TrackUpdateOperationPayloadDataRelationshipsGenres defines model for TrackUpdateOperation_Payload_Data_Relationships_Genres.
type TrackUpdateOperationPayloadDataRelationshipsGenres struct {
	Data []TrackUpdateOperationPayloadDataRelationshipsGenresData `json:"data"`
}

// TrackUpdateOperationPayloadDataRelationshipsGenresData defines model for TrackUpdateOperation_Payload_Data_Relationships_Genres_Data.
type TrackUpdateOperationPayloadDataRelationshipsGenresData struct {
	Id   string                                                     `json:"id"`
	Type TrackUpdateOperationPayloadDataRelationshipsGenresDataType `json:"type"`
}

// TrackUpdateOperationPayloadDataRelationshipsGenresDataType defines model for TrackUpdateOperationPayloadDataRelationshipsGenresData.Type.
type TrackUpdateOperationPayloadDataRelationshipsGenresDataType string

// TracksAttributes defines model for Tracks_Attributes.
type TracksAttributes struct {
	// AccessType Access type
	AccessType *TracksAttributesAccessType `json:"accessType,omitempty"`

	// Availability Available usage for this track
	Availability *[]TracksAttributesAvailability `json:"availability,omitempty"`

	// Bpm Beats per minute
	Bpm *float32 `json:"bpm,omitempty"`

	// Copyright Copyright information
	Copyright *Copyright `json:"copyright,omitempty"`

	// CreatedAt Datetime of track creation (ISO 8601)
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Duration Duration (ISO 8601)
	Duration string `json:"duration"`

	// Explicit Explicit content
	Explicit bool `json:"explicit"`

	// ExternalLinks Track links external to TIDAL API
	ExternalLinks *[]ExternalLink `json:"externalLinks,omitempty"`

	// Isrc International Standard Recording Code (ISRC)
	Isrc string `json:"isrc"`

	// Key Key
	Key TracksAttributesKey `json:"key"`

	// KeyScale The scale of the key
	KeyScale  TracksAttributesKeyScale `json:"keyScale"`
	MediaTags []string                 `json:"mediaTags"`

	// Popularity Popularity (0.0 - 1.0)
	Popularity float64 `json:"popularity"`

	// Spotlighted Is the track spotlighted?
	Spotlighted *bool `json:"spotlighted,omitempty"`

	// Title Track title
	Title    string    `json:"title"`
	ToneTags *[]string `json:"toneTags,omitempty"`

	// Version Track version, complements title
	Version *string `json:"version,omitempty"`
}

// TracksAttributesAccessType Access type
type TracksAttributesAccessType string

// TracksAttributesAvailability defines model for TracksAttributes.Availability.
type TracksAttributesAvailability string

// TracksAttributesKey Key
type TracksAttributesKey string

// TracksAttributesKeyScale The scale of the key
type TracksAttributesKeyScale string

// TracksMultiRelationshipDataDocument defines model for Tracks_Multi_Relationship_Data_Document.
type TracksMultiRelationshipDataDocument struct {
	Data     *[]ResourceIdentifier `json:"data,omitempty"`
	Included *Included             `json:"included,omitempty"`
	Links    Links                 `json:"links"`
}

// TracksMultiResourceDataDocument defines model for Tracks_Multi_Resource_Data_Document.
type TracksMultiResourceDataDocument struct {
	Data     []TracksResourceObject `json:"data"`
	Included *Included              `json:"included,omitempty"`
	Links    Links                  `json:"links"`
}

// TracksRelationships defines model for Tracks_Relationships.
type TracksRelationships struct {
	Albums          MultiRelationshipDataDocument  `json:"albums"`
	Artists         MultiRelationshipDataDocument  `json:"artists"`
	Genres          MultiRelationshipDataDocument  `json:"genres"`
	Lyrics          MultiRelationshipDataDocument  `json:"lyrics"`
	Owners          MultiRelationshipDataDocument  `json:"owners"`
	Providers       MultiRelationshipDataDocument  `json:"providers"`
	Radio           MultiRelationshipDataDocument  `json:"radio"`
	SimilarTracks   MultiRelationshipDataDocument  `json:"similarTracks"`
	SourceFile      SingleRelationshipDataDocument `json:"sourceFile"`
	TrackStatistics SingleRelationshipDataDocument `json:"trackStatistics"`
}

// TracksResourceObject defines model for Tracks_Resource_Object.
type TracksResourceObject struct {
	Attributes *TracksAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id            string               `json:"id"`
	Relationships *TracksRelationships `json:"relationships,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// TracksSingleRelationshipDataDocument defines model for Tracks_Single_Relationship_Data_Document.
type TracksSingleRelationshipDataDocument struct {
	Data     *ResourceIdentifier `json:"data,omitempty"`
	Included *Included           `json:"included,omitempty"`
	Links    Links               `json:"links"`
}

// TracksSingleResourceDataDocument defines model for Tracks_Single_Resource_Data_Document.
type TracksSingleResourceDataDocument struct {
	Data     TracksResourceObject `json:"data"`
	Included *Included            `json:"included,omitempty"`
	Links    Links                `json:"links"`
}

// UserCollectionAlbumsRelationshipAddOperationPayload defines model for UserCollectionAlbumsRelationshipAddOperation_Payload.
type UserCollectionAlbumsRelationshipAddOperationPayload struct {
	Data []UserCollectionAlbumsRelationshipAddOperationPayloadData `json:"data"`
}

// UserCollectionAlbumsRelationshipAddOperationPayloadData defines model for UserCollectionAlbumsRelationshipAddOperation_Payload_Data.
type UserCollectionAlbumsRelationshipAddOperationPayloadData struct {
	Id   string                                                      `json:"id"`
	Type UserCollectionAlbumsRelationshipAddOperationPayloadDataType `json:"type"`
}

// UserCollectionAlbumsRelationshipAddOperationPayloadDataType defines model for UserCollectionAlbumsRelationshipAddOperationPayloadData.Type.
type UserCollectionAlbumsRelationshipAddOperationPayloadDataType string

// UserCollectionAlbumsRelationshipRemoveOperationPayload defines model for UserCollectionAlbumsRelationshipRemoveOperation_Payload.
type UserCollectionAlbumsRelationshipRemoveOperationPayload struct {
	Data []UserCollectionAlbumsRelationshipRemoveOperationPayloadData `json:"data"`
}

// UserCollectionAlbumsRelationshipRemoveOperationPayloadData defines model for UserCollectionAlbumsRelationshipRemoveOperation_Payload_Data.
type UserCollectionAlbumsRelationshipRemoveOperationPayloadData struct {
	Id   string                                                         `json:"id"`
	Type UserCollectionAlbumsRelationshipRemoveOperationPayloadDataType `json:"type"`
}

// UserCollectionAlbumsRelationshipRemoveOperationPayloadDataType defines model for UserCollectionAlbumsRelationshipRemoveOperationPayloadData.Type.
type UserCollectionAlbumsRelationshipRemoveOperationPayloadDataType string

// UserCollectionArtistsRelationshipAddOperationPayload defines model for UserCollectionArtistsRelationshipAddOperation_Payload.
type UserCollectionArtistsRelationshipAddOperationPayload struct {
	Data []UserCollectionArtistsRelationshipAddOperationPayloadData `json:"data"`
}

// UserCollectionArtistsRelationshipAddOperationPayloadData defines model for UserCollectionArtistsRelationshipAddOperation_Payload_Data.
type UserCollectionArtistsRelationshipAddOperationPayloadData struct {
	Id   string                                                       `json:"id"`
	Type UserCollectionArtistsRelationshipAddOperationPayloadDataType `json:"type"`
}

// UserCollectionArtistsRelationshipAddOperationPayloadDataType defines model for UserCollectionArtistsRelationshipAddOperationPayloadData.Type.
type UserCollectionArtistsRelationshipAddOperationPayloadDataType string

// UserCollectionArtistsRelationshipRemoveOperationPayload defines model for UserCollectionArtistsRelationshipRemoveOperation_Payload.
type UserCollectionArtistsRelationshipRemoveOperationPayload struct {
	Data []UserCollectionArtistsRelationshipRemoveOperationPayloadData `json:"data"`
}

// UserCollectionArtistsRelationshipRemoveOperationPayloadData defines model for UserCollectionArtistsRelationshipRemoveOperation_Payload_Data.
type UserCollectionArtistsRelationshipRemoveOperationPayloadData struct {
	Id   string                                                          `json:"id"`
	Type UserCollectionArtistsRelationshipRemoveOperationPayloadDataType `json:"type"`
}

// UserCollectionArtistsRelationshipRemoveOperationPayloadDataType defines model for UserCollectionArtistsRelationshipRemoveOperationPayloadData.Type.
type UserCollectionArtistsRelationshipRemoveOperationPayloadDataType string

// UserCollectionPlaylistsRelationshipRemoveOperationPayload defines model for UserCollectionPlaylistsRelationshipRemoveOperation_Payload.
type UserCollectionPlaylistsRelationshipRemoveOperationPayload struct {
	Data []UserCollectionPlaylistsRelationshipRemoveOperationPayloadData `json:"data"`
}

// UserCollectionPlaylistsRelationshipRemoveOperationPayloadData defines model for UserCollectionPlaylistsRelationshipRemoveOperation_Payload_Data.
type UserCollectionPlaylistsRelationshipRemoveOperationPayloadData struct {
	Id   string                                                            `json:"id"`
	Type UserCollectionPlaylistsRelationshipRemoveOperationPayloadDataType `json:"type"`
}

// UserCollectionPlaylistsRelationshipRemoveOperationPayloadDataType defines model for UserCollectionPlaylistsRelationshipRemoveOperationPayloadData.Type.
type UserCollectionPlaylistsRelationshipRemoveOperationPayloadDataType string

// UserCollectionTracksRelationshipAddOperationPayload defines model for UserCollectionTracksRelationshipAddOperation_Payload.
type UserCollectionTracksRelationshipAddOperationPayload struct {
	Data []UserCollectionTracksRelationshipAddOperationPayloadData `json:"data"`
}

// UserCollectionTracksRelationshipAddOperationPayloadData defines model for UserCollectionTracksRelationshipAddOperation_Payload_Data.
type UserCollectionTracksRelationshipAddOperationPayloadData struct {
	Id   string                                                      `json:"id"`
	Type UserCollectionTracksRelationshipAddOperationPayloadDataType `json:"type"`
}

// UserCollectionTracksRelationshipAddOperationPayloadDataType defines model for UserCollectionTracksRelationshipAddOperationPayloadData.Type.
type UserCollectionTracksRelationshipAddOperationPayloadDataType string

// UserCollectionTracksRelationshipRemoveOperationPayload defines model for UserCollectionTracksRelationshipRemoveOperation_Payload.
type UserCollectionTracksRelationshipRemoveOperationPayload struct {
	Data []UserCollectionTracksRelationshipRemoveOperationPayloadData `json:"data"`
}

// UserCollectionTracksRelationshipRemoveOperationPayloadData defines model for UserCollectionTracksRelationshipRemoveOperation_Payload_Data.
type UserCollectionTracksRelationshipRemoveOperationPayloadData struct {
	Id   string                                                         `json:"id"`
	Type UserCollectionTracksRelationshipRemoveOperationPayloadDataType `json:"type"`
}

// UserCollectionTracksRelationshipRemoveOperationPayloadDataType defines model for UserCollectionTracksRelationshipRemoveOperationPayloadData.Type.
type UserCollectionTracksRelationshipRemoveOperationPayloadDataType string

// UserCollectionVideosRelationshipAddOperationPayload defines model for UserCollectionVideosRelationshipAddOperation_Payload.
type UserCollectionVideosRelationshipAddOperationPayload struct {
	Data []UserCollectionVideosRelationshipAddOperationPayloadData `json:"data"`
}

// UserCollectionVideosRelationshipAddOperationPayloadData defines model for UserCollectionVideosRelationshipAddOperation_Payload_Data.
type UserCollectionVideosRelationshipAddOperationPayloadData struct {
	Id   string                                                      `json:"id"`
	Type UserCollectionVideosRelationshipAddOperationPayloadDataType `json:"type"`
}

// UserCollectionVideosRelationshipAddOperationPayloadDataType defines model for UserCollectionVideosRelationshipAddOperationPayloadData.Type.
type UserCollectionVideosRelationshipAddOperationPayloadDataType string

// UserCollectionVideosRelationshipRemoveOperationPayload defines model for UserCollectionVideosRelationshipRemoveOperation_Payload.
type UserCollectionVideosRelationshipRemoveOperationPayload struct {
	Data []UserCollectionVideosRelationshipRemoveOperationPayloadData `json:"data"`
}

// UserCollectionVideosRelationshipRemoveOperationPayloadData defines model for UserCollectionVideosRelationshipRemoveOperation_Payload_Data.
type UserCollectionVideosRelationshipRemoveOperationPayloadData struct {
	Id   string                                                         `json:"id"`
	Type UserCollectionVideosRelationshipRemoveOperationPayloadDataType `json:"type"`
}

// UserCollectionVideosRelationshipRemoveOperationPayloadDataType defines model for UserCollectionVideosRelationshipRemoveOperationPayloadData.Type.
type UserCollectionVideosRelationshipRemoveOperationPayloadDataType string

// UserCollectionsAlbumsMultiRelationshipDataDocument defines model for UserCollections_Albums_Multi_Relationship_Data_Document.
type UserCollectionsAlbumsMultiRelationshipDataDocument struct {
	Data  *[]UserCollectionsAlbumsResourceIdentifier `json:"data,omitempty"`
	Links Links                                      `json:"links"`
}

// UserCollectionsAlbumsResourceIdentifier defines model for UserCollections_Albums_Resource_Identifier.
type UserCollectionsAlbumsResourceIdentifier struct {
	// Id Resource id
	Id   string                                       `json:"id"`
	Meta *UserCollectionsAlbumsResourceIdentifierMeta `json:"meta,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// UserCollectionsAlbumsResourceIdentifierMeta defines model for UserCollections_Albums_Resource_Identifier_Meta.
type UserCollectionsAlbumsResourceIdentifierMeta struct {
	AddedAt time.Time `json:"addedAt"`
}

// UserCollectionsArtistsMultiRelationshipDataDocument defines model for UserCollections_Artists_Multi_Relationship_Data_Document.
type UserCollectionsArtistsMultiRelationshipDataDocument struct {
	Data  *[]UserCollectionsArtistsResourceIdentifier `json:"data,omitempty"`
	Links Links                                       `json:"links"`
}

// UserCollectionsArtistsResourceIdentifier defines model for UserCollections_Artists_Resource_Identifier.
type UserCollectionsArtistsResourceIdentifier struct {
	// Id Resource id
	Id   string                                        `json:"id"`
	Meta *UserCollectionsArtistsResourceIdentifierMeta `json:"meta,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// UserCollectionsArtistsResourceIdentifierMeta defines model for UserCollections_Artists_Resource_Identifier_Meta.
type UserCollectionsArtistsResourceIdentifierMeta struct {
	AddedAt time.Time `json:"addedAt"`
}

// UserCollectionsAttributes defines model for UserCollections_Attributes.
type UserCollectionsAttributes = map[string]interface{}

// UserCollectionsMultiRelationshipDataDocument defines model for UserCollections_Multi_Relationship_Data_Document.
type UserCollectionsMultiRelationshipDataDocument struct {
	Data     *[]ResourceIdentifier `json:"data,omitempty"`
	Included *Included             `json:"included,omitempty"`
	Links    Links                 `json:"links"`
}

// UserCollectionsPlaylistsMultiRelationshipDataDocument defines model for UserCollections_Playlists_Multi_Relationship_Data_Document.
type UserCollectionsPlaylistsMultiRelationshipDataDocument struct {
	Data  *[]UserCollectionsPlaylistsResourceIdentifier `json:"data,omitempty"`
	Links Links                                         `json:"links"`
}

// UserCollectionsPlaylistsResourceIdentifier defines model for UserCollections_Playlists_Resource_Identifier.
type UserCollectionsPlaylistsResourceIdentifier struct {
	// Id Resource id
	Id   string                                          `json:"id"`
	Meta *UserCollectionsPlaylistsResourceIdentifierMeta `json:"meta,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// UserCollectionsPlaylistsResourceIdentifierMeta defines model for UserCollections_Playlists_Resource_Identifier_Meta.
type UserCollectionsPlaylistsResourceIdentifierMeta struct {
	AddedAt time.Time `json:"addedAt"`
}

// UserCollectionsRelationships defines model for UserCollections_Relationships.
type UserCollectionsRelationships struct {
	Albums    UserCollectionsAlbumsMultiRelationshipDataDocument    `json:"albums"`
	Artists   UserCollectionsArtistsMultiRelationshipDataDocument   `json:"artists"`
	Owners    MultiRelationshipDataDocument                         `json:"owners"`
	Playlists UserCollectionsPlaylistsMultiRelationshipDataDocument `json:"playlists"`
	Tracks    UserCollectionsTracksMultiRelationshipDataDocument    `json:"tracks"`
	Videos    UserCollectionsVideosMultiRelationshipDataDocument    `json:"videos"`
}

// UserCollectionsResourceObject defines model for UserCollections_Resource_Object.
type UserCollectionsResourceObject struct {
	Attributes *UserCollectionsAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id            string                        `json:"id"`
	Relationships *UserCollectionsRelationships `json:"relationships,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// UserCollectionsSingleResourceDataDocument defines model for UserCollections_Single_Resource_Data_Document.
type UserCollectionsSingleResourceDataDocument struct {
	Data     UserCollectionsResourceObject `json:"data"`
	Included *Included                     `json:"included,omitempty"`
	Links    Links                         `json:"links"`
}

// UserCollectionsTracksMultiRelationshipDataDocument defines model for UserCollections_Tracks_Multi_Relationship_Data_Document.
type UserCollectionsTracksMultiRelationshipDataDocument struct {
	Data  *[]UserCollectionsTracksResourceIdentifier `json:"data,omitempty"`
	Links Links                                      `json:"links"`
}

// UserCollectionsTracksResourceIdentifier defines model for UserCollections_Tracks_Resource_Identifier.
type UserCollectionsTracksResourceIdentifier struct {
	// Id Resource id
	Id   string                                       `json:"id"`
	Meta *UserCollectionsTracksResourceIdentifierMeta `json:"meta,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// UserCollectionsTracksResourceIdentifierMeta defines model for UserCollections_Tracks_Resource_Identifier_Meta.
type UserCollectionsTracksResourceIdentifierMeta struct {
	AddedAt time.Time `json:"addedAt"`
}

// UserCollectionsVideosMultiRelationshipDataDocument defines model for UserCollections_Videos_Multi_Relationship_Data_Document.
type UserCollectionsVideosMultiRelationshipDataDocument struct {
	Data  *[]UserCollectionsVideosResourceIdentifier `json:"data,omitempty"`
	Links Links                                      `json:"links"`
}

// UserCollectionsVideosResourceIdentifier defines model for UserCollections_Videos_Resource_Identifier.
type UserCollectionsVideosResourceIdentifier struct {
	// Id Resource id
	Id   string                                       `json:"id"`
	Meta *UserCollectionsVideosResourceIdentifierMeta `json:"meta,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// UserCollectionsVideosResourceIdentifierMeta defines model for UserCollections_Videos_Resource_Identifier_Meta.
type UserCollectionsVideosResourceIdentifierMeta struct {
	AddedAt time.Time `json:"addedAt"`
}

// UserEntitlementsAttributes defines model for UserEntitlements_Attributes.
type UserEntitlementsAttributes struct {
	// Entitlements entitlements for user
	Entitlements []UserEntitlementsAttributesEntitlements `json:"entitlements"`
}

// UserEntitlementsAttributesEntitlements entitlements for user
type UserEntitlementsAttributesEntitlements string

// UserEntitlementsResourceObject defines model for UserEntitlements_Resource_Object.
type UserEntitlementsResourceObject struct {
	Attributes *UserEntitlementsAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id string `json:"id"`

	// Type Resource type
	Type string `json:"type"`
}

// UserEntitlementsSingleResourceDataDocument defines model for UserEntitlements_Single_Resource_Data_Document.
type UserEntitlementsSingleResourceDataDocument struct {
	Data     UserEntitlementsResourceObject `json:"data"`
	Included *Included                      `json:"included,omitempty"`
	Links    Links                          `json:"links"`
}

// UserRecommendationsAttributes defines model for UserRecommendations_Attributes.
type UserRecommendationsAttributes = map[string]interface{}

// UserRecommendationsMultiRelationshipDataDocument defines model for UserRecommendations_Multi_Relationship_Data_Document.
type UserRecommendationsMultiRelationshipDataDocument struct {
	Data     *[]ResourceIdentifier `json:"data,omitempty"`
	Included *Included             `json:"included,omitempty"`
	Links    Links                 `json:"links"`
}

// UserRecommendationsRelationships defines model for UserRecommendations_Relationships.
type UserRecommendationsRelationships struct {
	DiscoveryMixes  MultiRelationshipDataDocument `json:"discoveryMixes"`
	MyMixes         MultiRelationshipDataDocument `json:"myMixes"`
	NewArrivalMixes MultiRelationshipDataDocument `json:"newArrivalMixes"`
}

// UserRecommendationsResourceObject defines model for UserRecommendations_Resource_Object.
type UserRecommendationsResourceObject struct {
	Attributes *UserRecommendationsAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id            string                            `json:"id"`
	Relationships *UserRecommendationsRelationships `json:"relationships,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// UserRecommendationsSingleResourceDataDocument defines model for UserRecommendations_Single_Resource_Data_Document.
type UserRecommendationsSingleResourceDataDocument struct {
	Data     UserRecommendationsResourceObject `json:"data"`
	Included *Included                         `json:"included,omitempty"`
	Links    Links                             `json:"links"`
}

// UserReportCreateOperationPayload defines model for UserReportCreateOperation_Payload.
type UserReportCreateOperationPayload struct {
	Data UserReportCreateOperationPayloadData `json:"data"`
}

// UserReportCreateOperationPayloadData defines model for UserReportCreateOperation_Payload_Data.
type UserReportCreateOperationPayloadData struct {
	Attributes    UserReportCreateOperationPayloadDataAttributes     `json:"attributes"`
	Relationships UserReportsCreateOperationPayloadDataRelationships `json:"relationships"`
	Type          UserReportCreateOperationPayloadDataType           `json:"type"`
}

// UserReportCreateOperationPayloadDataType defines model for UserReportCreateOperationPayloadData.Type.
type UserReportCreateOperationPayloadDataType string

// UserReportCreateOperationPayloadDataAttributes defines model for UserReportCreateOperation_Payload_Data_Attributes.
type UserReportCreateOperationPayloadDataAttributes struct {
	Description string                                               `json:"description"`
	Reason      UserReportCreateOperationPayloadDataAttributesReason `json:"reason"`
}

// UserReportCreateOperationPayloadDataAttributesReason defines model for UserReportCreateOperationPayloadDataAttributes.Reason.
type UserReportCreateOperationPayloadDataAttributesReason string

// UserReportsCreateOperationPayloadDataRelationships defines model for UserReportsCreateOperation_Payload_Data_Relationships.
type UserReportsCreateOperationPayloadDataRelationships struct {
	ReportedResources UserReportsCreateOperationPayloadDataRelationshipsReportedResources `json:"reportedResources"`
}

// UserReportsCreateOperationPayloadDataRelationshipsReportedResources defines model for UserReportsCreateOperation_Payload_Data_Relationships_ReportedResources.
type UserReportsCreateOperationPayloadDataRelationshipsReportedResources struct {
	Data []UserReportsCreateOperationPayloadDataRelationshipsReportedResourcesData `json:"data"`
}

// UserReportsCreateOperationPayloadDataRelationshipsReportedResourcesData defines model for UserReportsCreateOperation_Payload_Data_Relationships_ReportedResources_Data.
type UserReportsCreateOperationPayloadDataRelationshipsReportedResourcesData struct {
	Id   string                                                                      `json:"id"`
	Type UserReportsCreateOperationPayloadDataRelationshipsReportedResourcesDataType `json:"type"`
}

// UserReportsCreateOperationPayloadDataRelationshipsReportedResourcesDataType defines model for UserReportsCreateOperationPayloadDataRelationshipsReportedResourcesData.Type.
type UserReportsCreateOperationPayloadDataRelationshipsReportedResourcesDataType string

// UserReportsAttributes defines model for UserReports_Attributes.
type UserReportsAttributes struct {
	// Description Description
	Description string `json:"description"`

	// Reason Reason
	Reason UserReportsAttributesReason `json:"reason"`
}

// UserReportsAttributesReason Reason
type UserReportsAttributesReason string

// UserReportsResourceObject defines model for UserReports_Resource_Object.
type UserReportsResourceObject struct {
	Attributes *UserReportsAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id string `json:"id"`

	// Type Resource type
	Type string `json:"type"`
}

// UserReportsSingleResourceDataDocument defines model for UserReports_Single_Resource_Data_Document.
type UserReportsSingleResourceDataDocument struct {
	Data     UserReportsResourceObject `json:"data"`
	Included *Included                 `json:"included,omitempty"`
	Links    Links                     `json:"links"`
}

// UserSharesCreateOperationPayload defines model for UserSharesCreateOperation_Payload.
type UserSharesCreateOperationPayload struct {
	Data UserSharesCreateOperationPayloadData `json:"data"`
}

// UserSharesCreateOperationPayloadData defines model for UserSharesCreateOperation_Payload_Data.
type UserSharesCreateOperationPayloadData struct {
	Relationships UserSharesCreateOperationPayloadDataRelationships `json:"relationships"`
	Type          UserSharesCreateOperationPayloadDataType          `json:"type"`
}

// UserSharesCreateOperationPayloadDataType defines model for UserSharesCreateOperationPayloadData.Type.
type UserSharesCreateOperationPayloadDataType string

// UserSharesCreateOperationPayloadDataRelationships defines model for UserSharesCreateOperation_Payload_Data_Relationships.
type UserSharesCreateOperationPayloadDataRelationships struct {
	SharedResources UserSharesCreateOperationPayloadDataRelationshipsSharedResources `json:"sharedResources"`
}

// UserSharesCreateOperationPayloadDataRelationshipsSharedResources defines model for UserSharesCreateOperation_Payload_Data_Relationships_SharedResources.
type UserSharesCreateOperationPayloadDataRelationshipsSharedResources struct {
	Data []UserSharesCreateOperationPayloadDataRelationshipsSharedResourcesData `json:"data"`
}

// UserSharesCreateOperationPayloadDataRelationshipsSharedResourcesData defines model for UserSharesCreateOperation_Payload_Data_Relationships_SharedResources_Data.
type UserSharesCreateOperationPayloadDataRelationshipsSharedResourcesData struct {
	Id   string                                                                   `json:"id"`
	Type UserSharesCreateOperationPayloadDataRelationshipsSharedResourcesDataType `json:"type"`
}

// UserSharesCreateOperationPayloadDataRelationshipsSharedResourcesDataType defines model for UserSharesCreateOperationPayloadDataRelationshipsSharedResourcesData.Type.
type UserSharesCreateOperationPayloadDataRelationshipsSharedResourcesDataType string

// UserSharesAttributes defines model for UserShares_Attributes.
type UserSharesAttributes struct {
	// Code Share code
	Code string `json:"code"`

	// CreatedAt Datetime of userShare creation (ISO 8601)
	CreatedAt time.Time `json:"createdAt"`

	// ExternalLinks Links external to TIDAL API
	ExternalLinks *[]ExternalLink `json:"externalLinks,omitempty"`
}

// UserSharesMultiRelationshipDataDocument defines model for UserShares_Multi_Relationship_Data_Document.
type UserSharesMultiRelationshipDataDocument struct {
	Data     *[]ResourceIdentifier `json:"data,omitempty"`
	Included *Included             `json:"included,omitempty"`
	Links    Links                 `json:"links"`
}

// UserSharesMultiResourceDataDocument defines model for UserShares_Multi_Resource_Data_Document.
type UserSharesMultiResourceDataDocument struct {
	Data     []UserSharesResourceObject `json:"data"`
	Included *Included                  `json:"included,omitempty"`
	Links    Links                      `json:"links"`
}

// UserSharesRelationships defines model for UserShares_Relationships.
type UserSharesRelationships struct {
	Owners          MultiRelationshipDataDocument `json:"owners"`
	SharedResources MultiRelationshipDataDocument `json:"sharedResources"`
}

// UserSharesResourceObject defines model for UserShares_Resource_Object.
type UserSharesResourceObject struct {
	Attributes *UserSharesAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id            string                   `json:"id"`
	Relationships *UserSharesRelationships `json:"relationships,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// UserSharesSingleResourceDataDocument defines model for UserShares_Single_Resource_Data_Document.
type UserSharesSingleResourceDataDocument struct {
	Data     UserSharesResourceObject `json:"data"`
	Included *Included                `json:"included,omitempty"`
	Links    Links                    `json:"links"`
}

// UsersAttributes defines model for Users_Attributes.
type UsersAttributes struct {
	// Country ISO 3166-1 alpha-2 country code
	Country string `json:"country"`

	// Email email address
	Email *string `json:"email,omitempty"`

	// EmailVerified Is the email verified
	EmailVerified *bool `json:"emailVerified,omitempty"`

	// FirstName Users first name
	FirstName *string `json:"firstName,omitempty"`

	// LastName Users last name
	LastName *string `json:"lastName,omitempty"`

	// NostrPublicKey Users nostr public key
	NostrPublicKey *string `json:"nostrPublicKey,omitempty"`

	// Username user name
	Username string `json:"username"`
}

// UsersResourceObject defines model for Users_Resource_Object.
type UsersResourceObject struct {
	Attributes *UsersAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id string `json:"id"`

	// Type Resource type
	Type string `json:"type"`
}

// UsersSingleResourceDataDocument defines model for Users_Single_Resource_Data_Document.
type UsersSingleResourceDataDocument struct {
	Data     UsersResourceObject `json:"data"`
	Included *Included           `json:"included,omitempty"`
	Links    Links               `json:"links"`
}

// VideosAttributes defines model for Videos_Attributes.
type VideosAttributes struct {
	// Availability Available usage for this video
	Availability *[]VideosAttributesAvailability `json:"availability,omitempty"`

	// Copyright Copyright information
	Copyright *Copyright `json:"copyright,omitempty"`

	// Duration Duration (ISO 8601)
	Duration string `json:"duration"`

	// Explicit Explicit content
	Explicit bool `json:"explicit"`

	// ExternalLinks Video links external to TIDAL API
	ExternalLinks *[]ExternalLink `json:"externalLinks,omitempty"`

	// Isrc International Standard Recording Code (ISRC)
	Isrc string `json:"isrc"`

	// Popularity Popularity (0.0 - 1.0)
	Popularity float64 `json:"popularity"`

	// ReleaseDate Release date (ISO-8601)
	ReleaseDate *openapi_types.Date `json:"releaseDate,omitempty"`

	// Title Video title
	Title string `json:"title"`

	// Version Video version, complements title
	Version *string `json:"version,omitempty"`
}

// VideosAttributesAvailability defines model for VideosAttributes.Availability.
type VideosAttributesAvailability string

// VideosMultiRelationshipDataDocument defines model for Videos_Multi_Relationship_Data_Document.
type VideosMultiRelationshipDataDocument struct {
	Data     *[]ResourceIdentifier `json:"data,omitempty"`
	Included *Included             `json:"included,omitempty"`
	Links    Links                 `json:"links"`
}

// VideosMultiResourceDataDocument defines model for Videos_Multi_Resource_Data_Document.
type VideosMultiResourceDataDocument struct {
	Data     []VideosResourceObject `json:"data"`
	Included *Included              `json:"included,omitempty"`
	Links    Links                  `json:"links"`
}

// VideosRelationships defines model for Videos_Relationships.
type VideosRelationships struct {
	Albums       MultiRelationshipDataDocument `json:"albums"`
	Artists      MultiRelationshipDataDocument `json:"artists"`
	Providers    MultiRelationshipDataDocument `json:"providers"`
	ThumbnailArt MultiRelationshipDataDocument `json:"thumbnailArt"`
}

// VideosResourceObject defines model for Videos_Resource_Object.
type VideosResourceObject struct {
	Attributes *VideosAttributes `json:"attributes,omitempty"`

	// Id Resource id
	Id            string               `json:"id"`
	Relationships *VideosRelationships `json:"relationships,omitempty"`

	// Type Resource type
	Type string `json:"type"`
}

// VideosSingleResourceDataDocument defines model for Videos_Single_Resource_Data_Document.
type VideosSingleResourceDataDocument struct {
	Data     VideosResourceObject `json:"data"`
	Included *Included            `json:"included,omitempty"`
	Links    Links                `json:"links"`
}

// BadRequestResponse defines model for Bad_Request_Response.
type BadRequestResponse = ErrorsDocument

// InternalServerErrorResponse defines model for Internal_Server_Error_Response.
type InternalServerErrorResponse = ErrorsDocument

// MethodNotAllowedResponse defines model for Method_Not_Allowed_Response.
type MethodNotAllowedResponse = ErrorsDocument

// NotAcceptableResponse defines model for Not_Acceptable_Response.
type NotAcceptableResponse = ErrorsDocument

// NotFoundResponse defines model for Not_Found_Response.
type NotFoundResponse = ErrorsDocument

// UnsupportedMediaTypeResponse defines model for Unsupported_Media_Type_Response.
type UnsupportedMediaTypeResponse = ErrorsDocument

// GetAlbumsParams defines parameters for GetAlbums.
type GetAlbumsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: artists, coverArt, genres, items, owners, providers, similarAlbums
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// FilterOwnersId User id
	FilterOwnersId *[]string `form:"filter[owners.id],omitempty" json:"filter[owners.id],omitempty"`

	// FilterId Album id
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`

	// FilterBarcodeId Barcode Id
	FilterBarcodeId *[]string `form:"filter[barcodeId],omitempty" json:"filter[barcodeId],omitempty"`
}

// GetAlbumsIdParams defines parameters for GetAlbumsId.
type GetAlbumsIdParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: artists, coverArt, genres, items, owners, providers, similarAlbums
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetAlbumsIdRelationshipsArtistsParams defines parameters for GetAlbumsIdRelationshipsArtists.
type GetAlbumsIdRelationshipsArtistsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: artists
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetAlbumsIdRelationshipsCoverArtParams defines parameters for GetAlbumsIdRelationshipsCoverArt.
type GetAlbumsIdRelationshipsCoverArtParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: coverArt
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetAlbumsIdRelationshipsGenresParams defines parameters for GetAlbumsIdRelationshipsGenres.
type GetAlbumsIdRelationshipsGenresParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: genres
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetAlbumsIdRelationshipsItemsParams defines parameters for GetAlbumsIdRelationshipsItems.
type GetAlbumsIdRelationshipsItemsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: items
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetAlbumsIdRelationshipsOwnersParams defines parameters for GetAlbumsIdRelationshipsOwners.
type GetAlbumsIdRelationshipsOwnersParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetAlbumsIdRelationshipsProvidersParams defines parameters for GetAlbumsIdRelationshipsProviders.
type GetAlbumsIdRelationshipsProvidersParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: providers
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetAlbumsIdRelationshipsSimilarAlbumsParams defines parameters for GetAlbumsIdRelationshipsSimilarAlbums.
type GetAlbumsIdRelationshipsSimilarAlbumsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: similarAlbums
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetArtistBiographiesParams defines parameters for GetArtistBiographies.
type GetArtistBiographiesParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// FilterId Artist id
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetArtistBiographiesIdParams defines parameters for GetArtistBiographiesId.
type GetArtistBiographiesIdParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetArtistBiographiesIdRelationshipsOwnersParams defines parameters for GetArtistBiographiesIdRelationshipsOwners.
type GetArtistBiographiesIdRelationshipsOwnersParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// PostArtistClaimsParams defines parameters for PostArtistClaims.
type PostArtistClaimsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`
}

// GetArtistClaimsIdParams defines parameters for GetArtistClaimsId.
type GetArtistClaimsIdParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: acceptedArtists, owners, recommendedArtists
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetArtistClaimsIdRelationshipsAcceptedArtistsParams defines parameters for GetArtistClaimsIdRelationshipsAcceptedArtists.
type GetArtistClaimsIdRelationshipsAcceptedArtistsParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: acceptedArtists
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetArtistClaimsIdRelationshipsOwnersParams defines parameters for GetArtistClaimsIdRelationshipsOwners.
type GetArtistClaimsIdRelationshipsOwnersParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetArtistClaimsIdRelationshipsRecommendedArtistsParams defines parameters for GetArtistClaimsIdRelationshipsRecommendedArtists.
type GetArtistClaimsIdRelationshipsRecommendedArtistsParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: recommendedArtists
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetArtistRolesParams defines parameters for GetArtistRoles.
type GetArtistRolesParams struct {
	// FilterId Allows to filter the collection of resources based on id attribute value
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetArtistsParams defines parameters for GetArtists.
type GetArtistsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums, biography, followers, following, owners, profileArt, radio, roles, similarArtists, trackProviders, tracks, videos
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// FilterHandle Artist handle
	FilterHandle *[]string `form:"filter[handle],omitempty" json:"filter[handle],omitempty"`

	// FilterId Artist id
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetArtistsIdParams defines parameters for GetArtistsId.
type GetArtistsIdParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums, biography, followers, following, owners, profileArt, radio, roles, similarArtists, trackProviders, tracks, videos
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetArtistsIdRelationshipsAlbumsParams defines parameters for GetArtistsIdRelationshipsAlbums.
type GetArtistsIdRelationshipsAlbumsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetArtistsIdRelationshipsBiographyParams defines parameters for GetArtistsIdRelationshipsBiography.
type GetArtistsIdRelationshipsBiographyParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: biography
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetArtistsIdRelationshipsFollowersParams defines parameters for GetArtistsIdRelationshipsFollowers.
type GetArtistsIdRelationshipsFollowersParams struct {
	ViewerContext *string `form:"viewerContext,omitempty" json:"viewerContext,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: followers
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetArtistsIdRelationshipsFollowingParams defines parameters for GetArtistsIdRelationshipsFollowing.
type GetArtistsIdRelationshipsFollowingParams struct {
	ViewerContext *string `form:"viewerContext,omitempty" json:"viewerContext,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: following
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// PostArtistsIdRelationshipsFollowingParams defines parameters for PostArtistsIdRelationshipsFollowing.
type PostArtistsIdRelationshipsFollowingParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`
}

// GetArtistsIdRelationshipsOwnersParams defines parameters for GetArtistsIdRelationshipsOwners.
type GetArtistsIdRelationshipsOwnersParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetArtistsIdRelationshipsProfileArtParams defines parameters for GetArtistsIdRelationshipsProfileArt.
type GetArtistsIdRelationshipsProfileArtParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: profileArt
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetArtistsIdRelationshipsRadioParams defines parameters for GetArtistsIdRelationshipsRadio.
type GetArtistsIdRelationshipsRadioParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: radio
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetArtistsIdRelationshipsRolesParams defines parameters for GetArtistsIdRelationshipsRoles.
type GetArtistsIdRelationshipsRolesParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: roles
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetArtistsIdRelationshipsSimilarArtistsParams defines parameters for GetArtistsIdRelationshipsSimilarArtists.
type GetArtistsIdRelationshipsSimilarArtistsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: similarArtists
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetArtistsIdRelationshipsTrackProvidersParams defines parameters for GetArtistsIdRelationshipsTrackProviders.
type GetArtistsIdRelationshipsTrackProvidersParams struct {
	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: trackProviders
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetArtistsIdRelationshipsTracksParams defines parameters for GetArtistsIdRelationshipsTracks.
type GetArtistsIdRelationshipsTracksParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// CollapseBy Collapse by options for getting artist tracks. Available options: FINGERPRINT, ID. FINGERPRINT option might collapse similar tracks based entry fingerprints while collapsing by ID always returns all available items.
	CollapseBy string `form:"collapseBy" json:"collapseBy"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: tracks
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetArtistsIdRelationshipsVideosParams defines parameters for GetArtistsIdRelationshipsVideos.
type GetArtistsIdRelationshipsVideosParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: videos
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetArtworksParams defines parameters for GetArtworks.
type GetArtworksParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// FilterId Artwork id
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetArtworksIdParams defines parameters for GetArtworksId.
type GetArtworksIdParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetArtworksIdRelationshipsOwnersParams defines parameters for GetArtworksIdRelationshipsOwners.
type GetArtworksIdRelationshipsOwnersParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetGenresParams defines parameters for GetGenres.
type GetGenresParams struct {
	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// FilterId Allows filtering by genre id(s). USER_SELECTABLE is special value used to return specific genres which users can select from
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetLyricsParams defines parameters for GetLyrics.
type GetLyricsParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners, track
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// FilterId Lyrics Id
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetLyricsIdParams defines parameters for GetLyricsId.
type GetLyricsIdParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners, track
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetLyricsIdRelationshipsOwnersParams defines parameters for GetLyricsIdRelationshipsOwners.
type GetLyricsIdRelationshipsOwnersParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetLyricsIdRelationshipsTrackParams defines parameters for GetLyricsIdRelationshipsTrack.
type GetLyricsIdRelationshipsTrackParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: track
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetPlaylistsParams defines parameters for GetPlaylists.
type GetPlaylistsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Sort Values prefixed with "-" are sorted descending; values without it are sorted ascending.
	Sort *[]GetPlaylistsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: coverArt, items, owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// FilterOwnersId User id
	FilterOwnersId *[]string `form:"filter[owners.id],omitempty" json:"filter[owners.id],omitempty"`

	// FilterId Playlist id
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetPlaylistsParamsSort defines parameters for GetPlaylists.
type GetPlaylistsParamsSort string

// PostPlaylistsParams defines parameters for PostPlaylists.
type PostPlaylistsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`
}

// GetPlaylistsIdParams defines parameters for GetPlaylistsId.
type GetPlaylistsIdParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: coverArt, items, owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// PatchPlaylistsIdParams defines parameters for PatchPlaylistsId.
type PatchPlaylistsIdParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`
}

// GetPlaylistsIdRelationshipsCoverArtParams defines parameters for GetPlaylistsIdRelationshipsCoverArt.
type GetPlaylistsIdRelationshipsCoverArtParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: coverArt
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetPlaylistsIdRelationshipsItemsParams defines parameters for GetPlaylistsIdRelationshipsItems.
type GetPlaylistsIdRelationshipsItemsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: items
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// PostPlaylistsIdRelationshipsItemsParams defines parameters for PostPlaylistsIdRelationshipsItems.
type PostPlaylistsIdRelationshipsItemsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`
}

// GetPlaylistsIdRelationshipsOwnersParams defines parameters for GetPlaylistsIdRelationshipsOwners.
type GetPlaylistsIdRelationshipsOwnersParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetProvidersParams defines parameters for GetProviders.
type GetProvidersParams struct {
	// FilterId Allows to filter the collection of resources based on id attribute value
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetSearchResultsIdParams defines parameters for GetSearchResultsId.
type GetSearchResultsIdParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// ExplicitFilter Explicit filter
	ExplicitFilter *string `form:"explicitFilter,omitempty" json:"explicitFilter,omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums, artists, playlists, topHits, tracks, videos
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetSearchResultsIdRelationshipsAlbumsParams defines parameters for GetSearchResultsIdRelationshipsAlbums.
type GetSearchResultsIdRelationshipsAlbumsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// ExplicitFilter Explicit filter
	ExplicitFilter *string `form:"explicitFilter,omitempty" json:"explicitFilter,omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetSearchResultsIdRelationshipsArtistsParams defines parameters for GetSearchResultsIdRelationshipsArtists.
type GetSearchResultsIdRelationshipsArtistsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// ExplicitFilter Explicit filter
	ExplicitFilter *string `form:"explicitFilter,omitempty" json:"explicitFilter,omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: artists
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetSearchResultsIdRelationshipsPlaylistsParams defines parameters for GetSearchResultsIdRelationshipsPlaylists.
type GetSearchResultsIdRelationshipsPlaylistsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// ExplicitFilter Explicit filter
	ExplicitFilter *string `form:"explicitFilter,omitempty" json:"explicitFilter,omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: playlists
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetSearchResultsIdRelationshipsTopHitsParams defines parameters for GetSearchResultsIdRelationshipsTopHits.
type GetSearchResultsIdRelationshipsTopHitsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// ExplicitFilter Explicit filter
	ExplicitFilter *string `form:"explicitFilter,omitempty" json:"explicitFilter,omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: topHits
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetSearchResultsIdRelationshipsTracksParams defines parameters for GetSearchResultsIdRelationshipsTracks.
type GetSearchResultsIdRelationshipsTracksParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// ExplicitFilter Explicit filter
	ExplicitFilter *string `form:"explicitFilter,omitempty" json:"explicitFilter,omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: tracks
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetSearchResultsIdRelationshipsVideosParams defines parameters for GetSearchResultsIdRelationshipsVideos.
type GetSearchResultsIdRelationshipsVideosParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// ExplicitFilter Explicit filter
	ExplicitFilter *string `form:"explicitFilter,omitempty" json:"explicitFilter,omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: videos
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetSearchSuggestionsIdParams defines parameters for GetSearchSuggestionsId.
type GetSearchSuggestionsIdParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// ExplicitFilter Explicit filter
	ExplicitFilter *string `form:"explicitFilter,omitempty" json:"explicitFilter,omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: directHits
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetSearchSuggestionsIdRelationshipsDirectHitsParams defines parameters for GetSearchSuggestionsIdRelationshipsDirectHits.
type GetSearchSuggestionsIdRelationshipsDirectHitsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// ExplicitFilter Explicit filter
	ExplicitFilter *string `form:"explicitFilter,omitempty" json:"explicitFilter,omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: directHits
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetTrackFilesIdParams defines parameters for GetTrackFilesId.
type GetTrackFilesIdParams struct {
	Formats string `form:"formats" json:"formats"`
	Usage   string `form:"usage" json:"usage"`
}

// GetTrackManifestsIdParams defines parameters for GetTrackManifestsId.
type GetTrackManifestsIdParams struct {
	ManifestType string `form:"manifestType" json:"manifestType"`
	Formats      string `form:"formats" json:"formats"`
	UriScheme    string `form:"uriScheme" json:"uriScheme"`
	Usage        string `form:"usage" json:"usage"`
	Adaptive     string `form:"adaptive" json:"adaptive"`
}

// GetTrackSourceFilesParams defines parameters for GetTrackSourceFiles.
type GetTrackSourceFilesParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// FilterId Track source file id
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetTrackSourceFilesIdParams defines parameters for GetTrackSourceFilesId.
type GetTrackSourceFilesIdParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetTrackSourceFilesIdRelationshipsOwnersParams defines parameters for GetTrackSourceFilesIdRelationshipsOwners.
type GetTrackSourceFilesIdRelationshipsOwnersParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetTrackStatisticsParams defines parameters for GetTrackStatistics.
type GetTrackStatisticsParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// FilterId A Tidal catalogue ID
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetTrackStatisticsIdParams defines parameters for GetTrackStatisticsId.
type GetTrackStatisticsIdParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetTrackStatisticsIdRelationshipsOwnersParams defines parameters for GetTrackStatisticsIdRelationshipsOwners.
type GetTrackStatisticsIdRelationshipsOwnersParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetTracksParams defines parameters for GetTracks.
type GetTracksParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums, artists, genres, lyrics, owners, providers, radio, similarTracks, sourceFile, trackStatistics
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// FilterOwnersId User id
	FilterOwnersId *[]string `form:"filter[owners.id],omitempty" json:"filter[owners.id],omitempty"`

	// FilterIsrc International Standard Recording Code (ISRC)
	FilterIsrc *[]string `form:"filter[isrc],omitempty" json:"filter[isrc],omitempty"`

	// FilterId A Tidal catalogue ID
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetTracksIdParams defines parameters for GetTracksId.
type GetTracksIdParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums, artists, genres, lyrics, owners, providers, radio, similarTracks, sourceFile, trackStatistics
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetTracksIdRelationshipsAlbumsParams defines parameters for GetTracksIdRelationshipsAlbums.
type GetTracksIdRelationshipsAlbumsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetTracksIdRelationshipsArtistsParams defines parameters for GetTracksIdRelationshipsArtists.
type GetTracksIdRelationshipsArtistsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: artists
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetTracksIdRelationshipsGenresParams defines parameters for GetTracksIdRelationshipsGenres.
type GetTracksIdRelationshipsGenresParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: genres
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetTracksIdRelationshipsLyricsParams defines parameters for GetTracksIdRelationshipsLyrics.
type GetTracksIdRelationshipsLyricsParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: lyrics
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetTracksIdRelationshipsOwnersParams defines parameters for GetTracksIdRelationshipsOwners.
type GetTracksIdRelationshipsOwnersParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetTracksIdRelationshipsProvidersParams defines parameters for GetTracksIdRelationshipsProviders.
type GetTracksIdRelationshipsProvidersParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: providers
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetTracksIdRelationshipsRadioParams defines parameters for GetTracksIdRelationshipsRadio.
type GetTracksIdRelationshipsRadioParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: radio
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetTracksIdRelationshipsSimilarTracksParams defines parameters for GetTracksIdRelationshipsSimilarTracks.
type GetTracksIdRelationshipsSimilarTracksParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: similarTracks
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetTracksIdRelationshipsSourceFileParams defines parameters for GetTracksIdRelationshipsSourceFile.
type GetTracksIdRelationshipsSourceFileParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: sourceFile
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetTracksIdRelationshipsTrackStatisticsParams defines parameters for GetTracksIdRelationshipsTrackStatistics.
type GetTracksIdRelationshipsTrackStatisticsParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: trackStatistics
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetUserCollectionsIdParams defines parameters for GetUserCollectionsId.
type GetUserCollectionsIdParams struct {
	// Locale BCP 47 locale
	Locale string `form:"locale" json:"locale"`

	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums, artists, owners, playlists, tracks, videos
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetUserCollectionsIdRelationshipsAlbumsParams defines parameters for GetUserCollectionsIdRelationshipsAlbums.
type GetUserCollectionsIdRelationshipsAlbumsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Locale BCP 47 locale
	Locale string `form:"locale" json:"locale"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Sort Values prefixed with "-" are sorted descending; values without it are sorted ascending.
	Sort *[]GetUserCollectionsIdRelationshipsAlbumsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetUserCollectionsIdRelationshipsAlbumsParamsSort defines parameters for GetUserCollectionsIdRelationshipsAlbums.
type GetUserCollectionsIdRelationshipsAlbumsParamsSort string

// PostUserCollectionsIdRelationshipsAlbumsParams defines parameters for PostUserCollectionsIdRelationshipsAlbums.
type PostUserCollectionsIdRelationshipsAlbumsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`
}

// GetUserCollectionsIdRelationshipsArtistsParams defines parameters for GetUserCollectionsIdRelationshipsArtists.
type GetUserCollectionsIdRelationshipsArtistsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Locale BCP 47 locale
	Locale string `form:"locale" json:"locale"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Sort Values prefixed with "-" are sorted descending; values without it are sorted ascending.
	Sort *[]GetUserCollectionsIdRelationshipsArtistsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: artists
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetUserCollectionsIdRelationshipsArtistsParamsSort defines parameters for GetUserCollectionsIdRelationshipsArtists.
type GetUserCollectionsIdRelationshipsArtistsParamsSort string

// PostUserCollectionsIdRelationshipsArtistsParams defines parameters for PostUserCollectionsIdRelationshipsArtists.
type PostUserCollectionsIdRelationshipsArtistsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`
}

// GetUserCollectionsIdRelationshipsOwnersParams defines parameters for GetUserCollectionsIdRelationshipsOwners.
type GetUserCollectionsIdRelationshipsOwnersParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetUserCollectionsIdRelationshipsPlaylistsParams defines parameters for GetUserCollectionsIdRelationshipsPlaylists.
type GetUserCollectionsIdRelationshipsPlaylistsParams struct {
	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Sort Values prefixed with "-" are sorted descending; values without it are sorted ascending.
	Sort *[]GetUserCollectionsIdRelationshipsPlaylistsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: playlists
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetUserCollectionsIdRelationshipsPlaylistsParamsSort defines parameters for GetUserCollectionsIdRelationshipsPlaylists.
type GetUserCollectionsIdRelationshipsPlaylistsParamsSort string

// GetUserCollectionsIdRelationshipsTracksParams defines parameters for GetUserCollectionsIdRelationshipsTracks.
type GetUserCollectionsIdRelationshipsTracksParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Locale BCP 47 locale
	Locale string `form:"locale" json:"locale"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Sort Values prefixed with "-" are sorted descending; values without it are sorted ascending.
	Sort *[]GetUserCollectionsIdRelationshipsTracksParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: tracks
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetUserCollectionsIdRelationshipsTracksParamsSort defines parameters for GetUserCollectionsIdRelationshipsTracks.
type GetUserCollectionsIdRelationshipsTracksParamsSort string

// PostUserCollectionsIdRelationshipsTracksParams defines parameters for PostUserCollectionsIdRelationshipsTracks.
type PostUserCollectionsIdRelationshipsTracksParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`
}

// GetUserCollectionsIdRelationshipsVideosParams defines parameters for GetUserCollectionsIdRelationshipsVideos.
type GetUserCollectionsIdRelationshipsVideosParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Locale BCP 47 locale
	Locale string `form:"locale" json:"locale"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Sort Values prefixed with "-" are sorted descending; values without it are sorted ascending.
	Sort *[]GetUserCollectionsIdRelationshipsVideosParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: videos
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetUserCollectionsIdRelationshipsVideosParamsSort defines parameters for GetUserCollectionsIdRelationshipsVideos.
type GetUserCollectionsIdRelationshipsVideosParamsSort string

// PostUserCollectionsIdRelationshipsVideosParams defines parameters for PostUserCollectionsIdRelationshipsVideos.
type PostUserCollectionsIdRelationshipsVideosParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`
}

// GetUserRecommendationsIdParams defines parameters for GetUserRecommendationsId.
type GetUserRecommendationsIdParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Locale BCP47 locale code
	Locale string `form:"locale" json:"locale"`

	// Include Allows the client to customize which related resources should be returned. Available options: discoveryMixes, myMixes, newArrivalMixes
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetUserRecommendationsIdRelationshipsDiscoveryMixesParams defines parameters for GetUserRecommendationsIdRelationshipsDiscoveryMixes.
type GetUserRecommendationsIdRelationshipsDiscoveryMixesParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Locale BCP47 locale code
	Locale string `form:"locale" json:"locale"`

	// Include Allows the client to customize which related resources should be returned. Available options: discoveryMixes
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetUserRecommendationsIdRelationshipsMyMixesParams defines parameters for GetUserRecommendationsIdRelationshipsMyMixes.
type GetUserRecommendationsIdRelationshipsMyMixesParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Locale BCP47 locale code
	Locale string `form:"locale" json:"locale"`

	// Include Allows the client to customize which related resources should be returned. Available options: myMixes
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetUserRecommendationsIdRelationshipsNewArrivalMixesParams defines parameters for GetUserRecommendationsIdRelationshipsNewArrivalMixes.
type GetUserRecommendationsIdRelationshipsNewArrivalMixesParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Locale BCP47 locale code
	Locale string `form:"locale" json:"locale"`

	// Include Allows the client to customize which related resources should be returned. Available options: newArrivalMixes
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetUserSharesParams defines parameters for GetUserShares.
type GetUserSharesParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners, sharedResources
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// FilterCode Share code
	FilterCode *[]string `form:"filter[code],omitempty" json:"filter[code],omitempty"`

	// FilterId User share id
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetUserSharesIdParams defines parameters for GetUserSharesId.
type GetUserSharesIdParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners, sharedResources
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetUserSharesIdRelationshipsOwnersParams defines parameters for GetUserSharesIdRelationshipsOwners.
type GetUserSharesIdRelationshipsOwnersParams struct {
	// Include Allows the client to customize which related resources should be returned. Available options: owners
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetUserSharesIdRelationshipsSharedResourcesParams defines parameters for GetUserSharesIdRelationshipsSharedResources.
type GetUserSharesIdRelationshipsSharedResourcesParams struct {
	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Include Allows the client to customize which related resources should be returned. Available options: sharedResources
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetVideosParams defines parameters for GetVideos.
type GetVideosParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums, artists, providers, thumbnailArt
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// FilterIsrc Allows to filter the collection of resources based on isrc attribute value
	FilterIsrc *[]string `form:"filter[isrc],omitempty" json:"filter[isrc],omitempty"`

	// FilterId Allows to filter the collection of resources based on id attribute value
	FilterId *[]string `form:"filter[id],omitempty" json:"filter[id],omitempty"`
}

// GetVideosIdParams defines parameters for GetVideosId.
type GetVideosIdParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums, artists, providers, thumbnailArt
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`
}

// GetVideosIdRelationshipsAlbumsParams defines parameters for GetVideosIdRelationshipsAlbums.
type GetVideosIdRelationshipsAlbumsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: albums
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetVideosIdRelationshipsArtistsParams defines parameters for GetVideosIdRelationshipsArtists.
type GetVideosIdRelationshipsArtistsParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: artists
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetVideosIdRelationshipsProvidersParams defines parameters for GetVideosIdRelationshipsProviders.
type GetVideosIdRelationshipsProvidersParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: providers
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// GetVideosIdRelationshipsThumbnailArtParams defines parameters for GetVideosIdRelationshipsThumbnailArt.
type GetVideosIdRelationshipsThumbnailArtParams struct {
	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `form:"countryCode" json:"countryCode"`

	// Include Allows the client to customize which related resources should be returned. Available options: thumbnailArt
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`
}

// PostAlbumsApplicationVndAPIPlusJSONRequestBody defines body for PostAlbums for application/vnd.api+json ContentType.
type PostAlbumsApplicationVndAPIPlusJSONRequestBody = AlbumCreateOperationPayload

// PatchAlbumsIdApplicationVndAPIPlusJSONRequestBody defines body for PatchAlbumsId for application/vnd.api+json ContentType.
type PatchAlbumsIdApplicationVndAPIPlusJSONRequestBody = AlbumUpdateOperationPayload

// PatchAlbumsIdRelationshipsCoverArtApplicationVndAPIPlusJSONRequestBody defines body for PatchAlbumsIdRelationshipsCoverArt for application/vnd.api+json ContentType.
type PatchAlbumsIdRelationshipsCoverArtApplicationVndAPIPlusJSONRequestBody = AlbumCoverArtRelationshipUpdateOperationPayload

// PostAppreciationsApplicationVndAPIPlusJSONRequestBody defines body for PostAppreciations for application/vnd.api+json ContentType.
type PostAppreciationsApplicationVndAPIPlusJSONRequestBody = AppreciationsCreateOperationPayload

// PatchArtistBiographiesIdApplicationVndAPIPlusJSONRequestBody defines body for PatchArtistBiographiesId for application/vnd.api+json ContentType.
type PatchArtistBiographiesIdApplicationVndAPIPlusJSONRequestBody = ArtistBiographyUpdateBody

// PostArtistClaimsApplicationVndAPIPlusJSONRequestBody defines body for PostArtistClaims for application/vnd.api+json ContentType.
type PostArtistClaimsApplicationVndAPIPlusJSONRequestBody = ArtistClaimsCreateOperationPayload

// PatchArtistClaimsIdApplicationVndAPIPlusJSONRequestBody defines body for PatchArtistClaimsId for application/vnd.api+json ContentType.
type PatchArtistClaimsIdApplicationVndAPIPlusJSONRequestBody = ArtistClaimsUpdateOperationPayload

// PatchArtistClaimsIdRelationshipsAcceptedArtistsApplicationVndAPIPlusJSONRequestBody defines body for PatchArtistClaimsIdRelationshipsAcceptedArtists for application/vnd.api+json ContentType.
type PatchArtistClaimsIdRelationshipsAcceptedArtistsApplicationVndAPIPlusJSONRequestBody = ArtistClaimAcceptedArtistsRelationshipUpdateOperationPayload

// PostArtistsApplicationVndAPIPlusJSONRequestBody defines body for PostArtists for application/vnd.api+json ContentType.
type PostArtistsApplicationVndAPIPlusJSONRequestBody = ArtistCreateOperationPayload

// PatchArtistsIdApplicationVndAPIPlusJSONRequestBody defines body for PatchArtistsId for application/vnd.api+json ContentType.
type PatchArtistsIdApplicationVndAPIPlusJSONRequestBody = ArtistUpdateBody

// DeleteArtistsIdRelationshipsFollowingApplicationVndAPIPlusJSONRequestBody defines body for DeleteArtistsIdRelationshipsFollowing for application/vnd.api+json ContentType.
type DeleteArtistsIdRelationshipsFollowingApplicationVndAPIPlusJSONRequestBody = ArtistFollowingRelationshipRemoveOperationPayload

// PostArtistsIdRelationshipsFollowingApplicationVndAPIPlusJSONRequestBody defines body for PostArtistsIdRelationshipsFollowing for application/vnd.api+json ContentType.
type PostArtistsIdRelationshipsFollowingApplicationVndAPIPlusJSONRequestBody = ArtistFollowingRelationshipAddOperationPayload

// PatchArtistsIdRelationshipsProfileArtApplicationVndAPIPlusJSONRequestBody defines body for PatchArtistsIdRelationshipsProfileArt for application/vnd.api+json ContentType.
type PatchArtistsIdRelationshipsProfileArtApplicationVndAPIPlusJSONRequestBody = ArtistProfileArtRelationshipUpdateOperationPayload

// PostArtworksApplicationVndAPIPlusJSONRequestBody defines body for PostArtworks for application/vnd.api+json ContentType.
type PostArtworksApplicationVndAPIPlusJSONRequestBody = ArtworkCreateOperationPayload

// PostLyricsApplicationVndAPIPlusJSONRequestBody defines body for PostLyrics for application/vnd.api+json ContentType.
type PostLyricsApplicationVndAPIPlusJSONRequestBody = LyricsCreateOperationPayload

// PatchLyricsIdApplicationVndAPIPlusJSONRequestBody defines body for PatchLyricsId for application/vnd.api+json ContentType.
type PatchLyricsIdApplicationVndAPIPlusJSONRequestBody = LyricsUpdateOperationPayload

// PostPlaylistsApplicationVndAPIPlusJSONRequestBody defines body for PostPlaylists for application/vnd.api+json ContentType.
type PostPlaylistsApplicationVndAPIPlusJSONRequestBody = PlaylistCreateOperationPayload

// PatchPlaylistsIdApplicationVndAPIPlusJSONRequestBody defines body for PatchPlaylistsId for application/vnd.api+json ContentType.
type PatchPlaylistsIdApplicationVndAPIPlusJSONRequestBody = PlaylistUpdateOperationPayload

// PatchPlaylistsIdRelationshipsCoverArtApplicationVndAPIPlusJSONRequestBody defines body for PatchPlaylistsIdRelationshipsCoverArt for application/vnd.api+json ContentType.
type PatchPlaylistsIdRelationshipsCoverArtApplicationVndAPIPlusJSONRequestBody = PlaylistCoverArtRelationshipUpdateOperationPayload

// DeletePlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody defines body for DeletePlaylistsIdRelationshipsItems for application/vnd.api+json ContentType.
type DeletePlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody = PlaylistItemsRelationshipRemoveOperationPayload

// PatchPlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody defines body for PatchPlaylistsIdRelationshipsItems for application/vnd.api+json ContentType.
type PatchPlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody = PlaylistItemsRelationshipReorderOperationPayload

// PostPlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody defines body for PostPlaylistsIdRelationshipsItems for application/vnd.api+json ContentType.
type PostPlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody = PlaylistItemsRelationshipAddOperationPayload

// PostTrackSourceFilesApplicationVndAPIPlusJSONRequestBody defines body for PostTrackSourceFiles for application/vnd.api+json ContentType.
type PostTrackSourceFilesApplicationVndAPIPlusJSONRequestBody = TrackSourceFileCreateOperationPayload

// PostTracksApplicationVndAPIPlusJSONRequestBody defines body for PostTracks for application/vnd.api+json ContentType.
type PostTracksApplicationVndAPIPlusJSONRequestBody = TrackCreateOperationPayload

// PatchTracksIdApplicationVndAPIPlusJSONRequestBody defines body for PatchTracksId for application/vnd.api+json ContentType.
type PatchTracksIdApplicationVndAPIPlusJSONRequestBody = TrackUpdateOperationPayload

// DeleteUserCollectionsIdRelationshipsAlbumsApplicationVndAPIPlusJSONRequestBody defines body for DeleteUserCollectionsIdRelationshipsAlbums for application/vnd.api+json ContentType.
type DeleteUserCollectionsIdRelationshipsAlbumsApplicationVndAPIPlusJSONRequestBody = UserCollectionAlbumsRelationshipRemoveOperationPayload

// PostUserCollectionsIdRelationshipsAlbumsApplicationVndAPIPlusJSONRequestBody defines body for PostUserCollectionsIdRelationshipsAlbums for application/vnd.api+json ContentType.
type PostUserCollectionsIdRelationshipsAlbumsApplicationVndAPIPlusJSONRequestBody = UserCollectionAlbumsRelationshipAddOperationPayload

// DeleteUserCollectionsIdRelationshipsArtistsApplicationVndAPIPlusJSONRequestBody defines body for DeleteUserCollectionsIdRelationshipsArtists for application/vnd.api+json ContentType.
type DeleteUserCollectionsIdRelationshipsArtistsApplicationVndAPIPlusJSONRequestBody = UserCollectionArtistsRelationshipRemoveOperationPayload

// PostUserCollectionsIdRelationshipsArtistsApplicationVndAPIPlusJSONRequestBody defines body for PostUserCollectionsIdRelationshipsArtists for application/vnd.api+json ContentType.
type PostUserCollectionsIdRelationshipsArtistsApplicationVndAPIPlusJSONRequestBody = UserCollectionArtistsRelationshipAddOperationPayload

// DeleteUserCollectionsIdRelationshipsPlaylistsApplicationVndAPIPlusJSONRequestBody defines body for DeleteUserCollectionsIdRelationshipsPlaylists for application/vnd.api+json ContentType.
type DeleteUserCollectionsIdRelationshipsPlaylistsApplicationVndAPIPlusJSONRequestBody = UserCollectionPlaylistsRelationshipRemoveOperationPayload

// PostUserCollectionsIdRelationshipsPlaylistsApplicationVndAPIPlusJSONRequestBody defines body for PostUserCollectionsIdRelationshipsPlaylists for application/vnd.api+json ContentType.
type PostUserCollectionsIdRelationshipsPlaylistsApplicationVndAPIPlusJSONRequestBody = UserCollectionPlaylistsRelationshipRemoveOperationPayload

// DeleteUserCollectionsIdRelationshipsTracksApplicationVndAPIPlusJSONRequestBody defines body for DeleteUserCollectionsIdRelationshipsTracks for application/vnd.api+json ContentType.
type DeleteUserCollectionsIdRelationshipsTracksApplicationVndAPIPlusJSONRequestBody = UserCollectionTracksRelationshipRemoveOperationPayload

// PostUserCollectionsIdRelationshipsTracksApplicationVndAPIPlusJSONRequestBody defines body for PostUserCollectionsIdRelationshipsTracks for application/vnd.api+json ContentType.
type PostUserCollectionsIdRelationshipsTracksApplicationVndAPIPlusJSONRequestBody = UserCollectionTracksRelationshipAddOperationPayload

// DeleteUserCollectionsIdRelationshipsVideosApplicationVndAPIPlusJSONRequestBody defines body for DeleteUserCollectionsIdRelationshipsVideos for application/vnd.api+json ContentType.
type DeleteUserCollectionsIdRelationshipsVideosApplicationVndAPIPlusJSONRequestBody = UserCollectionVideosRelationshipRemoveOperationPayload

// PostUserCollectionsIdRelationshipsVideosApplicationVndAPIPlusJSONRequestBody defines body for PostUserCollectionsIdRelationshipsVideos for application/vnd.api+json ContentType.
type PostUserCollectionsIdRelationshipsVideosApplicationVndAPIPlusJSONRequestBody = UserCollectionVideosRelationshipAddOperationPayload

// PostUserReportsApplicationVndAPIPlusJSONRequestBody defines body for PostUserReports for application/vnd.api+json ContentType.
type PostUserReportsApplicationVndAPIPlusJSONRequestBody = UserReportCreateOperationPayload

// PostUserSharesApplicationVndAPIPlusJSONRequestBody defines body for PostUserShares for application/vnd.api+json ContentType.
type PostUserSharesApplicationVndAPIPlusJSONRequestBody = UserSharesCreateOperationPayload

// AsAlbumsResourceObject returns the union data inside the Included_Item as a AlbumsResourceObject
func (t Included_Item) AsAlbumsResourceObject() (AlbumsResourceObject, error) {
	var body AlbumsResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlbumsResourceObject overwrites any union data inside the Included_Item as the provided AlbumsResourceObject
func (t *Included_Item) FromAlbumsResourceObject(v AlbumsResourceObject) error {
	v.Type = "albums"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlbumsResourceObject performs a merge with any union data inside the Included_Item, using the provided AlbumsResourceObject
func (t *Included_Item) MergeAlbumsResourceObject(v AlbumsResourceObject) error {
	v.Type = "albums"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAppreciationsResourceObject returns the union data inside the Included_Item as a AppreciationsResourceObject
func (t Included_Item) AsAppreciationsResourceObject() (AppreciationsResourceObject, error) {
	var body AppreciationsResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAppreciationsResourceObject overwrites any union data inside the Included_Item as the provided AppreciationsResourceObject
func (t *Included_Item) FromAppreciationsResourceObject(v AppreciationsResourceObject) error {
	v.Type = "appreciations"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAppreciationsResourceObject performs a merge with any union data inside the Included_Item, using the provided AppreciationsResourceObject
func (t *Included_Item) MergeAppreciationsResourceObject(v AppreciationsResourceObject) error {
	v.Type = "appreciations"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArtistBiographiesResourceObject returns the union data inside the Included_Item as a ArtistBiographiesResourceObject
func (t Included_Item) AsArtistBiographiesResourceObject() (ArtistBiographiesResourceObject, error) {
	var body ArtistBiographiesResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistBiographiesResourceObject overwrites any union data inside the Included_Item as the provided ArtistBiographiesResourceObject
func (t *Included_Item) FromArtistBiographiesResourceObject(v ArtistBiographiesResourceObject) error {
	v.Type = "artistBiographies"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistBiographiesResourceObject performs a merge with any union data inside the Included_Item, using the provided ArtistBiographiesResourceObject
func (t *Included_Item) MergeArtistBiographiesResourceObject(v ArtistBiographiesResourceObject) error {
	v.Type = "artistBiographies"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArtistClaimsResourceObject returns the union data inside the Included_Item as a ArtistClaimsResourceObject
func (t Included_Item) AsArtistClaimsResourceObject() (ArtistClaimsResourceObject, error) {
	var body ArtistClaimsResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistClaimsResourceObject overwrites any union data inside the Included_Item as the provided ArtistClaimsResourceObject
func (t *Included_Item) FromArtistClaimsResourceObject(v ArtistClaimsResourceObject) error {
	v.Type = "artistClaims"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistClaimsResourceObject performs a merge with any union data inside the Included_Item, using the provided ArtistClaimsResourceObject
func (t *Included_Item) MergeArtistClaimsResourceObject(v ArtistClaimsResourceObject) error {
	v.Type = "artistClaims"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArtistRolesResourceObject returns the union data inside the Included_Item as a ArtistRolesResourceObject
func (t Included_Item) AsArtistRolesResourceObject() (ArtistRolesResourceObject, error) {
	var body ArtistRolesResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistRolesResourceObject overwrites any union data inside the Included_Item as the provided ArtistRolesResourceObject
func (t *Included_Item) FromArtistRolesResourceObject(v ArtistRolesResourceObject) error {
	v.Type = "artistRoles"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistRolesResourceObject performs a merge with any union data inside the Included_Item, using the provided ArtistRolesResourceObject
func (t *Included_Item) MergeArtistRolesResourceObject(v ArtistRolesResourceObject) error {
	v.Type = "artistRoles"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArtistsResourceObject returns the union data inside the Included_Item as a ArtistsResourceObject
func (t Included_Item) AsArtistsResourceObject() (ArtistsResourceObject, error) {
	var body ArtistsResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtistsResourceObject overwrites any union data inside the Included_Item as the provided ArtistsResourceObject
func (t *Included_Item) FromArtistsResourceObject(v ArtistsResourceObject) error {
	v.Type = "artists"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtistsResourceObject performs a merge with any union data inside the Included_Item, using the provided ArtistsResourceObject
func (t *Included_Item) MergeArtistsResourceObject(v ArtistsResourceObject) error {
	v.Type = "artists"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArtworksResourceObject returns the union data inside the Included_Item as a ArtworksResourceObject
func (t Included_Item) AsArtworksResourceObject() (ArtworksResourceObject, error) {
	var body ArtworksResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtworksResourceObject overwrites any union data inside the Included_Item as the provided ArtworksResourceObject
func (t *Included_Item) FromArtworksResourceObject(v ArtworksResourceObject) error {
	v.Type = "artworks"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtworksResourceObject performs a merge with any union data inside the Included_Item, using the provided ArtworksResourceObject
func (t *Included_Item) MergeArtworksResourceObject(v ArtworksResourceObject) error {
	v.Type = "artworks"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGenresResourceObject returns the union data inside the Included_Item as a GenresResourceObject
func (t Included_Item) AsGenresResourceObject() (GenresResourceObject, error) {
	var body GenresResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGenresResourceObject overwrites any union data inside the Included_Item as the provided GenresResourceObject
func (t *Included_Item) FromGenresResourceObject(v GenresResourceObject) error {
	v.Type = "genres"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGenresResourceObject performs a merge with any union data inside the Included_Item, using the provided GenresResourceObject
func (t *Included_Item) MergeGenresResourceObject(v GenresResourceObject) error {
	v.Type = "genres"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLyricsResourceObject returns the union data inside the Included_Item as a LyricsResourceObject
func (t Included_Item) AsLyricsResourceObject() (LyricsResourceObject, error) {
	var body LyricsResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLyricsResourceObject overwrites any union data inside the Included_Item as the provided LyricsResourceObject
func (t *Included_Item) FromLyricsResourceObject(v LyricsResourceObject) error {
	v.Type = "lyrics"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLyricsResourceObject performs a merge with any union data inside the Included_Item, using the provided LyricsResourceObject
func (t *Included_Item) MergeLyricsResourceObject(v LyricsResourceObject) error {
	v.Type = "lyrics"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlaylistsResourceObject returns the union data inside the Included_Item as a PlaylistsResourceObject
func (t Included_Item) AsPlaylistsResourceObject() (PlaylistsResourceObject, error) {
	var body PlaylistsResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlaylistsResourceObject overwrites any union data inside the Included_Item as the provided PlaylistsResourceObject
func (t *Included_Item) FromPlaylistsResourceObject(v PlaylistsResourceObject) error {
	v.Type = "playlists"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlaylistsResourceObject performs a merge with any union data inside the Included_Item, using the provided PlaylistsResourceObject
func (t *Included_Item) MergePlaylistsResourceObject(v PlaylistsResourceObject) error {
	v.Type = "playlists"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProvidersResourceObject returns the union data inside the Included_Item as a ProvidersResourceObject
func (t Included_Item) AsProvidersResourceObject() (ProvidersResourceObject, error) {
	var body ProvidersResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProvidersResourceObject overwrites any union data inside the Included_Item as the provided ProvidersResourceObject
func (t *Included_Item) FromProvidersResourceObject(v ProvidersResourceObject) error {
	v.Type = "providers"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProvidersResourceObject performs a merge with any union data inside the Included_Item, using the provided ProvidersResourceObject
func (t *Included_Item) MergeProvidersResourceObject(v ProvidersResourceObject) error {
	v.Type = "providers"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSearchResultsResourceObject returns the union data inside the Included_Item as a SearchResultsResourceObject
func (t Included_Item) AsSearchResultsResourceObject() (SearchResultsResourceObject, error) {
	var body SearchResultsResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSearchResultsResourceObject overwrites any union data inside the Included_Item as the provided SearchResultsResourceObject
func (t *Included_Item) FromSearchResultsResourceObject(v SearchResultsResourceObject) error {
	v.Type = "searchResults"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSearchResultsResourceObject performs a merge with any union data inside the Included_Item, using the provided SearchResultsResourceObject
func (t *Included_Item) MergeSearchResultsResourceObject(v SearchResultsResourceObject) error {
	v.Type = "searchResults"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSearchSuggestionsResourceObject returns the union data inside the Included_Item as a SearchSuggestionsResourceObject
func (t Included_Item) AsSearchSuggestionsResourceObject() (SearchSuggestionsResourceObject, error) {
	var body SearchSuggestionsResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSearchSuggestionsResourceObject overwrites any union data inside the Included_Item as the provided SearchSuggestionsResourceObject
func (t *Included_Item) FromSearchSuggestionsResourceObject(v SearchSuggestionsResourceObject) error {
	v.Type = "searchSuggestions"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSearchSuggestionsResourceObject performs a merge with any union data inside the Included_Item, using the provided SearchSuggestionsResourceObject
func (t *Included_Item) MergeSearchSuggestionsResourceObject(v SearchSuggestionsResourceObject) error {
	v.Type = "searchSuggestions"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTrackFilesResourceObject returns the union data inside the Included_Item as a TrackFilesResourceObject
func (t Included_Item) AsTrackFilesResourceObject() (TrackFilesResourceObject, error) {
	var body TrackFilesResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrackFilesResourceObject overwrites any union data inside the Included_Item as the provided TrackFilesResourceObject
func (t *Included_Item) FromTrackFilesResourceObject(v TrackFilesResourceObject) error {
	v.Type = "trackFiles"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrackFilesResourceObject performs a merge with any union data inside the Included_Item, using the provided TrackFilesResourceObject
func (t *Included_Item) MergeTrackFilesResourceObject(v TrackFilesResourceObject) error {
	v.Type = "trackFiles"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTrackManifestsResourceObject returns the union data inside the Included_Item as a TrackManifestsResourceObject
func (t Included_Item) AsTrackManifestsResourceObject() (TrackManifestsResourceObject, error) {
	var body TrackManifestsResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrackManifestsResourceObject overwrites any union data inside the Included_Item as the provided TrackManifestsResourceObject
func (t *Included_Item) FromTrackManifestsResourceObject(v TrackManifestsResourceObject) error {
	v.Type = "trackManifests"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrackManifestsResourceObject performs a merge with any union data inside the Included_Item, using the provided TrackManifestsResourceObject
func (t *Included_Item) MergeTrackManifestsResourceObject(v TrackManifestsResourceObject) error {
	v.Type = "trackManifests"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTrackSourceFilesResourceObject returns the union data inside the Included_Item as a TrackSourceFilesResourceObject
func (t Included_Item) AsTrackSourceFilesResourceObject() (TrackSourceFilesResourceObject, error) {
	var body TrackSourceFilesResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrackSourceFilesResourceObject overwrites any union data inside the Included_Item as the provided TrackSourceFilesResourceObject
func (t *Included_Item) FromTrackSourceFilesResourceObject(v TrackSourceFilesResourceObject) error {
	v.Type = "trackSourceFiles"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrackSourceFilesResourceObject performs a merge with any union data inside the Included_Item, using the provided TrackSourceFilesResourceObject
func (t *Included_Item) MergeTrackSourceFilesResourceObject(v TrackSourceFilesResourceObject) error {
	v.Type = "trackSourceFiles"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTrackStatisticsResourceObject returns the union data inside the Included_Item as a TrackStatisticsResourceObject
func (t Included_Item) AsTrackStatisticsResourceObject() (TrackStatisticsResourceObject, error) {
	var body TrackStatisticsResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrackStatisticsResourceObject overwrites any union data inside the Included_Item as the provided TrackStatisticsResourceObject
func (t *Included_Item) FromTrackStatisticsResourceObject(v TrackStatisticsResourceObject) error {
	v.Type = "trackStatistics"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrackStatisticsResourceObject performs a merge with any union data inside the Included_Item, using the provided TrackStatisticsResourceObject
func (t *Included_Item) MergeTrackStatisticsResourceObject(v TrackStatisticsResourceObject) error {
	v.Type = "trackStatistics"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTracksResourceObject returns the union data inside the Included_Item as a TracksResourceObject
func (t Included_Item) AsTracksResourceObject() (TracksResourceObject, error) {
	var body TracksResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTracksResourceObject overwrites any union data inside the Included_Item as the provided TracksResourceObject
func (t *Included_Item) FromTracksResourceObject(v TracksResourceObject) error {
	v.Type = "tracks"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTracksResourceObject performs a merge with any union data inside the Included_Item, using the provided TracksResourceObject
func (t *Included_Item) MergeTracksResourceObject(v TracksResourceObject) error {
	v.Type = "tracks"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserCollectionsResourceObject returns the union data inside the Included_Item as a UserCollectionsResourceObject
func (t Included_Item) AsUserCollectionsResourceObject() (UserCollectionsResourceObject, error) {
	var body UserCollectionsResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserCollectionsResourceObject overwrites any union data inside the Included_Item as the provided UserCollectionsResourceObject
func (t *Included_Item) FromUserCollectionsResourceObject(v UserCollectionsResourceObject) error {
	v.Type = "userCollections"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserCollectionsResourceObject performs a merge with any union data inside the Included_Item, using the provided UserCollectionsResourceObject
func (t *Included_Item) MergeUserCollectionsResourceObject(v UserCollectionsResourceObject) error {
	v.Type = "userCollections"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserEntitlementsResourceObject returns the union data inside the Included_Item as a UserEntitlementsResourceObject
func (t Included_Item) AsUserEntitlementsResourceObject() (UserEntitlementsResourceObject, error) {
	var body UserEntitlementsResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserEntitlementsResourceObject overwrites any union data inside the Included_Item as the provided UserEntitlementsResourceObject
func (t *Included_Item) FromUserEntitlementsResourceObject(v UserEntitlementsResourceObject) error {
	v.Type = "userEntitlements"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserEntitlementsResourceObject performs a merge with any union data inside the Included_Item, using the provided UserEntitlementsResourceObject
func (t *Included_Item) MergeUserEntitlementsResourceObject(v UserEntitlementsResourceObject) error {
	v.Type = "userEntitlements"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserRecommendationsResourceObject returns the union data inside the Included_Item as a UserRecommendationsResourceObject
func (t Included_Item) AsUserRecommendationsResourceObject() (UserRecommendationsResourceObject, error) {
	var body UserRecommendationsResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserRecommendationsResourceObject overwrites any union data inside the Included_Item as the provided UserRecommendationsResourceObject
func (t *Included_Item) FromUserRecommendationsResourceObject(v UserRecommendationsResourceObject) error {
	v.Type = "userRecommendations"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserRecommendationsResourceObject performs a merge with any union data inside the Included_Item, using the provided UserRecommendationsResourceObject
func (t *Included_Item) MergeUserRecommendationsResourceObject(v UserRecommendationsResourceObject) error {
	v.Type = "userRecommendations"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserReportsResourceObject returns the union data inside the Included_Item as a UserReportsResourceObject
func (t Included_Item) AsUserReportsResourceObject() (UserReportsResourceObject, error) {
	var body UserReportsResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserReportsResourceObject overwrites any union data inside the Included_Item as the provided UserReportsResourceObject
func (t *Included_Item) FromUserReportsResourceObject(v UserReportsResourceObject) error {
	v.Type = "userReports"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserReportsResourceObject performs a merge with any union data inside the Included_Item, using the provided UserReportsResourceObject
func (t *Included_Item) MergeUserReportsResourceObject(v UserReportsResourceObject) error {
	v.Type = "userReports"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserSharesResourceObject returns the union data inside the Included_Item as a UserSharesResourceObject
func (t Included_Item) AsUserSharesResourceObject() (UserSharesResourceObject, error) {
	var body UserSharesResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserSharesResourceObject overwrites any union data inside the Included_Item as the provided UserSharesResourceObject
func (t *Included_Item) FromUserSharesResourceObject(v UserSharesResourceObject) error {
	v.Type = "userShares"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserSharesResourceObject performs a merge with any union data inside the Included_Item, using the provided UserSharesResourceObject
func (t *Included_Item) MergeUserSharesResourceObject(v UserSharesResourceObject) error {
	v.Type = "userShares"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUsersResourceObject returns the union data inside the Included_Item as a UsersResourceObject
func (t Included_Item) AsUsersResourceObject() (UsersResourceObject, error) {
	var body UsersResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUsersResourceObject overwrites any union data inside the Included_Item as the provided UsersResourceObject
func (t *Included_Item) FromUsersResourceObject(v UsersResourceObject) error {
	v.Type = "users"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUsersResourceObject performs a merge with any union data inside the Included_Item, using the provided UsersResourceObject
func (t *Included_Item) MergeUsersResourceObject(v UsersResourceObject) error {
	v.Type = "users"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVideosResourceObject returns the union data inside the Included_Item as a VideosResourceObject
func (t Included_Item) AsVideosResourceObject() (VideosResourceObject, error) {
	var body VideosResourceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVideosResourceObject overwrites any union data inside the Included_Item as the provided VideosResourceObject
func (t *Included_Item) FromVideosResourceObject(v VideosResourceObject) error {
	v.Type = "videos"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVideosResourceObject performs a merge with any union data inside the Included_Item, using the provided VideosResourceObject
func (t *Included_Item) MergeVideosResourceObject(v VideosResourceObject) error {
	v.Type = "videos"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Included_Item) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Included_Item) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "albums":
		return t.AsAlbumsResourceObject()
	case "appreciations":
		return t.AsAppreciationsResourceObject()
	case "artistBiographies":
		return t.AsArtistBiographiesResourceObject()
	case "artistClaims":
		return t.AsArtistClaimsResourceObject()
	case "artistRoles":
		return t.AsArtistRolesResourceObject()
	case "artists":
		return t.AsArtistsResourceObject()
	case "artworks":
		return t.AsArtworksResourceObject()
	case "genres":
		return t.AsGenresResourceObject()
	case "lyrics":
		return t.AsLyricsResourceObject()
	case "playlists":
		return t.AsPlaylistsResourceObject()
	case "providers":
		return t.AsProvidersResourceObject()
	case "searchResults":
		return t.AsSearchResultsResourceObject()
	case "searchSuggestions":
		return t.AsSearchSuggestionsResourceObject()
	case "trackFiles":
		return t.AsTrackFilesResourceObject()
	case "trackManifests":
		return t.AsTrackManifestsResourceObject()
	case "trackSourceFiles":
		return t.AsTrackSourceFilesResourceObject()
	case "trackStatistics":
		return t.AsTrackStatisticsResourceObject()
	case "tracks":
		return t.AsTracksResourceObject()
	case "userCollections":
		return t.AsUserCollectionsResourceObject()
	case "userEntitlements":
		return t.AsUserEntitlementsResourceObject()
	case "userRecommendations":
		return t.AsUserRecommendationsResourceObject()
	case "userReports":
		return t.AsUserReportsResourceObject()
	case "userShares":
		return t.AsUserSharesResourceObject()
	case "users":
		return t.AsUsersResourceObject()
	case "videos":
		return t.AsVideosResourceObject()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAlbums request
	GetAlbums(ctx context.Context, params *GetAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAlbumsWithBody request with any body
	PostAlbumsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAlbumsWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostAlbumsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAlbumsId request
	DeleteAlbumsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlbumsId request
	GetAlbumsId(ctx context.Context, id string, params *GetAlbumsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAlbumsIdWithBody request with any body
	PatchAlbumsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAlbumsIdWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchAlbumsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlbumsIdRelationshipsArtists request
	GetAlbumsIdRelationshipsArtists(ctx context.Context, id string, params *GetAlbumsIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlbumsIdRelationshipsCoverArt request
	GetAlbumsIdRelationshipsCoverArt(ctx context.Context, id string, params *GetAlbumsIdRelationshipsCoverArtParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAlbumsIdRelationshipsCoverArtWithBody request with any body
	PatchAlbumsIdRelationshipsCoverArtWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAlbumsIdRelationshipsCoverArtWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchAlbumsIdRelationshipsCoverArtApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlbumsIdRelationshipsGenres request
	GetAlbumsIdRelationshipsGenres(ctx context.Context, id string, params *GetAlbumsIdRelationshipsGenresParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlbumsIdRelationshipsItems request
	GetAlbumsIdRelationshipsItems(ctx context.Context, id string, params *GetAlbumsIdRelationshipsItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlbumsIdRelationshipsOwners request
	GetAlbumsIdRelationshipsOwners(ctx context.Context, id string, params *GetAlbumsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlbumsIdRelationshipsProviders request
	GetAlbumsIdRelationshipsProviders(ctx context.Context, id string, params *GetAlbumsIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlbumsIdRelationshipsSimilarAlbums request
	GetAlbumsIdRelationshipsSimilarAlbums(ctx context.Context, id string, params *GetAlbumsIdRelationshipsSimilarAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAppreciationsWithBody request with any body
	PostAppreciationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAppreciationsWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostAppreciationsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistBiographies request
	GetArtistBiographies(ctx context.Context, params *GetArtistBiographiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistBiographiesId request
	GetArtistBiographiesId(ctx context.Context, id string, params *GetArtistBiographiesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchArtistBiographiesIdWithBody request with any body
	PatchArtistBiographiesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchArtistBiographiesIdWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchArtistBiographiesIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistBiographiesIdRelationshipsOwners request
	GetArtistBiographiesIdRelationshipsOwners(ctx context.Context, id string, params *GetArtistBiographiesIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostArtistClaimsWithBody request with any body
	PostArtistClaimsWithBody(ctx context.Context, params *PostArtistClaimsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostArtistClaimsWithApplicationVndAPIPlusJSONBody(ctx context.Context, params *PostArtistClaimsParams, body PostArtistClaimsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistClaimsId request
	GetArtistClaimsId(ctx context.Context, id string, params *GetArtistClaimsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchArtistClaimsIdWithBody request with any body
	PatchArtistClaimsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchArtistClaimsIdWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchArtistClaimsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistClaimsIdRelationshipsAcceptedArtists request
	GetArtistClaimsIdRelationshipsAcceptedArtists(ctx context.Context, id string, params *GetArtistClaimsIdRelationshipsAcceptedArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchArtistClaimsIdRelationshipsAcceptedArtistsWithBody request with any body
	PatchArtistClaimsIdRelationshipsAcceptedArtistsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchArtistClaimsIdRelationshipsAcceptedArtistsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchArtistClaimsIdRelationshipsAcceptedArtistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistClaimsIdRelationshipsOwners request
	GetArtistClaimsIdRelationshipsOwners(ctx context.Context, id string, params *GetArtistClaimsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistClaimsIdRelationshipsRecommendedArtists request
	GetArtistClaimsIdRelationshipsRecommendedArtists(ctx context.Context, id string, params *GetArtistClaimsIdRelationshipsRecommendedArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistRoles request
	GetArtistRoles(ctx context.Context, params *GetArtistRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistRolesId request
	GetArtistRolesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtists request
	GetArtists(ctx context.Context, params *GetArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostArtistsWithBody request with any body
	PostArtistsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostArtistsWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostArtistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsId request
	GetArtistsId(ctx context.Context, id string, params *GetArtistsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchArtistsIdWithBody request with any body
	PatchArtistsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchArtistsIdWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchArtistsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsAlbums request
	GetArtistsIdRelationshipsAlbums(ctx context.Context, id string, params *GetArtistsIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsBiography request
	GetArtistsIdRelationshipsBiography(ctx context.Context, id string, params *GetArtistsIdRelationshipsBiographyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsFollowers request
	GetArtistsIdRelationshipsFollowers(ctx context.Context, id string, params *GetArtistsIdRelationshipsFollowersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteArtistsIdRelationshipsFollowingWithBody request with any body
	DeleteArtistsIdRelationshipsFollowingWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteArtistsIdRelationshipsFollowingWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body DeleteArtistsIdRelationshipsFollowingApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsFollowing request
	GetArtistsIdRelationshipsFollowing(ctx context.Context, id string, params *GetArtistsIdRelationshipsFollowingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostArtistsIdRelationshipsFollowingWithBody request with any body
	PostArtistsIdRelationshipsFollowingWithBody(ctx context.Context, id string, params *PostArtistsIdRelationshipsFollowingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostArtistsIdRelationshipsFollowingWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, params *PostArtistsIdRelationshipsFollowingParams, body PostArtistsIdRelationshipsFollowingApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsOwners request
	GetArtistsIdRelationshipsOwners(ctx context.Context, id string, params *GetArtistsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsProfileArt request
	GetArtistsIdRelationshipsProfileArt(ctx context.Context, id string, params *GetArtistsIdRelationshipsProfileArtParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchArtistsIdRelationshipsProfileArtWithBody request with any body
	PatchArtistsIdRelationshipsProfileArtWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchArtistsIdRelationshipsProfileArtWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchArtistsIdRelationshipsProfileArtApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsRadio request
	GetArtistsIdRelationshipsRadio(ctx context.Context, id string, params *GetArtistsIdRelationshipsRadioParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsRoles request
	GetArtistsIdRelationshipsRoles(ctx context.Context, id string, params *GetArtistsIdRelationshipsRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsSimilarArtists request
	GetArtistsIdRelationshipsSimilarArtists(ctx context.Context, id string, params *GetArtistsIdRelationshipsSimilarArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsTrackProviders request
	GetArtistsIdRelationshipsTrackProviders(ctx context.Context, id string, params *GetArtistsIdRelationshipsTrackProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsTracks request
	GetArtistsIdRelationshipsTracks(ctx context.Context, id string, params *GetArtistsIdRelationshipsTracksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtistsIdRelationshipsVideos request
	GetArtistsIdRelationshipsVideos(ctx context.Context, id string, params *GetArtistsIdRelationshipsVideosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtworks request
	GetArtworks(ctx context.Context, params *GetArtworksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostArtworksWithBody request with any body
	PostArtworksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostArtworksWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostArtworksApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtworksId request
	GetArtworksId(ctx context.Context, id string, params *GetArtworksIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtworksIdRelationshipsOwners request
	GetArtworksIdRelationshipsOwners(ctx context.Context, id string, params *GetArtworksIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGenres request
	GetGenres(ctx context.Context, params *GetGenresParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGenresId request
	GetGenresId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLyrics request
	GetLyrics(ctx context.Context, params *GetLyricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLyricsWithBody request with any body
	PostLyricsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLyricsWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostLyricsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLyricsId request
	GetLyricsId(ctx context.Context, id string, params *GetLyricsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLyricsIdWithBody request with any body
	PatchLyricsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLyricsIdWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchLyricsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLyricsIdRelationshipsOwners request
	GetLyricsIdRelationshipsOwners(ctx context.Context, id string, params *GetLyricsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLyricsIdRelationshipsTrack request
	GetLyricsIdRelationshipsTrack(ctx context.Context, id string, params *GetLyricsIdRelationshipsTrackParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaylists request
	GetPlaylists(ctx context.Context, params *GetPlaylistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPlaylistsWithBody request with any body
	PostPlaylistsWithBody(ctx context.Context, params *PostPlaylistsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPlaylistsWithApplicationVndAPIPlusJSONBody(ctx context.Context, params *PostPlaylistsParams, body PostPlaylistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaylistsId request
	DeletePlaylistsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaylistsId request
	GetPlaylistsId(ctx context.Context, id string, params *GetPlaylistsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPlaylistsIdWithBody request with any body
	PatchPlaylistsIdWithBody(ctx context.Context, id string, params *PatchPlaylistsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPlaylistsIdWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, params *PatchPlaylistsIdParams, body PatchPlaylistsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaylistsIdRelationshipsCoverArt request
	GetPlaylistsIdRelationshipsCoverArt(ctx context.Context, id string, params *GetPlaylistsIdRelationshipsCoverArtParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPlaylistsIdRelationshipsCoverArtWithBody request with any body
	PatchPlaylistsIdRelationshipsCoverArtWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPlaylistsIdRelationshipsCoverArtWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchPlaylistsIdRelationshipsCoverArtApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlaylistsIdRelationshipsItemsWithBody request with any body
	DeletePlaylistsIdRelationshipsItemsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeletePlaylistsIdRelationshipsItemsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body DeletePlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaylistsIdRelationshipsItems request
	GetPlaylistsIdRelationshipsItems(ctx context.Context, id string, params *GetPlaylistsIdRelationshipsItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPlaylistsIdRelationshipsItemsWithBody request with any body
	PatchPlaylistsIdRelationshipsItemsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPlaylistsIdRelationshipsItemsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchPlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPlaylistsIdRelationshipsItemsWithBody request with any body
	PostPlaylistsIdRelationshipsItemsWithBody(ctx context.Context, id string, params *PostPlaylistsIdRelationshipsItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPlaylistsIdRelationshipsItemsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, params *PostPlaylistsIdRelationshipsItemsParams, body PostPlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaylistsIdRelationshipsOwners request
	GetPlaylistsIdRelationshipsOwners(ctx context.Context, id string, params *GetPlaylistsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProviders request
	GetProviders(ctx context.Context, params *GetProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProvidersId request
	GetProvidersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchResultsId request
	GetSearchResultsId(ctx context.Context, id string, params *GetSearchResultsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchResultsIdRelationshipsAlbums request
	GetSearchResultsIdRelationshipsAlbums(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchResultsIdRelationshipsArtists request
	GetSearchResultsIdRelationshipsArtists(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchResultsIdRelationshipsPlaylists request
	GetSearchResultsIdRelationshipsPlaylists(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsPlaylistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchResultsIdRelationshipsTopHits request
	GetSearchResultsIdRelationshipsTopHits(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsTopHitsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchResultsIdRelationshipsTracks request
	GetSearchResultsIdRelationshipsTracks(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsTracksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchResultsIdRelationshipsVideos request
	GetSearchResultsIdRelationshipsVideos(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsVideosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchSuggestionsId request
	GetSearchSuggestionsId(ctx context.Context, id string, params *GetSearchSuggestionsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchSuggestionsIdRelationshipsDirectHits request
	GetSearchSuggestionsIdRelationshipsDirectHits(ctx context.Context, id string, params *GetSearchSuggestionsIdRelationshipsDirectHitsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrackFilesId request
	GetTrackFilesId(ctx context.Context, id string, params *GetTrackFilesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrackManifestsId request
	GetTrackManifestsId(ctx context.Context, id string, params *GetTrackManifestsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrackSourceFiles request
	GetTrackSourceFiles(ctx context.Context, params *GetTrackSourceFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTrackSourceFilesWithBody request with any body
	PostTrackSourceFilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTrackSourceFilesWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostTrackSourceFilesApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrackSourceFilesId request
	GetTrackSourceFilesId(ctx context.Context, id string, params *GetTrackSourceFilesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrackSourceFilesIdRelationshipsOwners request
	GetTrackSourceFilesIdRelationshipsOwners(ctx context.Context, id string, params *GetTrackSourceFilesIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrackStatistics request
	GetTrackStatistics(ctx context.Context, params *GetTrackStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrackStatisticsId request
	GetTrackStatisticsId(ctx context.Context, id string, params *GetTrackStatisticsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrackStatisticsIdRelationshipsOwners request
	GetTrackStatisticsIdRelationshipsOwners(ctx context.Context, id string, params *GetTrackStatisticsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracks request
	GetTracks(ctx context.Context, params *GetTracksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTracksWithBody request with any body
	PostTracksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTracksWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostTracksApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTracksId request
	DeleteTracksId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksId request
	GetTracksId(ctx context.Context, id string, params *GetTracksIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchTracksIdWithBody request with any body
	PatchTracksIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchTracksIdWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchTracksIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksIdRelationshipsAlbums request
	GetTracksIdRelationshipsAlbums(ctx context.Context, id string, params *GetTracksIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksIdRelationshipsArtists request
	GetTracksIdRelationshipsArtists(ctx context.Context, id string, params *GetTracksIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksIdRelationshipsGenres request
	GetTracksIdRelationshipsGenres(ctx context.Context, id string, params *GetTracksIdRelationshipsGenresParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksIdRelationshipsLyrics request
	GetTracksIdRelationshipsLyrics(ctx context.Context, id string, params *GetTracksIdRelationshipsLyricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksIdRelationshipsOwners request
	GetTracksIdRelationshipsOwners(ctx context.Context, id string, params *GetTracksIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksIdRelationshipsProviders request
	GetTracksIdRelationshipsProviders(ctx context.Context, id string, params *GetTracksIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksIdRelationshipsRadio request
	GetTracksIdRelationshipsRadio(ctx context.Context, id string, params *GetTracksIdRelationshipsRadioParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksIdRelationshipsSimilarTracks request
	GetTracksIdRelationshipsSimilarTracks(ctx context.Context, id string, params *GetTracksIdRelationshipsSimilarTracksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksIdRelationshipsSourceFile request
	GetTracksIdRelationshipsSourceFile(ctx context.Context, id string, params *GetTracksIdRelationshipsSourceFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksIdRelationshipsTrackStatistics request
	GetTracksIdRelationshipsTrackStatistics(ctx context.Context, id string, params *GetTracksIdRelationshipsTrackStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserCollectionsId request
	GetUserCollectionsId(ctx context.Context, id string, params *GetUserCollectionsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserCollectionsIdRelationshipsAlbumsWithBody request with any body
	DeleteUserCollectionsIdRelationshipsAlbumsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUserCollectionsIdRelationshipsAlbumsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsAlbumsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserCollectionsIdRelationshipsAlbums request
	GetUserCollectionsIdRelationshipsAlbums(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserCollectionsIdRelationshipsAlbumsWithBody request with any body
	PostUserCollectionsIdRelationshipsAlbumsWithBody(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsAlbumsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserCollectionsIdRelationshipsAlbumsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsAlbumsParams, body PostUserCollectionsIdRelationshipsAlbumsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserCollectionsIdRelationshipsArtistsWithBody request with any body
	DeleteUserCollectionsIdRelationshipsArtistsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUserCollectionsIdRelationshipsArtistsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsArtistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserCollectionsIdRelationshipsArtists request
	GetUserCollectionsIdRelationshipsArtists(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserCollectionsIdRelationshipsArtistsWithBody request with any body
	PostUserCollectionsIdRelationshipsArtistsWithBody(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsArtistsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserCollectionsIdRelationshipsArtistsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsArtistsParams, body PostUserCollectionsIdRelationshipsArtistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserCollectionsIdRelationshipsOwners request
	GetUserCollectionsIdRelationshipsOwners(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserCollectionsIdRelationshipsPlaylistsWithBody request with any body
	DeleteUserCollectionsIdRelationshipsPlaylistsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUserCollectionsIdRelationshipsPlaylistsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsPlaylistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserCollectionsIdRelationshipsPlaylists request
	GetUserCollectionsIdRelationshipsPlaylists(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsPlaylistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserCollectionsIdRelationshipsPlaylistsWithBody request with any body
	PostUserCollectionsIdRelationshipsPlaylistsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserCollectionsIdRelationshipsPlaylistsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PostUserCollectionsIdRelationshipsPlaylistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserCollectionsIdRelationshipsTracksWithBody request with any body
	DeleteUserCollectionsIdRelationshipsTracksWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUserCollectionsIdRelationshipsTracksWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsTracksApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserCollectionsIdRelationshipsTracks request
	GetUserCollectionsIdRelationshipsTracks(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsTracksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserCollectionsIdRelationshipsTracksWithBody request with any body
	PostUserCollectionsIdRelationshipsTracksWithBody(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsTracksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserCollectionsIdRelationshipsTracksWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsTracksParams, body PostUserCollectionsIdRelationshipsTracksApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserCollectionsIdRelationshipsVideosWithBody request with any body
	DeleteUserCollectionsIdRelationshipsVideosWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUserCollectionsIdRelationshipsVideosWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsVideosApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserCollectionsIdRelationshipsVideos request
	GetUserCollectionsIdRelationshipsVideos(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsVideosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserCollectionsIdRelationshipsVideosWithBody request with any body
	PostUserCollectionsIdRelationshipsVideosWithBody(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsVideosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserCollectionsIdRelationshipsVideosWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsVideosParams, body PostUserCollectionsIdRelationshipsVideosApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserEntitlementsId request
	GetUserEntitlementsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRecommendationsId request
	GetUserRecommendationsId(ctx context.Context, id string, params *GetUserRecommendationsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRecommendationsIdRelationshipsDiscoveryMixes request
	GetUserRecommendationsIdRelationshipsDiscoveryMixes(ctx context.Context, id string, params *GetUserRecommendationsIdRelationshipsDiscoveryMixesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRecommendationsIdRelationshipsMyMixes request
	GetUserRecommendationsIdRelationshipsMyMixes(ctx context.Context, id string, params *GetUserRecommendationsIdRelationshipsMyMixesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserRecommendationsIdRelationshipsNewArrivalMixes request
	GetUserRecommendationsIdRelationshipsNewArrivalMixes(ctx context.Context, id string, params *GetUserRecommendationsIdRelationshipsNewArrivalMixesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserReportsWithBody request with any body
	PostUserReportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserReportsWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostUserReportsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserShares request
	GetUserShares(ctx context.Context, params *GetUserSharesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserSharesWithBody request with any body
	PostUserSharesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserSharesWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostUserSharesApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserSharesId request
	GetUserSharesId(ctx context.Context, id string, params *GetUserSharesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserSharesIdRelationshipsOwners request
	GetUserSharesIdRelationshipsOwners(ctx context.Context, id string, params *GetUserSharesIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserSharesIdRelationshipsSharedResources request
	GetUserSharesIdRelationshipsSharedResources(ctx context.Context, id string, params *GetUserSharesIdRelationshipsSharedResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersMe request
	GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideos request
	GetVideos(ctx context.Context, params *GetVideosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideosId request
	GetVideosId(ctx context.Context, id string, params *GetVideosIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideosIdRelationshipsAlbums request
	GetVideosIdRelationshipsAlbums(ctx context.Context, id string, params *GetVideosIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideosIdRelationshipsArtists request
	GetVideosIdRelationshipsArtists(ctx context.Context, id string, params *GetVideosIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideosIdRelationshipsProviders request
	GetVideosIdRelationshipsProviders(ctx context.Context, id string, params *GetVideosIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideosIdRelationshipsThumbnailArt request
	GetVideosIdRelationshipsThumbnailArt(ctx context.Context, id string, params *GetVideosIdRelationshipsThumbnailArtParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAlbums(ctx context.Context, params *GetAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlbumsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlbumsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlbumsWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostAlbumsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlbumsRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAlbumsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAlbumsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlbumsId(ctx context.Context, id string, params *GetAlbumsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAlbumsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAlbumsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAlbumsIdWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchAlbumsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAlbumsIdRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlbumsIdRelationshipsArtists(ctx context.Context, id string, params *GetAlbumsIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumsIdRelationshipsArtistsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlbumsIdRelationshipsCoverArt(ctx context.Context, id string, params *GetAlbumsIdRelationshipsCoverArtParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumsIdRelationshipsCoverArtRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAlbumsIdRelationshipsCoverArtWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAlbumsIdRelationshipsCoverArtRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAlbumsIdRelationshipsCoverArtWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchAlbumsIdRelationshipsCoverArtApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAlbumsIdRelationshipsCoverArtRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlbumsIdRelationshipsGenres(ctx context.Context, id string, params *GetAlbumsIdRelationshipsGenresParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumsIdRelationshipsGenresRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlbumsIdRelationshipsItems(ctx context.Context, id string, params *GetAlbumsIdRelationshipsItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumsIdRelationshipsItemsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlbumsIdRelationshipsOwners(ctx context.Context, id string, params *GetAlbumsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumsIdRelationshipsOwnersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlbumsIdRelationshipsProviders(ctx context.Context, id string, params *GetAlbumsIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumsIdRelationshipsProvidersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlbumsIdRelationshipsSimilarAlbums(ctx context.Context, id string, params *GetAlbumsIdRelationshipsSimilarAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumsIdRelationshipsSimilarAlbumsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAppreciationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAppreciationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAppreciationsWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostAppreciationsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAppreciationsRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistBiographies(ctx context.Context, params *GetArtistBiographiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistBiographiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistBiographiesId(ctx context.Context, id string, params *GetArtistBiographiesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistBiographiesIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchArtistBiographiesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchArtistBiographiesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchArtistBiographiesIdWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchArtistBiographiesIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchArtistBiographiesIdRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistBiographiesIdRelationshipsOwners(ctx context.Context, id string, params *GetArtistBiographiesIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistBiographiesIdRelationshipsOwnersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostArtistClaimsWithBody(ctx context.Context, params *PostArtistClaimsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostArtistClaimsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostArtistClaimsWithApplicationVndAPIPlusJSONBody(ctx context.Context, params *PostArtistClaimsParams, body PostArtistClaimsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostArtistClaimsRequestWithApplicationVndAPIPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistClaimsId(ctx context.Context, id string, params *GetArtistClaimsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistClaimsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchArtistClaimsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchArtistClaimsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchArtistClaimsIdWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchArtistClaimsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchArtistClaimsIdRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistClaimsIdRelationshipsAcceptedArtists(ctx context.Context, id string, params *GetArtistClaimsIdRelationshipsAcceptedArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistClaimsIdRelationshipsAcceptedArtistsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchArtistClaimsIdRelationshipsAcceptedArtistsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchArtistClaimsIdRelationshipsAcceptedArtistsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchArtistClaimsIdRelationshipsAcceptedArtistsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchArtistClaimsIdRelationshipsAcceptedArtistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchArtistClaimsIdRelationshipsAcceptedArtistsRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistClaimsIdRelationshipsOwners(ctx context.Context, id string, params *GetArtistClaimsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistClaimsIdRelationshipsOwnersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistClaimsIdRelationshipsRecommendedArtists(ctx context.Context, id string, params *GetArtistClaimsIdRelationshipsRecommendedArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistClaimsIdRelationshipsRecommendedArtistsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistRoles(ctx context.Context, params *GetArtistRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistRolesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistRolesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtists(ctx context.Context, params *GetArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostArtistsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostArtistsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostArtistsWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostArtistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostArtistsRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsId(ctx context.Context, id string, params *GetArtistsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchArtistsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchArtistsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchArtistsIdWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchArtistsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchArtistsIdRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsAlbums(ctx context.Context, id string, params *GetArtistsIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsAlbumsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsBiography(ctx context.Context, id string, params *GetArtistsIdRelationshipsBiographyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsBiographyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsFollowers(ctx context.Context, id string, params *GetArtistsIdRelationshipsFollowersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsFollowersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteArtistsIdRelationshipsFollowingWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteArtistsIdRelationshipsFollowingRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteArtistsIdRelationshipsFollowingWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body DeleteArtistsIdRelationshipsFollowingApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteArtistsIdRelationshipsFollowingRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsFollowing(ctx context.Context, id string, params *GetArtistsIdRelationshipsFollowingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsFollowingRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostArtistsIdRelationshipsFollowingWithBody(ctx context.Context, id string, params *PostArtistsIdRelationshipsFollowingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostArtistsIdRelationshipsFollowingRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostArtistsIdRelationshipsFollowingWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, params *PostArtistsIdRelationshipsFollowingParams, body PostArtistsIdRelationshipsFollowingApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostArtistsIdRelationshipsFollowingRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsOwners(ctx context.Context, id string, params *GetArtistsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsOwnersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsProfileArt(ctx context.Context, id string, params *GetArtistsIdRelationshipsProfileArtParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsProfileArtRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchArtistsIdRelationshipsProfileArtWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchArtistsIdRelationshipsProfileArtRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchArtistsIdRelationshipsProfileArtWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchArtistsIdRelationshipsProfileArtApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchArtistsIdRelationshipsProfileArtRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsRadio(ctx context.Context, id string, params *GetArtistsIdRelationshipsRadioParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsRadioRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsRoles(ctx context.Context, id string, params *GetArtistsIdRelationshipsRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsRolesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsSimilarArtists(ctx context.Context, id string, params *GetArtistsIdRelationshipsSimilarArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsSimilarArtistsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsTrackProviders(ctx context.Context, id string, params *GetArtistsIdRelationshipsTrackProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsTrackProvidersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsTracks(ctx context.Context, id string, params *GetArtistsIdRelationshipsTracksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsTracksRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtistsIdRelationshipsVideos(ctx context.Context, id string, params *GetArtistsIdRelationshipsVideosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtistsIdRelationshipsVideosRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtworks(ctx context.Context, params *GetArtworksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtworksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostArtworksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostArtworksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostArtworksWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostArtworksApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostArtworksRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtworksId(ctx context.Context, id string, params *GetArtworksIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtworksIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtworksIdRelationshipsOwners(ctx context.Context, id string, params *GetArtworksIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtworksIdRelationshipsOwnersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGenres(ctx context.Context, params *GetGenresParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGenresRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGenresId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGenresIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLyrics(ctx context.Context, params *GetLyricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLyricsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLyricsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLyricsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLyricsWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostLyricsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLyricsRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLyricsId(ctx context.Context, id string, params *GetLyricsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLyricsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLyricsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLyricsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLyricsIdWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchLyricsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLyricsIdRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLyricsIdRelationshipsOwners(ctx context.Context, id string, params *GetLyricsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLyricsIdRelationshipsOwnersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLyricsIdRelationshipsTrack(ctx context.Context, id string, params *GetLyricsIdRelationshipsTrackParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLyricsIdRelationshipsTrackRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaylists(ctx context.Context, params *GetPlaylistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaylistsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlaylistsWithBody(ctx context.Context, params *PostPlaylistsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlaylistsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlaylistsWithApplicationVndAPIPlusJSONBody(ctx context.Context, params *PostPlaylistsParams, body PostPlaylistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlaylistsRequestWithApplicationVndAPIPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaylistsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaylistsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaylistsId(ctx context.Context, id string, params *GetPlaylistsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaylistsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPlaylistsIdWithBody(ctx context.Context, id string, params *PatchPlaylistsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPlaylistsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPlaylistsIdWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, params *PatchPlaylistsIdParams, body PatchPlaylistsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPlaylistsIdRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaylistsIdRelationshipsCoverArt(ctx context.Context, id string, params *GetPlaylistsIdRelationshipsCoverArtParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaylistsIdRelationshipsCoverArtRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPlaylistsIdRelationshipsCoverArtWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPlaylistsIdRelationshipsCoverArtRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPlaylistsIdRelationshipsCoverArtWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchPlaylistsIdRelationshipsCoverArtApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPlaylistsIdRelationshipsCoverArtRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaylistsIdRelationshipsItemsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaylistsIdRelationshipsItemsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlaylistsIdRelationshipsItemsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body DeletePlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlaylistsIdRelationshipsItemsRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaylistsIdRelationshipsItems(ctx context.Context, id string, params *GetPlaylistsIdRelationshipsItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaylistsIdRelationshipsItemsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPlaylistsIdRelationshipsItemsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPlaylistsIdRelationshipsItemsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPlaylistsIdRelationshipsItemsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchPlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPlaylistsIdRelationshipsItemsRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlaylistsIdRelationshipsItemsWithBody(ctx context.Context, id string, params *PostPlaylistsIdRelationshipsItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlaylistsIdRelationshipsItemsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlaylistsIdRelationshipsItemsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, params *PostPlaylistsIdRelationshipsItemsParams, body PostPlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlaylistsIdRelationshipsItemsRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaylistsIdRelationshipsOwners(ctx context.Context, id string, params *GetPlaylistsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaylistsIdRelationshipsOwnersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProviders(ctx context.Context, params *GetProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProvidersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProvidersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProvidersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchResultsId(ctx context.Context, id string, params *GetSearchResultsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchResultsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchResultsIdRelationshipsAlbums(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchResultsIdRelationshipsAlbumsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchResultsIdRelationshipsArtists(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchResultsIdRelationshipsArtistsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchResultsIdRelationshipsPlaylists(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsPlaylistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchResultsIdRelationshipsPlaylistsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchResultsIdRelationshipsTopHits(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsTopHitsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchResultsIdRelationshipsTopHitsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchResultsIdRelationshipsTracks(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsTracksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchResultsIdRelationshipsTracksRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchResultsIdRelationshipsVideos(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsVideosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchResultsIdRelationshipsVideosRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchSuggestionsId(ctx context.Context, id string, params *GetSearchSuggestionsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchSuggestionsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchSuggestionsIdRelationshipsDirectHits(ctx context.Context, id string, params *GetSearchSuggestionsIdRelationshipsDirectHitsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchSuggestionsIdRelationshipsDirectHitsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrackFilesId(ctx context.Context, id string, params *GetTrackFilesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrackFilesIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrackManifestsId(ctx context.Context, id string, params *GetTrackManifestsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrackManifestsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrackSourceFiles(ctx context.Context, params *GetTrackSourceFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrackSourceFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTrackSourceFilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTrackSourceFilesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTrackSourceFilesWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostTrackSourceFilesApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTrackSourceFilesRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrackSourceFilesId(ctx context.Context, id string, params *GetTrackSourceFilesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrackSourceFilesIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrackSourceFilesIdRelationshipsOwners(ctx context.Context, id string, params *GetTrackSourceFilesIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrackSourceFilesIdRelationshipsOwnersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrackStatistics(ctx context.Context, params *GetTrackStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrackStatisticsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrackStatisticsId(ctx context.Context, id string, params *GetTrackStatisticsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrackStatisticsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrackStatisticsIdRelationshipsOwners(ctx context.Context, id string, params *GetTrackStatisticsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrackStatisticsIdRelationshipsOwnersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracks(ctx context.Context, params *GetTracksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTracksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTracksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTracksWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostTracksApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTracksRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTracksId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTracksIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksId(ctx context.Context, id string, params *GetTracksIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTracksIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTracksIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTracksIdWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PatchTracksIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTracksIdRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksIdRelationshipsAlbums(ctx context.Context, id string, params *GetTracksIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRelationshipsAlbumsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksIdRelationshipsArtists(ctx context.Context, id string, params *GetTracksIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRelationshipsArtistsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksIdRelationshipsGenres(ctx context.Context, id string, params *GetTracksIdRelationshipsGenresParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRelationshipsGenresRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksIdRelationshipsLyrics(ctx context.Context, id string, params *GetTracksIdRelationshipsLyricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRelationshipsLyricsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksIdRelationshipsOwners(ctx context.Context, id string, params *GetTracksIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRelationshipsOwnersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksIdRelationshipsProviders(ctx context.Context, id string, params *GetTracksIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRelationshipsProvidersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksIdRelationshipsRadio(ctx context.Context, id string, params *GetTracksIdRelationshipsRadioParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRelationshipsRadioRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksIdRelationshipsSimilarTracks(ctx context.Context, id string, params *GetTracksIdRelationshipsSimilarTracksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRelationshipsSimilarTracksRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksIdRelationshipsSourceFile(ctx context.Context, id string, params *GetTracksIdRelationshipsSourceFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRelationshipsSourceFileRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksIdRelationshipsTrackStatistics(ctx context.Context, id string, params *GetTracksIdRelationshipsTrackStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRelationshipsTrackStatisticsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserCollectionsId(ctx context.Context, id string, params *GetUserCollectionsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserCollectionsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserCollectionsIdRelationshipsAlbumsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserCollectionsIdRelationshipsAlbumsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserCollectionsIdRelationshipsAlbumsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsAlbumsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserCollectionsIdRelationshipsAlbumsRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserCollectionsIdRelationshipsAlbums(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserCollectionsIdRelationshipsAlbumsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserCollectionsIdRelationshipsAlbumsWithBody(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsAlbumsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserCollectionsIdRelationshipsAlbumsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserCollectionsIdRelationshipsAlbumsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsAlbumsParams, body PostUserCollectionsIdRelationshipsAlbumsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserCollectionsIdRelationshipsAlbumsRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserCollectionsIdRelationshipsArtistsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserCollectionsIdRelationshipsArtistsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserCollectionsIdRelationshipsArtistsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsArtistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserCollectionsIdRelationshipsArtistsRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserCollectionsIdRelationshipsArtists(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserCollectionsIdRelationshipsArtistsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserCollectionsIdRelationshipsArtistsWithBody(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsArtistsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserCollectionsIdRelationshipsArtistsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserCollectionsIdRelationshipsArtistsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsArtistsParams, body PostUserCollectionsIdRelationshipsArtistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserCollectionsIdRelationshipsArtistsRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserCollectionsIdRelationshipsOwners(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserCollectionsIdRelationshipsOwnersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserCollectionsIdRelationshipsPlaylistsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserCollectionsIdRelationshipsPlaylistsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserCollectionsIdRelationshipsPlaylistsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsPlaylistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserCollectionsIdRelationshipsPlaylistsRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserCollectionsIdRelationshipsPlaylists(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsPlaylistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserCollectionsIdRelationshipsPlaylistsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserCollectionsIdRelationshipsPlaylistsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserCollectionsIdRelationshipsPlaylistsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserCollectionsIdRelationshipsPlaylistsWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body PostUserCollectionsIdRelationshipsPlaylistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserCollectionsIdRelationshipsPlaylistsRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserCollectionsIdRelationshipsTracksWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserCollectionsIdRelationshipsTracksRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserCollectionsIdRelationshipsTracksWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsTracksApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserCollectionsIdRelationshipsTracksRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserCollectionsIdRelationshipsTracks(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsTracksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserCollectionsIdRelationshipsTracksRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserCollectionsIdRelationshipsTracksWithBody(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsTracksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserCollectionsIdRelationshipsTracksRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserCollectionsIdRelationshipsTracksWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsTracksParams, body PostUserCollectionsIdRelationshipsTracksApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserCollectionsIdRelationshipsTracksRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserCollectionsIdRelationshipsVideosWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserCollectionsIdRelationshipsVideosRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserCollectionsIdRelationshipsVideosWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsVideosApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserCollectionsIdRelationshipsVideosRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserCollectionsIdRelationshipsVideos(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsVideosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserCollectionsIdRelationshipsVideosRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserCollectionsIdRelationshipsVideosWithBody(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsVideosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserCollectionsIdRelationshipsVideosRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserCollectionsIdRelationshipsVideosWithApplicationVndAPIPlusJSONBody(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsVideosParams, body PostUserCollectionsIdRelationshipsVideosApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserCollectionsIdRelationshipsVideosRequestWithApplicationVndAPIPlusJSONBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserEntitlementsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserEntitlementsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRecommendationsId(ctx context.Context, id string, params *GetUserRecommendationsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRecommendationsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRecommendationsIdRelationshipsDiscoveryMixes(ctx context.Context, id string, params *GetUserRecommendationsIdRelationshipsDiscoveryMixesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRecommendationsIdRelationshipsDiscoveryMixesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRecommendationsIdRelationshipsMyMixes(ctx context.Context, id string, params *GetUserRecommendationsIdRelationshipsMyMixesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRecommendationsIdRelationshipsMyMixesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserRecommendationsIdRelationshipsNewArrivalMixes(ctx context.Context, id string, params *GetUserRecommendationsIdRelationshipsNewArrivalMixesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRecommendationsIdRelationshipsNewArrivalMixesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserReportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserReportsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserReportsWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostUserReportsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserReportsRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserShares(ctx context.Context, params *GetUserSharesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserSharesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserSharesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserSharesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserSharesWithApplicationVndAPIPlusJSONBody(ctx context.Context, body PostUserSharesApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserSharesRequestWithApplicationVndAPIPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserSharesId(ctx context.Context, id string, params *GetUserSharesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserSharesIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserSharesIdRelationshipsOwners(ctx context.Context, id string, params *GetUserSharesIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserSharesIdRelationshipsOwnersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserSharesIdRelationshipsSharedResources(ctx context.Context, id string, params *GetUserSharesIdRelationshipsSharedResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserSharesIdRelationshipsSharedResourcesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideos(ctx context.Context, params *GetVideosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideosId(ctx context.Context, id string, params *GetVideosIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideosIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideosIdRelationshipsAlbums(ctx context.Context, id string, params *GetVideosIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideosIdRelationshipsAlbumsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideosIdRelationshipsArtists(ctx context.Context, id string, params *GetVideosIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideosIdRelationshipsArtistsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideosIdRelationshipsProviders(ctx context.Context, id string, params *GetVideosIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideosIdRelationshipsProvidersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideosIdRelationshipsThumbnailArt(ctx context.Context, id string, params *GetVideosIdRelationshipsThumbnailArtParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideosIdRelationshipsThumbnailArtRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAlbumsRequest generates requests for GetAlbums
func NewGetAlbumsRequest(server string, params *GetAlbumsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterOwnersId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[owners.id]", runtime.ParamLocationQuery, *params.FilterOwnersId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterBarcodeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[barcodeId]", runtime.ParamLocationQuery, *params.FilterBarcodeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAlbumsRequestWithApplicationVndAPIPlusJSONBody calls the generic PostAlbums builder with application/vnd.api+json body
func NewPostAlbumsRequestWithApplicationVndAPIPlusJSONBody(server string, body PostAlbumsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAlbumsRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewPostAlbumsRequestWithBody generates requests for PostAlbums with any type of body
func NewPostAlbumsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAlbumsIdRequest generates requests for DeleteAlbumsId
func NewDeleteAlbumsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlbumsIdRequest generates requests for GetAlbumsId
func NewGetAlbumsIdRequest(server string, id string, params *GetAlbumsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAlbumsIdRequestWithApplicationVndAPIPlusJSONBody calls the generic PatchAlbumsId builder with application/vnd.api+json body
func NewPatchAlbumsIdRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body PatchAlbumsIdApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAlbumsIdRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewPatchAlbumsIdRequestWithBody generates requests for PatchAlbumsId with any type of body
func NewPatchAlbumsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlbumsIdRelationshipsArtistsRequest generates requests for GetAlbumsIdRelationshipsArtists
func NewGetAlbumsIdRelationshipsArtistsRequest(server string, id string, params *GetAlbumsIdRelationshipsArtistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s/relationships/artists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlbumsIdRelationshipsCoverArtRequest generates requests for GetAlbumsIdRelationshipsCoverArt
func NewGetAlbumsIdRelationshipsCoverArtRequest(server string, id string, params *GetAlbumsIdRelationshipsCoverArtParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s/relationships/coverArt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAlbumsIdRelationshipsCoverArtRequestWithApplicationVndAPIPlusJSONBody calls the generic PatchAlbumsIdRelationshipsCoverArt builder with application/vnd.api+json body
func NewPatchAlbumsIdRelationshipsCoverArtRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body PatchAlbumsIdRelationshipsCoverArtApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAlbumsIdRelationshipsCoverArtRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewPatchAlbumsIdRelationshipsCoverArtRequestWithBody generates requests for PatchAlbumsIdRelationshipsCoverArt with any type of body
func NewPatchAlbumsIdRelationshipsCoverArtRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s/relationships/coverArt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlbumsIdRelationshipsGenresRequest generates requests for GetAlbumsIdRelationshipsGenres
func NewGetAlbumsIdRelationshipsGenresRequest(server string, id string, params *GetAlbumsIdRelationshipsGenresParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s/relationships/genres", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlbumsIdRelationshipsItemsRequest generates requests for GetAlbumsIdRelationshipsItems
func NewGetAlbumsIdRelationshipsItemsRequest(server string, id string, params *GetAlbumsIdRelationshipsItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s/relationships/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlbumsIdRelationshipsOwnersRequest generates requests for GetAlbumsIdRelationshipsOwners
func NewGetAlbumsIdRelationshipsOwnersRequest(server string, id string, params *GetAlbumsIdRelationshipsOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s/relationships/owners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlbumsIdRelationshipsProvidersRequest generates requests for GetAlbumsIdRelationshipsProviders
func NewGetAlbumsIdRelationshipsProvidersRequest(server string, id string, params *GetAlbumsIdRelationshipsProvidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s/relationships/providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlbumsIdRelationshipsSimilarAlbumsRequest generates requests for GetAlbumsIdRelationshipsSimilarAlbums
func NewGetAlbumsIdRelationshipsSimilarAlbumsRequest(server string, id string, params *GetAlbumsIdRelationshipsSimilarAlbumsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/albums/%s/relationships/similarAlbums", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAppreciationsRequestWithApplicationVndAPIPlusJSONBody calls the generic PostAppreciations builder with application/vnd.api+json body
func NewPostAppreciationsRequestWithApplicationVndAPIPlusJSONBody(server string, body PostAppreciationsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAppreciationsRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewPostAppreciationsRequestWithBody generates requests for PostAppreciations with any type of body
func NewPostAppreciationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appreciations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArtistBiographiesRequest generates requests for GetArtistBiographies
func NewGetArtistBiographiesRequest(server string, params *GetArtistBiographiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artistBiographies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistBiographiesIdRequest generates requests for GetArtistBiographiesId
func NewGetArtistBiographiesIdRequest(server string, id string, params *GetArtistBiographiesIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artistBiographies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchArtistBiographiesIdRequestWithApplicationVndAPIPlusJSONBody calls the generic PatchArtistBiographiesId builder with application/vnd.api+json body
func NewPatchArtistBiographiesIdRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body PatchArtistBiographiesIdApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchArtistBiographiesIdRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewPatchArtistBiographiesIdRequestWithBody generates requests for PatchArtistBiographiesId with any type of body
func NewPatchArtistBiographiesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artistBiographies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArtistBiographiesIdRelationshipsOwnersRequest generates requests for GetArtistBiographiesIdRelationshipsOwners
func NewGetArtistBiographiesIdRelationshipsOwnersRequest(server string, id string, params *GetArtistBiographiesIdRelationshipsOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artistBiographies/%s/relationships/owners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostArtistClaimsRequestWithApplicationVndAPIPlusJSONBody calls the generic PostArtistClaims builder with application/vnd.api+json body
func NewPostArtistClaimsRequestWithApplicationVndAPIPlusJSONBody(server string, params *PostArtistClaimsParams, body PostArtistClaimsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostArtistClaimsRequestWithBody(server, params, "application/vnd.api+json", bodyReader)
}

// NewPostArtistClaimsRequestWithBody generates requests for PostArtistClaims with any type of body
func NewPostArtistClaimsRequestWithBody(server string, params *PostArtistClaimsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artistClaims")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArtistClaimsIdRequest generates requests for GetArtistClaimsId
func NewGetArtistClaimsIdRequest(server string, id string, params *GetArtistClaimsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artistClaims/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchArtistClaimsIdRequestWithApplicationVndAPIPlusJSONBody calls the generic PatchArtistClaimsId builder with application/vnd.api+json body
func NewPatchArtistClaimsIdRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body PatchArtistClaimsIdApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchArtistClaimsIdRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewPatchArtistClaimsIdRequestWithBody generates requests for PatchArtistClaimsId with any type of body
func NewPatchArtistClaimsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artistClaims/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArtistClaimsIdRelationshipsAcceptedArtistsRequest generates requests for GetArtistClaimsIdRelationshipsAcceptedArtists
func NewGetArtistClaimsIdRelationshipsAcceptedArtistsRequest(server string, id string, params *GetArtistClaimsIdRelationshipsAcceptedArtistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artistClaims/%s/relationships/acceptedArtists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchArtistClaimsIdRelationshipsAcceptedArtistsRequestWithApplicationVndAPIPlusJSONBody calls the generic PatchArtistClaimsIdRelationshipsAcceptedArtists builder with application/vnd.api+json body
func NewPatchArtistClaimsIdRelationshipsAcceptedArtistsRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body PatchArtistClaimsIdRelationshipsAcceptedArtistsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchArtistClaimsIdRelationshipsAcceptedArtistsRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewPatchArtistClaimsIdRelationshipsAcceptedArtistsRequestWithBody generates requests for PatchArtistClaimsIdRelationshipsAcceptedArtists with any type of body
func NewPatchArtistClaimsIdRelationshipsAcceptedArtistsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artistClaims/%s/relationships/acceptedArtists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArtistClaimsIdRelationshipsOwnersRequest generates requests for GetArtistClaimsIdRelationshipsOwners
func NewGetArtistClaimsIdRelationshipsOwnersRequest(server string, id string, params *GetArtistClaimsIdRelationshipsOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artistClaims/%s/relationships/owners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistClaimsIdRelationshipsRecommendedArtistsRequest generates requests for GetArtistClaimsIdRelationshipsRecommendedArtists
func NewGetArtistClaimsIdRelationshipsRecommendedArtistsRequest(server string, id string, params *GetArtistClaimsIdRelationshipsRecommendedArtistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artistClaims/%s/relationships/recommendedArtists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistRolesRequest generates requests for GetArtistRoles
func NewGetArtistRolesRequest(server string, params *GetArtistRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artistRoles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistRolesIdRequest generates requests for GetArtistRolesId
func NewGetArtistRolesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artistRoles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsRequest generates requests for GetArtists
func NewGetArtistsRequest(server string, params *GetArtistsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterHandle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[handle]", runtime.ParamLocationQuery, *params.FilterHandle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostArtistsRequestWithApplicationVndAPIPlusJSONBody calls the generic PostArtists builder with application/vnd.api+json body
func NewPostArtistsRequestWithApplicationVndAPIPlusJSONBody(server string, body PostArtistsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostArtistsRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewPostArtistsRequestWithBody generates requests for PostArtists with any type of body
func NewPostArtistsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArtistsIdRequest generates requests for GetArtistsId
func NewGetArtistsIdRequest(server string, id string, params *GetArtistsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchArtistsIdRequestWithApplicationVndAPIPlusJSONBody calls the generic PatchArtistsId builder with application/vnd.api+json body
func NewPatchArtistsIdRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body PatchArtistsIdApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchArtistsIdRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewPatchArtistsIdRequestWithBody generates requests for PatchArtistsId with any type of body
func NewPatchArtistsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArtistsIdRelationshipsAlbumsRequest generates requests for GetArtistsIdRelationshipsAlbums
func NewGetArtistsIdRelationshipsAlbumsRequest(server string, id string, params *GetArtistsIdRelationshipsAlbumsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/albums", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsIdRelationshipsBiographyRequest generates requests for GetArtistsIdRelationshipsBiography
func NewGetArtistsIdRelationshipsBiographyRequest(server string, id string, params *GetArtistsIdRelationshipsBiographyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/biography", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsIdRelationshipsFollowersRequest generates requests for GetArtistsIdRelationshipsFollowers
func NewGetArtistsIdRelationshipsFollowersRequest(server string, id string, params *GetArtistsIdRelationshipsFollowersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/followers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ViewerContext != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewerContext", runtime.ParamLocationQuery, *params.ViewerContext); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteArtistsIdRelationshipsFollowingRequestWithApplicationVndAPIPlusJSONBody calls the generic DeleteArtistsIdRelationshipsFollowing builder with application/vnd.api+json body
func NewDeleteArtistsIdRelationshipsFollowingRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body DeleteArtistsIdRelationshipsFollowingApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteArtistsIdRelationshipsFollowingRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewDeleteArtistsIdRelationshipsFollowingRequestWithBody generates requests for DeleteArtistsIdRelationshipsFollowing with any type of body
func NewDeleteArtistsIdRelationshipsFollowingRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/following", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArtistsIdRelationshipsFollowingRequest generates requests for GetArtistsIdRelationshipsFollowing
func NewGetArtistsIdRelationshipsFollowingRequest(server string, id string, params *GetArtistsIdRelationshipsFollowingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/following", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ViewerContext != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewerContext", runtime.ParamLocationQuery, *params.ViewerContext); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostArtistsIdRelationshipsFollowingRequestWithApplicationVndAPIPlusJSONBody calls the generic PostArtistsIdRelationshipsFollowing builder with application/vnd.api+json body
func NewPostArtistsIdRelationshipsFollowingRequestWithApplicationVndAPIPlusJSONBody(server string, id string, params *PostArtistsIdRelationshipsFollowingParams, body PostArtistsIdRelationshipsFollowingApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostArtistsIdRelationshipsFollowingRequestWithBody(server, id, params, "application/vnd.api+json", bodyReader)
}

// NewPostArtistsIdRelationshipsFollowingRequestWithBody generates requests for PostArtistsIdRelationshipsFollowing with any type of body
func NewPostArtistsIdRelationshipsFollowingRequestWithBody(server string, id string, params *PostArtistsIdRelationshipsFollowingParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/following", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArtistsIdRelationshipsOwnersRequest generates requests for GetArtistsIdRelationshipsOwners
func NewGetArtistsIdRelationshipsOwnersRequest(server string, id string, params *GetArtistsIdRelationshipsOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/owners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsIdRelationshipsProfileArtRequest generates requests for GetArtistsIdRelationshipsProfileArt
func NewGetArtistsIdRelationshipsProfileArtRequest(server string, id string, params *GetArtistsIdRelationshipsProfileArtParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/profileArt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchArtistsIdRelationshipsProfileArtRequestWithApplicationVndAPIPlusJSONBody calls the generic PatchArtistsIdRelationshipsProfileArt builder with application/vnd.api+json body
func NewPatchArtistsIdRelationshipsProfileArtRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body PatchArtistsIdRelationshipsProfileArtApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchArtistsIdRelationshipsProfileArtRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewPatchArtistsIdRelationshipsProfileArtRequestWithBody generates requests for PatchArtistsIdRelationshipsProfileArt with any type of body
func NewPatchArtistsIdRelationshipsProfileArtRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/profileArt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArtistsIdRelationshipsRadioRequest generates requests for GetArtistsIdRelationshipsRadio
func NewGetArtistsIdRelationshipsRadioRequest(server string, id string, params *GetArtistsIdRelationshipsRadioParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/radio", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsIdRelationshipsRolesRequest generates requests for GetArtistsIdRelationshipsRoles
func NewGetArtistsIdRelationshipsRolesRequest(server string, id string, params *GetArtistsIdRelationshipsRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsIdRelationshipsSimilarArtistsRequest generates requests for GetArtistsIdRelationshipsSimilarArtists
func NewGetArtistsIdRelationshipsSimilarArtistsRequest(server string, id string, params *GetArtistsIdRelationshipsSimilarArtistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/similarArtists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsIdRelationshipsTrackProvidersRequest generates requests for GetArtistsIdRelationshipsTrackProviders
func NewGetArtistsIdRelationshipsTrackProvidersRequest(server string, id string, params *GetArtistsIdRelationshipsTrackProvidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/trackProviders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsIdRelationshipsTracksRequest generates requests for GetArtistsIdRelationshipsTracks
func NewGetArtistsIdRelationshipsTracksRequest(server string, id string, params *GetArtistsIdRelationshipsTracksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/tracks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collapseBy", runtime.ParamLocationQuery, params.CollapseBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtistsIdRelationshipsVideosRequest generates requests for GetArtistsIdRelationshipsVideos
func NewGetArtistsIdRelationshipsVideosRequest(server string, id string, params *GetArtistsIdRelationshipsVideosParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artists/%s/relationships/videos", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtworksRequest generates requests for GetArtworks
func NewGetArtworksRequest(server string, params *GetArtworksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artworks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostArtworksRequestWithApplicationVndAPIPlusJSONBody calls the generic PostArtworks builder with application/vnd.api+json body
func NewPostArtworksRequestWithApplicationVndAPIPlusJSONBody(server string, body PostArtworksApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostArtworksRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewPostArtworksRequestWithBody generates requests for PostArtworks with any type of body
func NewPostArtworksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artworks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArtworksIdRequest generates requests for GetArtworksId
func NewGetArtworksIdRequest(server string, id string, params *GetArtworksIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artworks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtworksIdRelationshipsOwnersRequest generates requests for GetArtworksIdRelationshipsOwners
func NewGetArtworksIdRelationshipsOwnersRequest(server string, id string, params *GetArtworksIdRelationshipsOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artworks/%s/relationships/owners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGenresRequest generates requests for GetGenres
func NewGetGenresRequest(server string, params *GetGenresParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/genres")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGenresIdRequest generates requests for GetGenresId
func NewGetGenresIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/genres/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLyricsRequest generates requests for GetLyrics
func NewGetLyricsRequest(server string, params *GetLyricsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lyrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLyricsRequestWithApplicationVndAPIPlusJSONBody calls the generic PostLyrics builder with application/vnd.api+json body
func NewPostLyricsRequestWithApplicationVndAPIPlusJSONBody(server string, body PostLyricsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLyricsRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewPostLyricsRequestWithBody generates requests for PostLyrics with any type of body
func NewPostLyricsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lyrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLyricsIdRequest generates requests for GetLyricsId
func NewGetLyricsIdRequest(server string, id string, params *GetLyricsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lyrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchLyricsIdRequestWithApplicationVndAPIPlusJSONBody calls the generic PatchLyricsId builder with application/vnd.api+json body
func NewPatchLyricsIdRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body PatchLyricsIdApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLyricsIdRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewPatchLyricsIdRequestWithBody generates requests for PatchLyricsId with any type of body
func NewPatchLyricsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lyrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLyricsIdRelationshipsOwnersRequest generates requests for GetLyricsIdRelationshipsOwners
func NewGetLyricsIdRelationshipsOwnersRequest(server string, id string, params *GetLyricsIdRelationshipsOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lyrics/%s/relationships/owners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLyricsIdRelationshipsTrackRequest generates requests for GetLyricsIdRelationshipsTrack
func NewGetLyricsIdRelationshipsTrackRequest(server string, id string, params *GetLyricsIdRelationshipsTrackParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lyrics/%s/relationships/track", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaylistsRequest generates requests for GetPlaylists
func NewGetPlaylistsRequest(server string, params *GetPlaylistsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterOwnersId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[owners.id]", runtime.ParamLocationQuery, *params.FilterOwnersId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPlaylistsRequestWithApplicationVndAPIPlusJSONBody calls the generic PostPlaylists builder with application/vnd.api+json body
func NewPostPlaylistsRequestWithApplicationVndAPIPlusJSONBody(server string, params *PostPlaylistsParams, body PostPlaylistsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPlaylistsRequestWithBody(server, params, "application/vnd.api+json", bodyReader)
}

// NewPostPlaylistsRequestWithBody generates requests for PostPlaylists with any type of body
func NewPostPlaylistsRequestWithBody(server string, params *PostPlaylistsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaylistsIdRequest generates requests for DeletePlaylistsId
func NewDeletePlaylistsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaylistsIdRequest generates requests for GetPlaylistsId
func NewGetPlaylistsIdRequest(server string, id string, params *GetPlaylistsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchPlaylistsIdRequestWithApplicationVndAPIPlusJSONBody calls the generic PatchPlaylistsId builder with application/vnd.api+json body
func NewPatchPlaylistsIdRequestWithApplicationVndAPIPlusJSONBody(server string, id string, params *PatchPlaylistsIdParams, body PatchPlaylistsIdApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPlaylistsIdRequestWithBody(server, id, params, "application/vnd.api+json", bodyReader)
}

// NewPatchPlaylistsIdRequestWithBody generates requests for PatchPlaylistsId with any type of body
func NewPatchPlaylistsIdRequestWithBody(server string, id string, params *PatchPlaylistsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlaylistsIdRelationshipsCoverArtRequest generates requests for GetPlaylistsIdRelationshipsCoverArt
func NewGetPlaylistsIdRelationshipsCoverArtRequest(server string, id string, params *GetPlaylistsIdRelationshipsCoverArtParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlists/%s/relationships/coverArt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchPlaylistsIdRelationshipsCoverArtRequestWithApplicationVndAPIPlusJSONBody calls the generic PatchPlaylistsIdRelationshipsCoverArt builder with application/vnd.api+json body
func NewPatchPlaylistsIdRelationshipsCoverArtRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body PatchPlaylistsIdRelationshipsCoverArtApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPlaylistsIdRelationshipsCoverArtRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewPatchPlaylistsIdRelationshipsCoverArtRequestWithBody generates requests for PatchPlaylistsIdRelationshipsCoverArt with any type of body
func NewPatchPlaylistsIdRelationshipsCoverArtRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlists/%s/relationships/coverArt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlaylistsIdRelationshipsItemsRequestWithApplicationVndAPIPlusJSONBody calls the generic DeletePlaylistsIdRelationshipsItems builder with application/vnd.api+json body
func NewDeletePlaylistsIdRelationshipsItemsRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body DeletePlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeletePlaylistsIdRelationshipsItemsRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewDeletePlaylistsIdRelationshipsItemsRequestWithBody generates requests for DeletePlaylistsIdRelationshipsItems with any type of body
func NewDeletePlaylistsIdRelationshipsItemsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlists/%s/relationships/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlaylistsIdRelationshipsItemsRequest generates requests for GetPlaylistsIdRelationshipsItems
func NewGetPlaylistsIdRelationshipsItemsRequest(server string, id string, params *GetPlaylistsIdRelationshipsItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlists/%s/relationships/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchPlaylistsIdRelationshipsItemsRequestWithApplicationVndAPIPlusJSONBody calls the generic PatchPlaylistsIdRelationshipsItems builder with application/vnd.api+json body
func NewPatchPlaylistsIdRelationshipsItemsRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body PatchPlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPlaylistsIdRelationshipsItemsRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewPatchPlaylistsIdRelationshipsItemsRequestWithBody generates requests for PatchPlaylistsIdRelationshipsItems with any type of body
func NewPatchPlaylistsIdRelationshipsItemsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlists/%s/relationships/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPlaylistsIdRelationshipsItemsRequestWithApplicationVndAPIPlusJSONBody calls the generic PostPlaylistsIdRelationshipsItems builder with application/vnd.api+json body
func NewPostPlaylistsIdRelationshipsItemsRequestWithApplicationVndAPIPlusJSONBody(server string, id string, params *PostPlaylistsIdRelationshipsItemsParams, body PostPlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPlaylistsIdRelationshipsItemsRequestWithBody(server, id, params, "application/vnd.api+json", bodyReader)
}

// NewPostPlaylistsIdRelationshipsItemsRequestWithBody generates requests for PostPlaylistsIdRelationshipsItems with any type of body
func NewPostPlaylistsIdRelationshipsItemsRequestWithBody(server string, id string, params *PostPlaylistsIdRelationshipsItemsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlists/%s/relationships/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlaylistsIdRelationshipsOwnersRequest generates requests for GetPlaylistsIdRelationshipsOwners
func NewGetPlaylistsIdRelationshipsOwnersRequest(server string, id string, params *GetPlaylistsIdRelationshipsOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlists/%s/relationships/owners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProvidersRequest generates requests for GetProviders
func NewGetProvidersRequest(server string, params *GetProvidersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProvidersIdRequest generates requests for GetProvidersId
func NewGetProvidersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchResultsIdRequest generates requests for GetSearchResultsId
func NewGetSearchResultsIdRequest(server string, id string, params *GetSearchResultsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchResults/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ExplicitFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "explicitFilter", runtime.ParamLocationQuery, *params.ExplicitFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchResultsIdRelationshipsAlbumsRequest generates requests for GetSearchResultsIdRelationshipsAlbums
func NewGetSearchResultsIdRelationshipsAlbumsRequest(server string, id string, params *GetSearchResultsIdRelationshipsAlbumsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchResults/%s/relationships/albums", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ExplicitFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "explicitFilter", runtime.ParamLocationQuery, *params.ExplicitFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchResultsIdRelationshipsArtistsRequest generates requests for GetSearchResultsIdRelationshipsArtists
func NewGetSearchResultsIdRelationshipsArtistsRequest(server string, id string, params *GetSearchResultsIdRelationshipsArtistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchResults/%s/relationships/artists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ExplicitFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "explicitFilter", runtime.ParamLocationQuery, *params.ExplicitFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchResultsIdRelationshipsPlaylistsRequest generates requests for GetSearchResultsIdRelationshipsPlaylists
func NewGetSearchResultsIdRelationshipsPlaylistsRequest(server string, id string, params *GetSearchResultsIdRelationshipsPlaylistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchResults/%s/relationships/playlists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ExplicitFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "explicitFilter", runtime.ParamLocationQuery, *params.ExplicitFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchResultsIdRelationshipsTopHitsRequest generates requests for GetSearchResultsIdRelationshipsTopHits
func NewGetSearchResultsIdRelationshipsTopHitsRequest(server string, id string, params *GetSearchResultsIdRelationshipsTopHitsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchResults/%s/relationships/topHits", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ExplicitFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "explicitFilter", runtime.ParamLocationQuery, *params.ExplicitFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchResultsIdRelationshipsTracksRequest generates requests for GetSearchResultsIdRelationshipsTracks
func NewGetSearchResultsIdRelationshipsTracksRequest(server string, id string, params *GetSearchResultsIdRelationshipsTracksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchResults/%s/relationships/tracks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ExplicitFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "explicitFilter", runtime.ParamLocationQuery, *params.ExplicitFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchResultsIdRelationshipsVideosRequest generates requests for GetSearchResultsIdRelationshipsVideos
func NewGetSearchResultsIdRelationshipsVideosRequest(server string, id string, params *GetSearchResultsIdRelationshipsVideosParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchResults/%s/relationships/videos", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ExplicitFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "explicitFilter", runtime.ParamLocationQuery, *params.ExplicitFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchSuggestionsIdRequest generates requests for GetSearchSuggestionsId
func NewGetSearchSuggestionsIdRequest(server string, id string, params *GetSearchSuggestionsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchSuggestions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ExplicitFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "explicitFilter", runtime.ParamLocationQuery, *params.ExplicitFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchSuggestionsIdRelationshipsDirectHitsRequest generates requests for GetSearchSuggestionsIdRelationshipsDirectHits
func NewGetSearchSuggestionsIdRelationshipsDirectHitsRequest(server string, id string, params *GetSearchSuggestionsIdRelationshipsDirectHitsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchSuggestions/%s/relationships/directHits", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ExplicitFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "explicitFilter", runtime.ParamLocationQuery, *params.ExplicitFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTrackFilesIdRequest generates requests for GetTrackFilesId
func NewGetTrackFilesIdRequest(server string, id string, params *GetTrackFilesIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trackFiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "formats", runtime.ParamLocationQuery, params.Formats); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "usage", runtime.ParamLocationQuery, params.Usage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTrackManifestsIdRequest generates requests for GetTrackManifestsId
func NewGetTrackManifestsIdRequest(server string, id string, params *GetTrackManifestsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trackManifests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "manifestType", runtime.ParamLocationQuery, params.ManifestType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "formats", runtime.ParamLocationQuery, params.Formats); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uriScheme", runtime.ParamLocationQuery, params.UriScheme); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "usage", runtime.ParamLocationQuery, params.Usage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "adaptive", runtime.ParamLocationQuery, params.Adaptive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTrackSourceFilesRequest generates requests for GetTrackSourceFiles
func NewGetTrackSourceFilesRequest(server string, params *GetTrackSourceFilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trackSourceFiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTrackSourceFilesRequestWithApplicationVndAPIPlusJSONBody calls the generic PostTrackSourceFiles builder with application/vnd.api+json body
func NewPostTrackSourceFilesRequestWithApplicationVndAPIPlusJSONBody(server string, body PostTrackSourceFilesApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTrackSourceFilesRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewPostTrackSourceFilesRequestWithBody generates requests for PostTrackSourceFiles with any type of body
func NewPostTrackSourceFilesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trackSourceFiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTrackSourceFilesIdRequest generates requests for GetTrackSourceFilesId
func NewGetTrackSourceFilesIdRequest(server string, id string, params *GetTrackSourceFilesIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trackSourceFiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTrackSourceFilesIdRelationshipsOwnersRequest generates requests for GetTrackSourceFilesIdRelationshipsOwners
func NewGetTrackSourceFilesIdRelationshipsOwnersRequest(server string, id string, params *GetTrackSourceFilesIdRelationshipsOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trackSourceFiles/%s/relationships/owners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTrackStatisticsRequest generates requests for GetTrackStatistics
func NewGetTrackStatisticsRequest(server string, params *GetTrackStatisticsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trackStatistics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTrackStatisticsIdRequest generates requests for GetTrackStatisticsId
func NewGetTrackStatisticsIdRequest(server string, id string, params *GetTrackStatisticsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trackStatistics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTrackStatisticsIdRelationshipsOwnersRequest generates requests for GetTrackStatisticsIdRelationshipsOwners
func NewGetTrackStatisticsIdRelationshipsOwnersRequest(server string, id string, params *GetTrackStatisticsIdRelationshipsOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trackStatistics/%s/relationships/owners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksRequest generates requests for GetTracks
func NewGetTracksRequest(server string, params *GetTracksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterOwnersId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[owners.id]", runtime.ParamLocationQuery, *params.FilterOwnersId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterIsrc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[isrc]", runtime.ParamLocationQuery, *params.FilterIsrc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTracksRequestWithApplicationVndAPIPlusJSONBody calls the generic PostTracks builder with application/vnd.api+json body
func NewPostTracksRequestWithApplicationVndAPIPlusJSONBody(server string, body PostTracksApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTracksRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewPostTracksRequestWithBody generates requests for PostTracks with any type of body
func NewPostTracksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTracksIdRequest generates requests for DeleteTracksId
func NewDeleteTracksIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksIdRequest generates requests for GetTracksId
func NewGetTracksIdRequest(server string, id string, params *GetTracksIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchTracksIdRequestWithApplicationVndAPIPlusJSONBody calls the generic PatchTracksId builder with application/vnd.api+json body
func NewPatchTracksIdRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body PatchTracksIdApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchTracksIdRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewPatchTracksIdRequestWithBody generates requests for PatchTracksId with any type of body
func NewPatchTracksIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTracksIdRelationshipsAlbumsRequest generates requests for GetTracksIdRelationshipsAlbums
func NewGetTracksIdRelationshipsAlbumsRequest(server string, id string, params *GetTracksIdRelationshipsAlbumsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s/relationships/albums", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksIdRelationshipsArtistsRequest generates requests for GetTracksIdRelationshipsArtists
func NewGetTracksIdRelationshipsArtistsRequest(server string, id string, params *GetTracksIdRelationshipsArtistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s/relationships/artists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksIdRelationshipsGenresRequest generates requests for GetTracksIdRelationshipsGenres
func NewGetTracksIdRelationshipsGenresRequest(server string, id string, params *GetTracksIdRelationshipsGenresParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s/relationships/genres", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksIdRelationshipsLyricsRequest generates requests for GetTracksIdRelationshipsLyrics
func NewGetTracksIdRelationshipsLyricsRequest(server string, id string, params *GetTracksIdRelationshipsLyricsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s/relationships/lyrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksIdRelationshipsOwnersRequest generates requests for GetTracksIdRelationshipsOwners
func NewGetTracksIdRelationshipsOwnersRequest(server string, id string, params *GetTracksIdRelationshipsOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s/relationships/owners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksIdRelationshipsProvidersRequest generates requests for GetTracksIdRelationshipsProviders
func NewGetTracksIdRelationshipsProvidersRequest(server string, id string, params *GetTracksIdRelationshipsProvidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s/relationships/providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksIdRelationshipsRadioRequest generates requests for GetTracksIdRelationshipsRadio
func NewGetTracksIdRelationshipsRadioRequest(server string, id string, params *GetTracksIdRelationshipsRadioParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s/relationships/radio", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksIdRelationshipsSimilarTracksRequest generates requests for GetTracksIdRelationshipsSimilarTracks
func NewGetTracksIdRelationshipsSimilarTracksRequest(server string, id string, params *GetTracksIdRelationshipsSimilarTracksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s/relationships/similarTracks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksIdRelationshipsSourceFileRequest generates requests for GetTracksIdRelationshipsSourceFile
func NewGetTracksIdRelationshipsSourceFileRequest(server string, id string, params *GetTracksIdRelationshipsSourceFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s/relationships/sourceFile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksIdRelationshipsTrackStatisticsRequest generates requests for GetTracksIdRelationshipsTrackStatistics
func NewGetTracksIdRelationshipsTrackStatisticsRequest(server string, id string, params *GetTracksIdRelationshipsTrackStatisticsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s/relationships/trackStatistics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserCollectionsIdRequest generates requests for GetUserCollectionsId
func NewGetUserCollectionsIdRequest(server string, id string, params *GetUserCollectionsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userCollections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserCollectionsIdRelationshipsAlbumsRequestWithApplicationVndAPIPlusJSONBody calls the generic DeleteUserCollectionsIdRelationshipsAlbums builder with application/vnd.api+json body
func NewDeleteUserCollectionsIdRelationshipsAlbumsRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body DeleteUserCollectionsIdRelationshipsAlbumsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUserCollectionsIdRelationshipsAlbumsRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewDeleteUserCollectionsIdRelationshipsAlbumsRequestWithBody generates requests for DeleteUserCollectionsIdRelationshipsAlbums with any type of body
func NewDeleteUserCollectionsIdRelationshipsAlbumsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userCollections/%s/relationships/albums", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserCollectionsIdRelationshipsAlbumsRequest generates requests for GetUserCollectionsIdRelationshipsAlbums
func NewGetUserCollectionsIdRelationshipsAlbumsRequest(server string, id string, params *GetUserCollectionsIdRelationshipsAlbumsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userCollections/%s/relationships/albums", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserCollectionsIdRelationshipsAlbumsRequestWithApplicationVndAPIPlusJSONBody calls the generic PostUserCollectionsIdRelationshipsAlbums builder with application/vnd.api+json body
func NewPostUserCollectionsIdRelationshipsAlbumsRequestWithApplicationVndAPIPlusJSONBody(server string, id string, params *PostUserCollectionsIdRelationshipsAlbumsParams, body PostUserCollectionsIdRelationshipsAlbumsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserCollectionsIdRelationshipsAlbumsRequestWithBody(server, id, params, "application/vnd.api+json", bodyReader)
}

// NewPostUserCollectionsIdRelationshipsAlbumsRequestWithBody generates requests for PostUserCollectionsIdRelationshipsAlbums with any type of body
func NewPostUserCollectionsIdRelationshipsAlbumsRequestWithBody(server string, id string, params *PostUserCollectionsIdRelationshipsAlbumsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userCollections/%s/relationships/albums", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserCollectionsIdRelationshipsArtistsRequestWithApplicationVndAPIPlusJSONBody calls the generic DeleteUserCollectionsIdRelationshipsArtists builder with application/vnd.api+json body
func NewDeleteUserCollectionsIdRelationshipsArtistsRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body DeleteUserCollectionsIdRelationshipsArtistsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUserCollectionsIdRelationshipsArtistsRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewDeleteUserCollectionsIdRelationshipsArtistsRequestWithBody generates requests for DeleteUserCollectionsIdRelationshipsArtists with any type of body
func NewDeleteUserCollectionsIdRelationshipsArtistsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userCollections/%s/relationships/artists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserCollectionsIdRelationshipsArtistsRequest generates requests for GetUserCollectionsIdRelationshipsArtists
func NewGetUserCollectionsIdRelationshipsArtistsRequest(server string, id string, params *GetUserCollectionsIdRelationshipsArtistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userCollections/%s/relationships/artists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserCollectionsIdRelationshipsArtistsRequestWithApplicationVndAPIPlusJSONBody calls the generic PostUserCollectionsIdRelationshipsArtists builder with application/vnd.api+json body
func NewPostUserCollectionsIdRelationshipsArtistsRequestWithApplicationVndAPIPlusJSONBody(server string, id string, params *PostUserCollectionsIdRelationshipsArtistsParams, body PostUserCollectionsIdRelationshipsArtistsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserCollectionsIdRelationshipsArtistsRequestWithBody(server, id, params, "application/vnd.api+json", bodyReader)
}

// NewPostUserCollectionsIdRelationshipsArtistsRequestWithBody generates requests for PostUserCollectionsIdRelationshipsArtists with any type of body
func NewPostUserCollectionsIdRelationshipsArtistsRequestWithBody(server string, id string, params *PostUserCollectionsIdRelationshipsArtistsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userCollections/%s/relationships/artists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserCollectionsIdRelationshipsOwnersRequest generates requests for GetUserCollectionsIdRelationshipsOwners
func NewGetUserCollectionsIdRelationshipsOwnersRequest(server string, id string, params *GetUserCollectionsIdRelationshipsOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userCollections/%s/relationships/owners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserCollectionsIdRelationshipsPlaylistsRequestWithApplicationVndAPIPlusJSONBody calls the generic DeleteUserCollectionsIdRelationshipsPlaylists builder with application/vnd.api+json body
func NewDeleteUserCollectionsIdRelationshipsPlaylistsRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body DeleteUserCollectionsIdRelationshipsPlaylistsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUserCollectionsIdRelationshipsPlaylistsRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewDeleteUserCollectionsIdRelationshipsPlaylistsRequestWithBody generates requests for DeleteUserCollectionsIdRelationshipsPlaylists with any type of body
func NewDeleteUserCollectionsIdRelationshipsPlaylistsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userCollections/%s/relationships/playlists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserCollectionsIdRelationshipsPlaylistsRequest generates requests for GetUserCollectionsIdRelationshipsPlaylists
func NewGetUserCollectionsIdRelationshipsPlaylistsRequest(server string, id string, params *GetUserCollectionsIdRelationshipsPlaylistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userCollections/%s/relationships/playlists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserCollectionsIdRelationshipsPlaylistsRequestWithApplicationVndAPIPlusJSONBody calls the generic PostUserCollectionsIdRelationshipsPlaylists builder with application/vnd.api+json body
func NewPostUserCollectionsIdRelationshipsPlaylistsRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body PostUserCollectionsIdRelationshipsPlaylistsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserCollectionsIdRelationshipsPlaylistsRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewPostUserCollectionsIdRelationshipsPlaylistsRequestWithBody generates requests for PostUserCollectionsIdRelationshipsPlaylists with any type of body
func NewPostUserCollectionsIdRelationshipsPlaylistsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userCollections/%s/relationships/playlists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserCollectionsIdRelationshipsTracksRequestWithApplicationVndAPIPlusJSONBody calls the generic DeleteUserCollectionsIdRelationshipsTracks builder with application/vnd.api+json body
func NewDeleteUserCollectionsIdRelationshipsTracksRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body DeleteUserCollectionsIdRelationshipsTracksApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUserCollectionsIdRelationshipsTracksRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewDeleteUserCollectionsIdRelationshipsTracksRequestWithBody generates requests for DeleteUserCollectionsIdRelationshipsTracks with any type of body
func NewDeleteUserCollectionsIdRelationshipsTracksRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userCollections/%s/relationships/tracks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserCollectionsIdRelationshipsTracksRequest generates requests for GetUserCollectionsIdRelationshipsTracks
func NewGetUserCollectionsIdRelationshipsTracksRequest(server string, id string, params *GetUserCollectionsIdRelationshipsTracksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userCollections/%s/relationships/tracks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserCollectionsIdRelationshipsTracksRequestWithApplicationVndAPIPlusJSONBody calls the generic PostUserCollectionsIdRelationshipsTracks builder with application/vnd.api+json body
func NewPostUserCollectionsIdRelationshipsTracksRequestWithApplicationVndAPIPlusJSONBody(server string, id string, params *PostUserCollectionsIdRelationshipsTracksParams, body PostUserCollectionsIdRelationshipsTracksApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserCollectionsIdRelationshipsTracksRequestWithBody(server, id, params, "application/vnd.api+json", bodyReader)
}

// NewPostUserCollectionsIdRelationshipsTracksRequestWithBody generates requests for PostUserCollectionsIdRelationshipsTracks with any type of body
func NewPostUserCollectionsIdRelationshipsTracksRequestWithBody(server string, id string, params *PostUserCollectionsIdRelationshipsTracksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userCollections/%s/relationships/tracks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserCollectionsIdRelationshipsVideosRequestWithApplicationVndAPIPlusJSONBody calls the generic DeleteUserCollectionsIdRelationshipsVideos builder with application/vnd.api+json body
func NewDeleteUserCollectionsIdRelationshipsVideosRequestWithApplicationVndAPIPlusJSONBody(server string, id string, body DeleteUserCollectionsIdRelationshipsVideosApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUserCollectionsIdRelationshipsVideosRequestWithBody(server, id, "application/vnd.api+json", bodyReader)
}

// NewDeleteUserCollectionsIdRelationshipsVideosRequestWithBody generates requests for DeleteUserCollectionsIdRelationshipsVideos with any type of body
func NewDeleteUserCollectionsIdRelationshipsVideosRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userCollections/%s/relationships/videos", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserCollectionsIdRelationshipsVideosRequest generates requests for GetUserCollectionsIdRelationshipsVideos
func NewGetUserCollectionsIdRelationshipsVideosRequest(server string, id string, params *GetUserCollectionsIdRelationshipsVideosParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userCollections/%s/relationships/videos", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserCollectionsIdRelationshipsVideosRequestWithApplicationVndAPIPlusJSONBody calls the generic PostUserCollectionsIdRelationshipsVideos builder with application/vnd.api+json body
func NewPostUserCollectionsIdRelationshipsVideosRequestWithApplicationVndAPIPlusJSONBody(server string, id string, params *PostUserCollectionsIdRelationshipsVideosParams, body PostUserCollectionsIdRelationshipsVideosApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserCollectionsIdRelationshipsVideosRequestWithBody(server, id, params, "application/vnd.api+json", bodyReader)
}

// NewPostUserCollectionsIdRelationshipsVideosRequestWithBody generates requests for PostUserCollectionsIdRelationshipsVideos with any type of body
func NewPostUserCollectionsIdRelationshipsVideosRequestWithBody(server string, id string, params *PostUserCollectionsIdRelationshipsVideosParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userCollections/%s/relationships/videos", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserEntitlementsIdRequest generates requests for GetUserEntitlementsId
func NewGetUserEntitlementsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userEntitlements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRecommendationsIdRequest generates requests for GetUserRecommendationsId
func NewGetUserRecommendationsIdRequest(server string, id string, params *GetUserRecommendationsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userRecommendations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRecommendationsIdRelationshipsDiscoveryMixesRequest generates requests for GetUserRecommendationsIdRelationshipsDiscoveryMixes
func NewGetUserRecommendationsIdRelationshipsDiscoveryMixesRequest(server string, id string, params *GetUserRecommendationsIdRelationshipsDiscoveryMixesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userRecommendations/%s/relationships/discoveryMixes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRecommendationsIdRelationshipsMyMixesRequest generates requests for GetUserRecommendationsIdRelationshipsMyMixes
func NewGetUserRecommendationsIdRelationshipsMyMixesRequest(server string, id string, params *GetUserRecommendationsIdRelationshipsMyMixesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userRecommendations/%s/relationships/myMixes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRecommendationsIdRelationshipsNewArrivalMixesRequest generates requests for GetUserRecommendationsIdRelationshipsNewArrivalMixes
func NewGetUserRecommendationsIdRelationshipsNewArrivalMixesRequest(server string, id string, params *GetUserRecommendationsIdRelationshipsNewArrivalMixesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userRecommendations/%s/relationships/newArrivalMixes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale", runtime.ParamLocationQuery, params.Locale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserReportsRequestWithApplicationVndAPIPlusJSONBody calls the generic PostUserReports builder with application/vnd.api+json body
func NewPostUserReportsRequestWithApplicationVndAPIPlusJSONBody(server string, body PostUserReportsApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserReportsRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewPostUserReportsRequestWithBody generates requests for PostUserReports with any type of body
func NewPostUserReportsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userReports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserSharesRequest generates requests for GetUserShares
func NewGetUserSharesRequest(server string, params *GetUserSharesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userShares")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[code]", runtime.ParamLocationQuery, *params.FilterCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserSharesRequestWithApplicationVndAPIPlusJSONBody calls the generic PostUserShares builder with application/vnd.api+json body
func NewPostUserSharesRequestWithApplicationVndAPIPlusJSONBody(server string, body PostUserSharesApplicationVndAPIPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserSharesRequestWithBody(server, "application/vnd.api+json", bodyReader)
}

// NewPostUserSharesRequestWithBody generates requests for PostUserShares with any type of body
func NewPostUserSharesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userShares")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserSharesIdRequest generates requests for GetUserSharesId
func NewGetUserSharesIdRequest(server string, id string, params *GetUserSharesIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userShares/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserSharesIdRelationshipsOwnersRequest generates requests for GetUserSharesIdRelationshipsOwners
func NewGetUserSharesIdRelationshipsOwnersRequest(server string, id string, params *GetUserSharesIdRelationshipsOwnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userShares/%s/relationships/owners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserSharesIdRelationshipsSharedResourcesRequest generates requests for GetUserSharesIdRelationshipsSharedResources
func NewGetUserSharesIdRelationshipsSharedResourcesRequest(server string, id string, params *GetUserSharesIdRelationshipsSharedResourcesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userShares/%s/relationships/sharedResources", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersMeRequest generates requests for GetUsersMe
func NewGetUsersMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVideosRequest generates requests for GetVideos
func NewGetVideosRequest(server string, params *GetVideosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/videos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterIsrc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[isrc]", runtime.ParamLocationQuery, *params.FilterIsrc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVideosIdRequest generates requests for GetVideosId
func NewGetVideosIdRequest(server string, id string, params *GetVideosIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/videos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVideosIdRelationshipsAlbumsRequest generates requests for GetVideosIdRelationshipsAlbums
func NewGetVideosIdRelationshipsAlbumsRequest(server string, id string, params *GetVideosIdRelationshipsAlbumsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/videos/%s/relationships/albums", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVideosIdRelationshipsArtistsRequest generates requests for GetVideosIdRelationshipsArtists
func NewGetVideosIdRelationshipsArtistsRequest(server string, id string, params *GetVideosIdRelationshipsArtistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/videos/%s/relationships/artists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVideosIdRelationshipsProvidersRequest generates requests for GetVideosIdRelationshipsProviders
func NewGetVideosIdRelationshipsProvidersRequest(server string, id string, params *GetVideosIdRelationshipsProvidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/videos/%s/relationships/providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVideosIdRelationshipsThumbnailArtRequest generates requests for GetVideosIdRelationshipsThumbnailArt
func NewGetVideosIdRelationshipsThumbnailArtRequest(server string, id string, params *GetVideosIdRelationshipsThumbnailArtParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/videos/%s/relationships/thumbnailArt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryCode", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAlbumsWithResponse request
	GetAlbumsWithResponse(ctx context.Context, params *GetAlbumsParams, reqEditors ...RequestEditorFn) (*GetAlbumsResponse, error)

	// PostAlbumsWithBodyWithResponse request with any body
	PostAlbumsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlbumsResponse, error)

	PostAlbumsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostAlbumsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlbumsResponse, error)

	// DeleteAlbumsIdWithResponse request
	DeleteAlbumsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAlbumsIdResponse, error)

	// GetAlbumsIdWithResponse request
	GetAlbumsIdWithResponse(ctx context.Context, id string, params *GetAlbumsIdParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdResponse, error)

	// PatchAlbumsIdWithBodyWithResponse request with any body
	PatchAlbumsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAlbumsIdResponse, error)

	PatchAlbumsIdWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchAlbumsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAlbumsIdResponse, error)

	// GetAlbumsIdRelationshipsArtistsWithResponse request
	GetAlbumsIdRelationshipsArtistsWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsArtistsResponse, error)

	// GetAlbumsIdRelationshipsCoverArtWithResponse request
	GetAlbumsIdRelationshipsCoverArtWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsCoverArtParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsCoverArtResponse, error)

	// PatchAlbumsIdRelationshipsCoverArtWithBodyWithResponse request with any body
	PatchAlbumsIdRelationshipsCoverArtWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAlbumsIdRelationshipsCoverArtResponse, error)

	PatchAlbumsIdRelationshipsCoverArtWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchAlbumsIdRelationshipsCoverArtApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAlbumsIdRelationshipsCoverArtResponse, error)

	// GetAlbumsIdRelationshipsGenresWithResponse request
	GetAlbumsIdRelationshipsGenresWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsGenresParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsGenresResponse, error)

	// GetAlbumsIdRelationshipsItemsWithResponse request
	GetAlbumsIdRelationshipsItemsWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsItemsParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsItemsResponse, error)

	// GetAlbumsIdRelationshipsOwnersWithResponse request
	GetAlbumsIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsOwnersResponse, error)

	// GetAlbumsIdRelationshipsProvidersWithResponse request
	GetAlbumsIdRelationshipsProvidersWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsProvidersResponse, error)

	// GetAlbumsIdRelationshipsSimilarAlbumsWithResponse request
	GetAlbumsIdRelationshipsSimilarAlbumsWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsSimilarAlbumsParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsSimilarAlbumsResponse, error)

	// PostAppreciationsWithBodyWithResponse request with any body
	PostAppreciationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAppreciationsResponse, error)

	PostAppreciationsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostAppreciationsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAppreciationsResponse, error)

	// GetArtistBiographiesWithResponse request
	GetArtistBiographiesWithResponse(ctx context.Context, params *GetArtistBiographiesParams, reqEditors ...RequestEditorFn) (*GetArtistBiographiesResponse, error)

	// GetArtistBiographiesIdWithResponse request
	GetArtistBiographiesIdWithResponse(ctx context.Context, id string, params *GetArtistBiographiesIdParams, reqEditors ...RequestEditorFn) (*GetArtistBiographiesIdResponse, error)

	// PatchArtistBiographiesIdWithBodyWithResponse request with any body
	PatchArtistBiographiesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchArtistBiographiesIdResponse, error)

	PatchArtistBiographiesIdWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchArtistBiographiesIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchArtistBiographiesIdResponse, error)

	// GetArtistBiographiesIdRelationshipsOwnersWithResponse request
	GetArtistBiographiesIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetArtistBiographiesIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetArtistBiographiesIdRelationshipsOwnersResponse, error)

	// PostArtistClaimsWithBodyWithResponse request with any body
	PostArtistClaimsWithBodyWithResponse(ctx context.Context, params *PostArtistClaimsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostArtistClaimsResponse, error)

	PostArtistClaimsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, params *PostArtistClaimsParams, body PostArtistClaimsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostArtistClaimsResponse, error)

	// GetArtistClaimsIdWithResponse request
	GetArtistClaimsIdWithResponse(ctx context.Context, id string, params *GetArtistClaimsIdParams, reqEditors ...RequestEditorFn) (*GetArtistClaimsIdResponse, error)

	// PatchArtistClaimsIdWithBodyWithResponse request with any body
	PatchArtistClaimsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchArtistClaimsIdResponse, error)

	PatchArtistClaimsIdWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchArtistClaimsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchArtistClaimsIdResponse, error)

	// GetArtistClaimsIdRelationshipsAcceptedArtistsWithResponse request
	GetArtistClaimsIdRelationshipsAcceptedArtistsWithResponse(ctx context.Context, id string, params *GetArtistClaimsIdRelationshipsAcceptedArtistsParams, reqEditors ...RequestEditorFn) (*GetArtistClaimsIdRelationshipsAcceptedArtistsResponse, error)

	// PatchArtistClaimsIdRelationshipsAcceptedArtistsWithBodyWithResponse request with any body
	PatchArtistClaimsIdRelationshipsAcceptedArtistsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchArtistClaimsIdRelationshipsAcceptedArtistsResponse, error)

	PatchArtistClaimsIdRelationshipsAcceptedArtistsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchArtistClaimsIdRelationshipsAcceptedArtistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchArtistClaimsIdRelationshipsAcceptedArtistsResponse, error)

	// GetArtistClaimsIdRelationshipsOwnersWithResponse request
	GetArtistClaimsIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetArtistClaimsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetArtistClaimsIdRelationshipsOwnersResponse, error)

	// GetArtistClaimsIdRelationshipsRecommendedArtistsWithResponse request
	GetArtistClaimsIdRelationshipsRecommendedArtistsWithResponse(ctx context.Context, id string, params *GetArtistClaimsIdRelationshipsRecommendedArtistsParams, reqEditors ...RequestEditorFn) (*GetArtistClaimsIdRelationshipsRecommendedArtistsResponse, error)

	// GetArtistRolesWithResponse request
	GetArtistRolesWithResponse(ctx context.Context, params *GetArtistRolesParams, reqEditors ...RequestEditorFn) (*GetArtistRolesResponse, error)

	// GetArtistRolesIdWithResponse request
	GetArtistRolesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetArtistRolesIdResponse, error)

	// GetArtistsWithResponse request
	GetArtistsWithResponse(ctx context.Context, params *GetArtistsParams, reqEditors ...RequestEditorFn) (*GetArtistsResponse, error)

	// PostArtistsWithBodyWithResponse request with any body
	PostArtistsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostArtistsResponse, error)

	PostArtistsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostArtistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostArtistsResponse, error)

	// GetArtistsIdWithResponse request
	GetArtistsIdWithResponse(ctx context.Context, id string, params *GetArtistsIdParams, reqEditors ...RequestEditorFn) (*GetArtistsIdResponse, error)

	// PatchArtistsIdWithBodyWithResponse request with any body
	PatchArtistsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchArtistsIdResponse, error)

	PatchArtistsIdWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchArtistsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchArtistsIdResponse, error)

	// GetArtistsIdRelationshipsAlbumsWithResponse request
	GetArtistsIdRelationshipsAlbumsWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsAlbumsResponse, error)

	// GetArtistsIdRelationshipsBiographyWithResponse request
	GetArtistsIdRelationshipsBiographyWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsBiographyParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsBiographyResponse, error)

	// GetArtistsIdRelationshipsFollowersWithResponse request
	GetArtistsIdRelationshipsFollowersWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsFollowersParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsFollowersResponse, error)

	// DeleteArtistsIdRelationshipsFollowingWithBodyWithResponse request with any body
	DeleteArtistsIdRelationshipsFollowingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteArtistsIdRelationshipsFollowingResponse, error)

	DeleteArtistsIdRelationshipsFollowingWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body DeleteArtistsIdRelationshipsFollowingApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteArtistsIdRelationshipsFollowingResponse, error)

	// GetArtistsIdRelationshipsFollowingWithResponse request
	GetArtistsIdRelationshipsFollowingWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsFollowingParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsFollowingResponse, error)

	// PostArtistsIdRelationshipsFollowingWithBodyWithResponse request with any body
	PostArtistsIdRelationshipsFollowingWithBodyWithResponse(ctx context.Context, id string, params *PostArtistsIdRelationshipsFollowingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostArtistsIdRelationshipsFollowingResponse, error)

	PostArtistsIdRelationshipsFollowingWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, params *PostArtistsIdRelationshipsFollowingParams, body PostArtistsIdRelationshipsFollowingApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostArtistsIdRelationshipsFollowingResponse, error)

	// GetArtistsIdRelationshipsOwnersWithResponse request
	GetArtistsIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsOwnersResponse, error)

	// GetArtistsIdRelationshipsProfileArtWithResponse request
	GetArtistsIdRelationshipsProfileArtWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsProfileArtParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsProfileArtResponse, error)

	// PatchArtistsIdRelationshipsProfileArtWithBodyWithResponse request with any body
	PatchArtistsIdRelationshipsProfileArtWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchArtistsIdRelationshipsProfileArtResponse, error)

	PatchArtistsIdRelationshipsProfileArtWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchArtistsIdRelationshipsProfileArtApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchArtistsIdRelationshipsProfileArtResponse, error)

	// GetArtistsIdRelationshipsRadioWithResponse request
	GetArtistsIdRelationshipsRadioWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsRadioParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsRadioResponse, error)

	// GetArtistsIdRelationshipsRolesWithResponse request
	GetArtistsIdRelationshipsRolesWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsRolesParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsRolesResponse, error)

	// GetArtistsIdRelationshipsSimilarArtistsWithResponse request
	GetArtistsIdRelationshipsSimilarArtistsWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsSimilarArtistsParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsSimilarArtistsResponse, error)

	// GetArtistsIdRelationshipsTrackProvidersWithResponse request
	GetArtistsIdRelationshipsTrackProvidersWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsTrackProvidersParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsTrackProvidersResponse, error)

	// GetArtistsIdRelationshipsTracksWithResponse request
	GetArtistsIdRelationshipsTracksWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsTracksParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsTracksResponse, error)

	// GetArtistsIdRelationshipsVideosWithResponse request
	GetArtistsIdRelationshipsVideosWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsVideosParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsVideosResponse, error)

	// GetArtworksWithResponse request
	GetArtworksWithResponse(ctx context.Context, params *GetArtworksParams, reqEditors ...RequestEditorFn) (*GetArtworksResponse, error)

	// PostArtworksWithBodyWithResponse request with any body
	PostArtworksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostArtworksResponse, error)

	PostArtworksWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostArtworksApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostArtworksResponse, error)

	// GetArtworksIdWithResponse request
	GetArtworksIdWithResponse(ctx context.Context, id string, params *GetArtworksIdParams, reqEditors ...RequestEditorFn) (*GetArtworksIdResponse, error)

	// GetArtworksIdRelationshipsOwnersWithResponse request
	GetArtworksIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetArtworksIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetArtworksIdRelationshipsOwnersResponse, error)

	// GetGenresWithResponse request
	GetGenresWithResponse(ctx context.Context, params *GetGenresParams, reqEditors ...RequestEditorFn) (*GetGenresResponse, error)

	// GetGenresIdWithResponse request
	GetGenresIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGenresIdResponse, error)

	// GetLyricsWithResponse request
	GetLyricsWithResponse(ctx context.Context, params *GetLyricsParams, reqEditors ...RequestEditorFn) (*GetLyricsResponse, error)

	// PostLyricsWithBodyWithResponse request with any body
	PostLyricsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLyricsResponse, error)

	PostLyricsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostLyricsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLyricsResponse, error)

	// GetLyricsIdWithResponse request
	GetLyricsIdWithResponse(ctx context.Context, id string, params *GetLyricsIdParams, reqEditors ...RequestEditorFn) (*GetLyricsIdResponse, error)

	// PatchLyricsIdWithBodyWithResponse request with any body
	PatchLyricsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLyricsIdResponse, error)

	PatchLyricsIdWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchLyricsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLyricsIdResponse, error)

	// GetLyricsIdRelationshipsOwnersWithResponse request
	GetLyricsIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetLyricsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetLyricsIdRelationshipsOwnersResponse, error)

	// GetLyricsIdRelationshipsTrackWithResponse request
	GetLyricsIdRelationshipsTrackWithResponse(ctx context.Context, id string, params *GetLyricsIdRelationshipsTrackParams, reqEditors ...RequestEditorFn) (*GetLyricsIdRelationshipsTrackResponse, error)

	// GetPlaylistsWithResponse request
	GetPlaylistsWithResponse(ctx context.Context, params *GetPlaylistsParams, reqEditors ...RequestEditorFn) (*GetPlaylistsResponse, error)

	// PostPlaylistsWithBodyWithResponse request with any body
	PostPlaylistsWithBodyWithResponse(ctx context.Context, params *PostPlaylistsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPlaylistsResponse, error)

	PostPlaylistsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, params *PostPlaylistsParams, body PostPlaylistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlaylistsResponse, error)

	// DeletePlaylistsIdWithResponse request
	DeletePlaylistsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaylistsIdResponse, error)

	// GetPlaylistsIdWithResponse request
	GetPlaylistsIdWithResponse(ctx context.Context, id string, params *GetPlaylistsIdParams, reqEditors ...RequestEditorFn) (*GetPlaylistsIdResponse, error)

	// PatchPlaylistsIdWithBodyWithResponse request with any body
	PatchPlaylistsIdWithBodyWithResponse(ctx context.Context, id string, params *PatchPlaylistsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPlaylistsIdResponse, error)

	PatchPlaylistsIdWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, params *PatchPlaylistsIdParams, body PatchPlaylistsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPlaylistsIdResponse, error)

	// GetPlaylistsIdRelationshipsCoverArtWithResponse request
	GetPlaylistsIdRelationshipsCoverArtWithResponse(ctx context.Context, id string, params *GetPlaylistsIdRelationshipsCoverArtParams, reqEditors ...RequestEditorFn) (*GetPlaylistsIdRelationshipsCoverArtResponse, error)

	// PatchPlaylistsIdRelationshipsCoverArtWithBodyWithResponse request with any body
	PatchPlaylistsIdRelationshipsCoverArtWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPlaylistsIdRelationshipsCoverArtResponse, error)

	PatchPlaylistsIdRelationshipsCoverArtWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchPlaylistsIdRelationshipsCoverArtApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPlaylistsIdRelationshipsCoverArtResponse, error)

	// DeletePlaylistsIdRelationshipsItemsWithBodyWithResponse request with any body
	DeletePlaylistsIdRelationshipsItemsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeletePlaylistsIdRelationshipsItemsResponse, error)

	DeletePlaylistsIdRelationshipsItemsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body DeletePlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeletePlaylistsIdRelationshipsItemsResponse, error)

	// GetPlaylistsIdRelationshipsItemsWithResponse request
	GetPlaylistsIdRelationshipsItemsWithResponse(ctx context.Context, id string, params *GetPlaylistsIdRelationshipsItemsParams, reqEditors ...RequestEditorFn) (*GetPlaylistsIdRelationshipsItemsResponse, error)

	// PatchPlaylistsIdRelationshipsItemsWithBodyWithResponse request with any body
	PatchPlaylistsIdRelationshipsItemsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPlaylistsIdRelationshipsItemsResponse, error)

	PatchPlaylistsIdRelationshipsItemsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchPlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPlaylistsIdRelationshipsItemsResponse, error)

	// PostPlaylistsIdRelationshipsItemsWithBodyWithResponse request with any body
	PostPlaylistsIdRelationshipsItemsWithBodyWithResponse(ctx context.Context, id string, params *PostPlaylistsIdRelationshipsItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPlaylistsIdRelationshipsItemsResponse, error)

	PostPlaylistsIdRelationshipsItemsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, params *PostPlaylistsIdRelationshipsItemsParams, body PostPlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlaylistsIdRelationshipsItemsResponse, error)

	// GetPlaylistsIdRelationshipsOwnersWithResponse request
	GetPlaylistsIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetPlaylistsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetPlaylistsIdRelationshipsOwnersResponse, error)

	// GetProvidersWithResponse request
	GetProvidersWithResponse(ctx context.Context, params *GetProvidersParams, reqEditors ...RequestEditorFn) (*GetProvidersResponse, error)

	// GetProvidersIdWithResponse request
	GetProvidersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetProvidersIdResponse, error)

	// GetSearchResultsIdWithResponse request
	GetSearchResultsIdWithResponse(ctx context.Context, id string, params *GetSearchResultsIdParams, reqEditors ...RequestEditorFn) (*GetSearchResultsIdResponse, error)

	// GetSearchResultsIdRelationshipsAlbumsWithResponse request
	GetSearchResultsIdRelationshipsAlbumsWithResponse(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*GetSearchResultsIdRelationshipsAlbumsResponse, error)

	// GetSearchResultsIdRelationshipsArtistsWithResponse request
	GetSearchResultsIdRelationshipsArtistsWithResponse(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*GetSearchResultsIdRelationshipsArtistsResponse, error)

	// GetSearchResultsIdRelationshipsPlaylistsWithResponse request
	GetSearchResultsIdRelationshipsPlaylistsWithResponse(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsPlaylistsParams, reqEditors ...RequestEditorFn) (*GetSearchResultsIdRelationshipsPlaylistsResponse, error)

	// GetSearchResultsIdRelationshipsTopHitsWithResponse request
	GetSearchResultsIdRelationshipsTopHitsWithResponse(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsTopHitsParams, reqEditors ...RequestEditorFn) (*GetSearchResultsIdRelationshipsTopHitsResponse, error)

	// GetSearchResultsIdRelationshipsTracksWithResponse request
	GetSearchResultsIdRelationshipsTracksWithResponse(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsTracksParams, reqEditors ...RequestEditorFn) (*GetSearchResultsIdRelationshipsTracksResponse, error)

	// GetSearchResultsIdRelationshipsVideosWithResponse request
	GetSearchResultsIdRelationshipsVideosWithResponse(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsVideosParams, reqEditors ...RequestEditorFn) (*GetSearchResultsIdRelationshipsVideosResponse, error)

	// GetSearchSuggestionsIdWithResponse request
	GetSearchSuggestionsIdWithResponse(ctx context.Context, id string, params *GetSearchSuggestionsIdParams, reqEditors ...RequestEditorFn) (*GetSearchSuggestionsIdResponse, error)

	// GetSearchSuggestionsIdRelationshipsDirectHitsWithResponse request
	GetSearchSuggestionsIdRelationshipsDirectHitsWithResponse(ctx context.Context, id string, params *GetSearchSuggestionsIdRelationshipsDirectHitsParams, reqEditors ...RequestEditorFn) (*GetSearchSuggestionsIdRelationshipsDirectHitsResponse, error)

	// GetTrackFilesIdWithResponse request
	GetTrackFilesIdWithResponse(ctx context.Context, id string, params *GetTrackFilesIdParams, reqEditors ...RequestEditorFn) (*GetTrackFilesIdResponse, error)

	// GetTrackManifestsIdWithResponse request
	GetTrackManifestsIdWithResponse(ctx context.Context, id string, params *GetTrackManifestsIdParams, reqEditors ...RequestEditorFn) (*GetTrackManifestsIdResponse, error)

	// GetTrackSourceFilesWithResponse request
	GetTrackSourceFilesWithResponse(ctx context.Context, params *GetTrackSourceFilesParams, reqEditors ...RequestEditorFn) (*GetTrackSourceFilesResponse, error)

	// PostTrackSourceFilesWithBodyWithResponse request with any body
	PostTrackSourceFilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTrackSourceFilesResponse, error)

	PostTrackSourceFilesWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostTrackSourceFilesApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTrackSourceFilesResponse, error)

	// GetTrackSourceFilesIdWithResponse request
	GetTrackSourceFilesIdWithResponse(ctx context.Context, id string, params *GetTrackSourceFilesIdParams, reqEditors ...RequestEditorFn) (*GetTrackSourceFilesIdResponse, error)

	// GetTrackSourceFilesIdRelationshipsOwnersWithResponse request
	GetTrackSourceFilesIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetTrackSourceFilesIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetTrackSourceFilesIdRelationshipsOwnersResponse, error)

	// GetTrackStatisticsWithResponse request
	GetTrackStatisticsWithResponse(ctx context.Context, params *GetTrackStatisticsParams, reqEditors ...RequestEditorFn) (*GetTrackStatisticsResponse, error)

	// GetTrackStatisticsIdWithResponse request
	GetTrackStatisticsIdWithResponse(ctx context.Context, id string, params *GetTrackStatisticsIdParams, reqEditors ...RequestEditorFn) (*GetTrackStatisticsIdResponse, error)

	// GetTrackStatisticsIdRelationshipsOwnersWithResponse request
	GetTrackStatisticsIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetTrackStatisticsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetTrackStatisticsIdRelationshipsOwnersResponse, error)

	// GetTracksWithResponse request
	GetTracksWithResponse(ctx context.Context, params *GetTracksParams, reqEditors ...RequestEditorFn) (*GetTracksResponse, error)

	// PostTracksWithBodyWithResponse request with any body
	PostTracksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTracksResponse, error)

	PostTracksWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostTracksApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTracksResponse, error)

	// DeleteTracksIdWithResponse request
	DeleteTracksIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTracksIdResponse, error)

	// GetTracksIdWithResponse request
	GetTracksIdWithResponse(ctx context.Context, id string, params *GetTracksIdParams, reqEditors ...RequestEditorFn) (*GetTracksIdResponse, error)

	// PatchTracksIdWithBodyWithResponse request with any body
	PatchTracksIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTracksIdResponse, error)

	PatchTracksIdWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchTracksIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTracksIdResponse, error)

	// GetTracksIdRelationshipsAlbumsWithResponse request
	GetTracksIdRelationshipsAlbumsWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsAlbumsResponse, error)

	// GetTracksIdRelationshipsArtistsWithResponse request
	GetTracksIdRelationshipsArtistsWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsArtistsResponse, error)

	// GetTracksIdRelationshipsGenresWithResponse request
	GetTracksIdRelationshipsGenresWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsGenresParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsGenresResponse, error)

	// GetTracksIdRelationshipsLyricsWithResponse request
	GetTracksIdRelationshipsLyricsWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsLyricsParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsLyricsResponse, error)

	// GetTracksIdRelationshipsOwnersWithResponse request
	GetTracksIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsOwnersResponse, error)

	// GetTracksIdRelationshipsProvidersWithResponse request
	GetTracksIdRelationshipsProvidersWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsProvidersResponse, error)

	// GetTracksIdRelationshipsRadioWithResponse request
	GetTracksIdRelationshipsRadioWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsRadioParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsRadioResponse, error)

	// GetTracksIdRelationshipsSimilarTracksWithResponse request
	GetTracksIdRelationshipsSimilarTracksWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsSimilarTracksParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsSimilarTracksResponse, error)

	// GetTracksIdRelationshipsSourceFileWithResponse request
	GetTracksIdRelationshipsSourceFileWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsSourceFileParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsSourceFileResponse, error)

	// GetTracksIdRelationshipsTrackStatisticsWithResponse request
	GetTracksIdRelationshipsTrackStatisticsWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsTrackStatisticsParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsTrackStatisticsResponse, error)

	// GetUserCollectionsIdWithResponse request
	GetUserCollectionsIdWithResponse(ctx context.Context, id string, params *GetUserCollectionsIdParams, reqEditors ...RequestEditorFn) (*GetUserCollectionsIdResponse, error)

	// DeleteUserCollectionsIdRelationshipsAlbumsWithBodyWithResponse request with any body
	DeleteUserCollectionsIdRelationshipsAlbumsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsAlbumsResponse, error)

	DeleteUserCollectionsIdRelationshipsAlbumsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsAlbumsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsAlbumsResponse, error)

	// GetUserCollectionsIdRelationshipsAlbumsWithResponse request
	GetUserCollectionsIdRelationshipsAlbumsWithResponse(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*GetUserCollectionsIdRelationshipsAlbumsResponse, error)

	// PostUserCollectionsIdRelationshipsAlbumsWithBodyWithResponse request with any body
	PostUserCollectionsIdRelationshipsAlbumsWithBodyWithResponse(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsAlbumsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsAlbumsResponse, error)

	PostUserCollectionsIdRelationshipsAlbumsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsAlbumsParams, body PostUserCollectionsIdRelationshipsAlbumsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsAlbumsResponse, error)

	// DeleteUserCollectionsIdRelationshipsArtistsWithBodyWithResponse request with any body
	DeleteUserCollectionsIdRelationshipsArtistsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsArtistsResponse, error)

	DeleteUserCollectionsIdRelationshipsArtistsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsArtistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsArtistsResponse, error)

	// GetUserCollectionsIdRelationshipsArtistsWithResponse request
	GetUserCollectionsIdRelationshipsArtistsWithResponse(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*GetUserCollectionsIdRelationshipsArtistsResponse, error)

	// PostUserCollectionsIdRelationshipsArtistsWithBodyWithResponse request with any body
	PostUserCollectionsIdRelationshipsArtistsWithBodyWithResponse(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsArtistsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsArtistsResponse, error)

	PostUserCollectionsIdRelationshipsArtistsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsArtistsParams, body PostUserCollectionsIdRelationshipsArtistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsArtistsResponse, error)

	// GetUserCollectionsIdRelationshipsOwnersWithResponse request
	GetUserCollectionsIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetUserCollectionsIdRelationshipsOwnersResponse, error)

	// DeleteUserCollectionsIdRelationshipsPlaylistsWithBodyWithResponse request with any body
	DeleteUserCollectionsIdRelationshipsPlaylistsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsPlaylistsResponse, error)

	DeleteUserCollectionsIdRelationshipsPlaylistsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsPlaylistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsPlaylistsResponse, error)

	// GetUserCollectionsIdRelationshipsPlaylistsWithResponse request
	GetUserCollectionsIdRelationshipsPlaylistsWithResponse(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsPlaylistsParams, reqEditors ...RequestEditorFn) (*GetUserCollectionsIdRelationshipsPlaylistsResponse, error)

	// PostUserCollectionsIdRelationshipsPlaylistsWithBodyWithResponse request with any body
	PostUserCollectionsIdRelationshipsPlaylistsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsPlaylistsResponse, error)

	PostUserCollectionsIdRelationshipsPlaylistsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PostUserCollectionsIdRelationshipsPlaylistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsPlaylistsResponse, error)

	// DeleteUserCollectionsIdRelationshipsTracksWithBodyWithResponse request with any body
	DeleteUserCollectionsIdRelationshipsTracksWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsTracksResponse, error)

	DeleteUserCollectionsIdRelationshipsTracksWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsTracksApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsTracksResponse, error)

	// GetUserCollectionsIdRelationshipsTracksWithResponse request
	GetUserCollectionsIdRelationshipsTracksWithResponse(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsTracksParams, reqEditors ...RequestEditorFn) (*GetUserCollectionsIdRelationshipsTracksResponse, error)

	// PostUserCollectionsIdRelationshipsTracksWithBodyWithResponse request with any body
	PostUserCollectionsIdRelationshipsTracksWithBodyWithResponse(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsTracksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsTracksResponse, error)

	PostUserCollectionsIdRelationshipsTracksWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsTracksParams, body PostUserCollectionsIdRelationshipsTracksApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsTracksResponse, error)

	// DeleteUserCollectionsIdRelationshipsVideosWithBodyWithResponse request with any body
	DeleteUserCollectionsIdRelationshipsVideosWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsVideosResponse, error)

	DeleteUserCollectionsIdRelationshipsVideosWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsVideosApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsVideosResponse, error)

	// GetUserCollectionsIdRelationshipsVideosWithResponse request
	GetUserCollectionsIdRelationshipsVideosWithResponse(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsVideosParams, reqEditors ...RequestEditorFn) (*GetUserCollectionsIdRelationshipsVideosResponse, error)

	// PostUserCollectionsIdRelationshipsVideosWithBodyWithResponse request with any body
	PostUserCollectionsIdRelationshipsVideosWithBodyWithResponse(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsVideosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsVideosResponse, error)

	PostUserCollectionsIdRelationshipsVideosWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsVideosParams, body PostUserCollectionsIdRelationshipsVideosApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsVideosResponse, error)

	// GetUserEntitlementsIdWithResponse request
	GetUserEntitlementsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetUserEntitlementsIdResponse, error)

	// GetUserRecommendationsIdWithResponse request
	GetUserRecommendationsIdWithResponse(ctx context.Context, id string, params *GetUserRecommendationsIdParams, reqEditors ...RequestEditorFn) (*GetUserRecommendationsIdResponse, error)

	// GetUserRecommendationsIdRelationshipsDiscoveryMixesWithResponse request
	GetUserRecommendationsIdRelationshipsDiscoveryMixesWithResponse(ctx context.Context, id string, params *GetUserRecommendationsIdRelationshipsDiscoveryMixesParams, reqEditors ...RequestEditorFn) (*GetUserRecommendationsIdRelationshipsDiscoveryMixesResponse, error)

	// GetUserRecommendationsIdRelationshipsMyMixesWithResponse request
	GetUserRecommendationsIdRelationshipsMyMixesWithResponse(ctx context.Context, id string, params *GetUserRecommendationsIdRelationshipsMyMixesParams, reqEditors ...RequestEditorFn) (*GetUserRecommendationsIdRelationshipsMyMixesResponse, error)

	// GetUserRecommendationsIdRelationshipsNewArrivalMixesWithResponse request
	GetUserRecommendationsIdRelationshipsNewArrivalMixesWithResponse(ctx context.Context, id string, params *GetUserRecommendationsIdRelationshipsNewArrivalMixesParams, reqEditors ...RequestEditorFn) (*GetUserRecommendationsIdRelationshipsNewArrivalMixesResponse, error)

	// PostUserReportsWithBodyWithResponse request with any body
	PostUserReportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserReportsResponse, error)

	PostUserReportsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostUserReportsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserReportsResponse, error)

	// GetUserSharesWithResponse request
	GetUserSharesWithResponse(ctx context.Context, params *GetUserSharesParams, reqEditors ...RequestEditorFn) (*GetUserSharesResponse, error)

	// PostUserSharesWithBodyWithResponse request with any body
	PostUserSharesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserSharesResponse, error)

	PostUserSharesWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostUserSharesApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserSharesResponse, error)

	// GetUserSharesIdWithResponse request
	GetUserSharesIdWithResponse(ctx context.Context, id string, params *GetUserSharesIdParams, reqEditors ...RequestEditorFn) (*GetUserSharesIdResponse, error)

	// GetUserSharesIdRelationshipsOwnersWithResponse request
	GetUserSharesIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetUserSharesIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetUserSharesIdRelationshipsOwnersResponse, error)

	// GetUserSharesIdRelationshipsSharedResourcesWithResponse request
	GetUserSharesIdRelationshipsSharedResourcesWithResponse(ctx context.Context, id string, params *GetUserSharesIdRelationshipsSharedResourcesParams, reqEditors ...RequestEditorFn) (*GetUserSharesIdRelationshipsSharedResourcesResponse, error)

	// GetUsersMeWithResponse request
	GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error)

	// GetVideosWithResponse request
	GetVideosWithResponse(ctx context.Context, params *GetVideosParams, reqEditors ...RequestEditorFn) (*GetVideosResponse, error)

	// GetVideosIdWithResponse request
	GetVideosIdWithResponse(ctx context.Context, id string, params *GetVideosIdParams, reqEditors ...RequestEditorFn) (*GetVideosIdResponse, error)

	// GetVideosIdRelationshipsAlbumsWithResponse request
	GetVideosIdRelationshipsAlbumsWithResponse(ctx context.Context, id string, params *GetVideosIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*GetVideosIdRelationshipsAlbumsResponse, error)

	// GetVideosIdRelationshipsArtistsWithResponse request
	GetVideosIdRelationshipsArtistsWithResponse(ctx context.Context, id string, params *GetVideosIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*GetVideosIdRelationshipsArtistsResponse, error)

	// GetVideosIdRelationshipsProvidersWithResponse request
	GetVideosIdRelationshipsProvidersWithResponse(ctx context.Context, id string, params *GetVideosIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*GetVideosIdRelationshipsProvidersResponse, error)

	// GetVideosIdRelationshipsThumbnailArtWithResponse request
	GetVideosIdRelationshipsThumbnailArtWithResponse(ctx context.Context, id string, params *GetVideosIdRelationshipsThumbnailArtParams, reqEditors ...RequestEditorFn) (*GetVideosIdRelationshipsThumbnailArtResponse, error)
}

type GetAlbumsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlbumsMultiResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAlbumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAlbumsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *AlbumsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostAlbumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAlbumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAlbumsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteAlbumsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAlbumsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlbumsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlbumsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAlbumsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAlbumsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchAlbumsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAlbumsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlbumsIdRelationshipsArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlbumsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAlbumsIdRelationshipsArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumsIdRelationshipsArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlbumsIdRelationshipsCoverArtResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlbumsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAlbumsIdRelationshipsCoverArtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumsIdRelationshipsCoverArtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAlbumsIdRelationshipsCoverArtResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchAlbumsIdRelationshipsCoverArtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAlbumsIdRelationshipsCoverArtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlbumsIdRelationshipsGenresResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlbumsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAlbumsIdRelationshipsGenresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumsIdRelationshipsGenresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlbumsIdRelationshipsItemsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlbumsItemsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAlbumsIdRelationshipsItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumsIdRelationshipsItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlbumsIdRelationshipsOwnersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlbumsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAlbumsIdRelationshipsOwnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumsIdRelationshipsOwnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlbumsIdRelationshipsProvidersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlbumsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAlbumsIdRelationshipsProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumsIdRelationshipsProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlbumsIdRelationshipsSimilarAlbumsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlbumsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAlbumsIdRelationshipsSimilarAlbumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumsIdRelationshipsSimilarAlbumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAppreciationsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *AppreciationsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostAppreciationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAppreciationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistBiographiesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistBiographiesMultiResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistBiographiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistBiographiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistBiographiesIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistBiographiesSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistBiographiesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistBiographiesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchArtistBiographiesIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchArtistBiographiesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchArtistBiographiesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistBiographiesIdRelationshipsOwnersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistBiographiesMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistBiographiesIdRelationshipsOwnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistBiographiesIdRelationshipsOwnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostArtistClaimsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *ArtistClaimsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostArtistClaimsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostArtistClaimsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistClaimsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistClaimsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistClaimsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistClaimsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchArtistClaimsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchArtistClaimsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchArtistClaimsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistClaimsIdRelationshipsAcceptedArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistClaimsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistClaimsIdRelationshipsAcceptedArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistClaimsIdRelationshipsAcceptedArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchArtistClaimsIdRelationshipsAcceptedArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchArtistClaimsIdRelationshipsAcceptedArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchArtistClaimsIdRelationshipsAcceptedArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistClaimsIdRelationshipsOwnersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistClaimsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistClaimsIdRelationshipsOwnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistClaimsIdRelationshipsOwnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistClaimsIdRelationshipsRecommendedArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistClaimsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistClaimsIdRelationshipsRecommendedArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistClaimsIdRelationshipsRecommendedArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistRolesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistRolesMultiResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistRolesIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistRolesSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistRolesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistRolesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsMultiResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *ArtistsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchArtistsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchArtistsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchArtistsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsAlbumsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsAlbumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsAlbumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsBiographyResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsSingleRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsBiographyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsBiographyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsFollowersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsFollowersMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsFollowersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsFollowersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteArtistsIdRelationshipsFollowingResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteArtistsIdRelationshipsFollowingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteArtistsIdRelationshipsFollowingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsFollowingResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsFollowingMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsFollowingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsFollowingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostArtistsIdRelationshipsFollowingResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostArtistsIdRelationshipsFollowingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostArtistsIdRelationshipsFollowingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsOwnersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsOwnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsOwnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsProfileArtResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsProfileArtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsProfileArtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchArtistsIdRelationshipsProfileArtResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchArtistsIdRelationshipsProfileArtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchArtistsIdRelationshipsProfileArtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsRadioResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsRadioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsRadioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsRolesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsSimilarArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsSimilarArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsSimilarArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsTrackProvidersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsTrackProvidersMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsTrackProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsTrackProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsTracksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsTracksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsTracksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtistsIdRelationshipsVideosResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtistsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtistsIdRelationshipsVideosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtistsIdRelationshipsVideosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtworksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtworksMultiResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtworksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtworksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostArtworksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *ArtworksSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostArtworksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostArtworksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtworksIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtworksSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtworksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtworksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtworksIdRelationshipsOwnersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ArtworksMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetArtworksIdRelationshipsOwnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtworksIdRelationshipsOwnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGenresResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *GenresMultiResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGenresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGenresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGenresIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *GenresSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGenresIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGenresIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLyricsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *LyricsMultiResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetLyricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLyricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLyricsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *LyricsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostLyricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLyricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLyricsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *LyricsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetLyricsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLyricsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLyricsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchLyricsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLyricsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLyricsIdRelationshipsOwnersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *LyricsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetLyricsIdRelationshipsOwnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLyricsIdRelationshipsOwnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLyricsIdRelationshipsTrackResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *LyricsSingleRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetLyricsIdRelationshipsTrackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLyricsIdRelationshipsTrackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaylistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PlaylistsMultiResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPlaylistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaylistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPlaylistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *PlaylistsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostPlaylistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPlaylistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaylistsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePlaylistsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaylistsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaylistsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PlaylistsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPlaylistsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaylistsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPlaylistsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchPlaylistsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPlaylistsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaylistsIdRelationshipsCoverArtResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PlaylistsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPlaylistsIdRelationshipsCoverArtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaylistsIdRelationshipsCoverArtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPlaylistsIdRelationshipsCoverArtResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchPlaylistsIdRelationshipsCoverArtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPlaylistsIdRelationshipsCoverArtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlaylistsIdRelationshipsItemsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePlaylistsIdRelationshipsItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlaylistsIdRelationshipsItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaylistsIdRelationshipsItemsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PlaylistsItemsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPlaylistsIdRelationshipsItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaylistsIdRelationshipsItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPlaylistsIdRelationshipsItemsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchPlaylistsIdRelationshipsItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPlaylistsIdRelationshipsItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPlaylistsIdRelationshipsItemsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostPlaylistsIdRelationshipsItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPlaylistsIdRelationshipsItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaylistsIdRelationshipsOwnersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *PlaylistsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPlaylistsIdRelationshipsOwnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaylistsIdRelationshipsOwnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProvidersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ProvidersMultiResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProvidersIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ProvidersSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProvidersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProvidersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchResultsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SearchResultsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSearchResultsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchResultsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchResultsIdRelationshipsAlbumsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SearchResultsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSearchResultsIdRelationshipsAlbumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchResultsIdRelationshipsAlbumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchResultsIdRelationshipsArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SearchResultsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSearchResultsIdRelationshipsArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchResultsIdRelationshipsArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchResultsIdRelationshipsPlaylistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SearchResultsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSearchResultsIdRelationshipsPlaylistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchResultsIdRelationshipsPlaylistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchResultsIdRelationshipsTopHitsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SearchResultsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSearchResultsIdRelationshipsTopHitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchResultsIdRelationshipsTopHitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchResultsIdRelationshipsTracksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SearchResultsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSearchResultsIdRelationshipsTracksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchResultsIdRelationshipsTracksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchResultsIdRelationshipsVideosResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SearchResultsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSearchResultsIdRelationshipsVideosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchResultsIdRelationshipsVideosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchSuggestionsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SearchSuggestionsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSearchSuggestionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchSuggestionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchSuggestionsIdRelationshipsDirectHitsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SearchSuggestionsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSearchSuggestionsIdRelationshipsDirectHitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchSuggestionsIdRelationshipsDirectHitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrackFilesIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TrackFilesSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTrackFilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrackFilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrackManifestsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TrackManifestsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTrackManifestsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrackManifestsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrackSourceFilesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TrackSourceFilesMultiResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTrackSourceFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrackSourceFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTrackSourceFilesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *TrackSourceFilesSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostTrackSourceFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTrackSourceFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrackSourceFilesIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TrackSourceFilesSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTrackSourceFilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrackSourceFilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrackSourceFilesIdRelationshipsOwnersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TrackSourceFilesMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTrackSourceFilesIdRelationshipsOwnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrackSourceFilesIdRelationshipsOwnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrackStatisticsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TrackStatisticsMultiResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTrackStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrackStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrackStatisticsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TrackStatisticsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTrackStatisticsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrackStatisticsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrackStatisticsIdRelationshipsOwnersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TrackStatisticsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTrackStatisticsIdRelationshipsOwnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrackStatisticsIdRelationshipsOwnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksMultiResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTracksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTracksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *TracksSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostTracksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTracksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTracksIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTracksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTracksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTracksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchTracksIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchTracksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchTracksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdRelationshipsAlbumsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTracksIdRelationshipsAlbumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdRelationshipsAlbumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdRelationshipsArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTracksIdRelationshipsArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdRelationshipsArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdRelationshipsGenresResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTracksIdRelationshipsGenresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdRelationshipsGenresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdRelationshipsLyricsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTracksIdRelationshipsLyricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdRelationshipsLyricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdRelationshipsOwnersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTracksIdRelationshipsOwnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdRelationshipsOwnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdRelationshipsProvidersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTracksIdRelationshipsProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdRelationshipsProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdRelationshipsRadioResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTracksIdRelationshipsRadioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdRelationshipsRadioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdRelationshipsSimilarTracksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTracksIdRelationshipsSimilarTracksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdRelationshipsSimilarTracksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdRelationshipsSourceFileResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksSingleRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTracksIdRelationshipsSourceFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdRelationshipsSourceFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdRelationshipsTrackStatisticsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TracksSingleRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTracksIdRelationshipsTrackStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdRelationshipsTrackStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserCollectionsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserCollectionsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserCollectionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserCollectionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserCollectionsIdRelationshipsAlbumsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteUserCollectionsIdRelationshipsAlbumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserCollectionsIdRelationshipsAlbumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserCollectionsIdRelationshipsAlbumsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserCollectionsAlbumsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserCollectionsIdRelationshipsAlbumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserCollectionsIdRelationshipsAlbumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserCollectionsIdRelationshipsAlbumsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostUserCollectionsIdRelationshipsAlbumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserCollectionsIdRelationshipsAlbumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserCollectionsIdRelationshipsArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteUserCollectionsIdRelationshipsArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserCollectionsIdRelationshipsArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserCollectionsIdRelationshipsArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserCollectionsArtistsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserCollectionsIdRelationshipsArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserCollectionsIdRelationshipsArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserCollectionsIdRelationshipsArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostUserCollectionsIdRelationshipsArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserCollectionsIdRelationshipsArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserCollectionsIdRelationshipsOwnersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserCollectionsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserCollectionsIdRelationshipsOwnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserCollectionsIdRelationshipsOwnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserCollectionsIdRelationshipsPlaylistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteUserCollectionsIdRelationshipsPlaylistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserCollectionsIdRelationshipsPlaylistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserCollectionsIdRelationshipsPlaylistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserCollectionsPlaylistsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserCollectionsIdRelationshipsPlaylistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserCollectionsIdRelationshipsPlaylistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserCollectionsIdRelationshipsPlaylistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostUserCollectionsIdRelationshipsPlaylistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserCollectionsIdRelationshipsPlaylistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserCollectionsIdRelationshipsTracksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteUserCollectionsIdRelationshipsTracksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserCollectionsIdRelationshipsTracksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserCollectionsIdRelationshipsTracksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserCollectionsTracksMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserCollectionsIdRelationshipsTracksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserCollectionsIdRelationshipsTracksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserCollectionsIdRelationshipsTracksResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostUserCollectionsIdRelationshipsTracksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserCollectionsIdRelationshipsTracksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserCollectionsIdRelationshipsVideosResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteUserCollectionsIdRelationshipsVideosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserCollectionsIdRelationshipsVideosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserCollectionsIdRelationshipsVideosResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserCollectionsVideosMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserCollectionsIdRelationshipsVideosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserCollectionsIdRelationshipsVideosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserCollectionsIdRelationshipsVideosResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostUserCollectionsIdRelationshipsVideosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserCollectionsIdRelationshipsVideosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserEntitlementsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserEntitlementsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserEntitlementsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserEntitlementsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRecommendationsIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserRecommendationsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserRecommendationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRecommendationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRecommendationsIdRelationshipsDiscoveryMixesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserRecommendationsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserRecommendationsIdRelationshipsDiscoveryMixesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRecommendationsIdRelationshipsDiscoveryMixesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRecommendationsIdRelationshipsMyMixesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserRecommendationsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserRecommendationsIdRelationshipsMyMixesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRecommendationsIdRelationshipsMyMixesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserRecommendationsIdRelationshipsNewArrivalMixesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserRecommendationsMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserRecommendationsIdRelationshipsNewArrivalMixesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserRecommendationsIdRelationshipsNewArrivalMixesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserReportsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *UserReportsSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostUserReportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserReportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserSharesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserSharesMultiResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserSharesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserSharesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserSharesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON201 *UserSharesSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostUserSharesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserSharesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserSharesIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserSharesSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserSharesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserSharesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserSharesIdRelationshipsOwnersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserSharesMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserSharesIdRelationshipsOwnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserSharesIdRelationshipsOwnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserSharesIdRelationshipsSharedResourcesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserSharesMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserSharesIdRelationshipsSharedResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserSharesIdRelationshipsSharedResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersMeResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UsersSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideosResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *VideosMultiResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetVideosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideosIdResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *VideosSingleResourceDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetVideosIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideosIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideosIdRelationshipsAlbumsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *VideosMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetVideosIdRelationshipsAlbumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideosIdRelationshipsAlbumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideosIdRelationshipsArtistsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *VideosMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetVideosIdRelationshipsArtistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideosIdRelationshipsArtistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideosIdRelationshipsProvidersResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *VideosMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetVideosIdRelationshipsProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideosIdRelationshipsProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideosIdRelationshipsThumbnailArtResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *VideosMultiRelationshipDataDocument
	ApplicationvndApiJSON400 *BadRequestResponse
	ApplicationvndApiJSON404 *NotFoundResponse
	ApplicationvndApiJSON405 *MethodNotAllowedResponse
	ApplicationvndApiJSON406 *NotAcceptableResponse
	ApplicationvndApiJSON415 *UnsupportedMediaTypeResponse
	ApplicationvndApiJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetVideosIdRelationshipsThumbnailArtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideosIdRelationshipsThumbnailArtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAlbumsWithResponse request returning *GetAlbumsResponse
func (c *ClientWithResponses) GetAlbumsWithResponse(ctx context.Context, params *GetAlbumsParams, reqEditors ...RequestEditorFn) (*GetAlbumsResponse, error) {
	rsp, err := c.GetAlbums(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumsResponse(rsp)
}

// PostAlbumsWithBodyWithResponse request with arbitrary body returning *PostAlbumsResponse
func (c *ClientWithResponses) PostAlbumsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlbumsResponse, error) {
	rsp, err := c.PostAlbumsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlbumsResponse(rsp)
}

func (c *ClientWithResponses) PostAlbumsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostAlbumsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlbumsResponse, error) {
	rsp, err := c.PostAlbumsWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlbumsResponse(rsp)
}

// DeleteAlbumsIdWithResponse request returning *DeleteAlbumsIdResponse
func (c *ClientWithResponses) DeleteAlbumsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAlbumsIdResponse, error) {
	rsp, err := c.DeleteAlbumsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAlbumsIdResponse(rsp)
}

// GetAlbumsIdWithResponse request returning *GetAlbumsIdResponse
func (c *ClientWithResponses) GetAlbumsIdWithResponse(ctx context.Context, id string, params *GetAlbumsIdParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdResponse, error) {
	rsp, err := c.GetAlbumsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumsIdResponse(rsp)
}

// PatchAlbumsIdWithBodyWithResponse request with arbitrary body returning *PatchAlbumsIdResponse
func (c *ClientWithResponses) PatchAlbumsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAlbumsIdResponse, error) {
	rsp, err := c.PatchAlbumsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAlbumsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchAlbumsIdWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchAlbumsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAlbumsIdResponse, error) {
	rsp, err := c.PatchAlbumsIdWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAlbumsIdResponse(rsp)
}

// GetAlbumsIdRelationshipsArtistsWithResponse request returning *GetAlbumsIdRelationshipsArtistsResponse
func (c *ClientWithResponses) GetAlbumsIdRelationshipsArtistsWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsArtistsResponse, error) {
	rsp, err := c.GetAlbumsIdRelationshipsArtists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumsIdRelationshipsArtistsResponse(rsp)
}

// GetAlbumsIdRelationshipsCoverArtWithResponse request returning *GetAlbumsIdRelationshipsCoverArtResponse
func (c *ClientWithResponses) GetAlbumsIdRelationshipsCoverArtWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsCoverArtParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsCoverArtResponse, error) {
	rsp, err := c.GetAlbumsIdRelationshipsCoverArt(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumsIdRelationshipsCoverArtResponse(rsp)
}

// PatchAlbumsIdRelationshipsCoverArtWithBodyWithResponse request with arbitrary body returning *PatchAlbumsIdRelationshipsCoverArtResponse
func (c *ClientWithResponses) PatchAlbumsIdRelationshipsCoverArtWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAlbumsIdRelationshipsCoverArtResponse, error) {
	rsp, err := c.PatchAlbumsIdRelationshipsCoverArtWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAlbumsIdRelationshipsCoverArtResponse(rsp)
}

func (c *ClientWithResponses) PatchAlbumsIdRelationshipsCoverArtWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchAlbumsIdRelationshipsCoverArtApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAlbumsIdRelationshipsCoverArtResponse, error) {
	rsp, err := c.PatchAlbumsIdRelationshipsCoverArtWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAlbumsIdRelationshipsCoverArtResponse(rsp)
}

// GetAlbumsIdRelationshipsGenresWithResponse request returning *GetAlbumsIdRelationshipsGenresResponse
func (c *ClientWithResponses) GetAlbumsIdRelationshipsGenresWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsGenresParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsGenresResponse, error) {
	rsp, err := c.GetAlbumsIdRelationshipsGenres(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumsIdRelationshipsGenresResponse(rsp)
}

// GetAlbumsIdRelationshipsItemsWithResponse request returning *GetAlbumsIdRelationshipsItemsResponse
func (c *ClientWithResponses) GetAlbumsIdRelationshipsItemsWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsItemsParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsItemsResponse, error) {
	rsp, err := c.GetAlbumsIdRelationshipsItems(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumsIdRelationshipsItemsResponse(rsp)
}

// GetAlbumsIdRelationshipsOwnersWithResponse request returning *GetAlbumsIdRelationshipsOwnersResponse
func (c *ClientWithResponses) GetAlbumsIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsOwnersResponse, error) {
	rsp, err := c.GetAlbumsIdRelationshipsOwners(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumsIdRelationshipsOwnersResponse(rsp)
}

// GetAlbumsIdRelationshipsProvidersWithResponse request returning *GetAlbumsIdRelationshipsProvidersResponse
func (c *ClientWithResponses) GetAlbumsIdRelationshipsProvidersWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsProvidersResponse, error) {
	rsp, err := c.GetAlbumsIdRelationshipsProviders(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumsIdRelationshipsProvidersResponse(rsp)
}

// GetAlbumsIdRelationshipsSimilarAlbumsWithResponse request returning *GetAlbumsIdRelationshipsSimilarAlbumsResponse
func (c *ClientWithResponses) GetAlbumsIdRelationshipsSimilarAlbumsWithResponse(ctx context.Context, id string, params *GetAlbumsIdRelationshipsSimilarAlbumsParams, reqEditors ...RequestEditorFn) (*GetAlbumsIdRelationshipsSimilarAlbumsResponse, error) {
	rsp, err := c.GetAlbumsIdRelationshipsSimilarAlbums(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumsIdRelationshipsSimilarAlbumsResponse(rsp)
}

// PostAppreciationsWithBodyWithResponse request with arbitrary body returning *PostAppreciationsResponse
func (c *ClientWithResponses) PostAppreciationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAppreciationsResponse, error) {
	rsp, err := c.PostAppreciationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAppreciationsResponse(rsp)
}

func (c *ClientWithResponses) PostAppreciationsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostAppreciationsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAppreciationsResponse, error) {
	rsp, err := c.PostAppreciationsWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAppreciationsResponse(rsp)
}

// GetArtistBiographiesWithResponse request returning *GetArtistBiographiesResponse
func (c *ClientWithResponses) GetArtistBiographiesWithResponse(ctx context.Context, params *GetArtistBiographiesParams, reqEditors ...RequestEditorFn) (*GetArtistBiographiesResponse, error) {
	rsp, err := c.GetArtistBiographies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistBiographiesResponse(rsp)
}

// GetArtistBiographiesIdWithResponse request returning *GetArtistBiographiesIdResponse
func (c *ClientWithResponses) GetArtistBiographiesIdWithResponse(ctx context.Context, id string, params *GetArtistBiographiesIdParams, reqEditors ...RequestEditorFn) (*GetArtistBiographiesIdResponse, error) {
	rsp, err := c.GetArtistBiographiesId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistBiographiesIdResponse(rsp)
}

// PatchArtistBiographiesIdWithBodyWithResponse request with arbitrary body returning *PatchArtistBiographiesIdResponse
func (c *ClientWithResponses) PatchArtistBiographiesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchArtistBiographiesIdResponse, error) {
	rsp, err := c.PatchArtistBiographiesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchArtistBiographiesIdResponse(rsp)
}

func (c *ClientWithResponses) PatchArtistBiographiesIdWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchArtistBiographiesIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchArtistBiographiesIdResponse, error) {
	rsp, err := c.PatchArtistBiographiesIdWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchArtistBiographiesIdResponse(rsp)
}

// GetArtistBiographiesIdRelationshipsOwnersWithResponse request returning *GetArtistBiographiesIdRelationshipsOwnersResponse
func (c *ClientWithResponses) GetArtistBiographiesIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetArtistBiographiesIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetArtistBiographiesIdRelationshipsOwnersResponse, error) {
	rsp, err := c.GetArtistBiographiesIdRelationshipsOwners(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistBiographiesIdRelationshipsOwnersResponse(rsp)
}

// PostArtistClaimsWithBodyWithResponse request with arbitrary body returning *PostArtistClaimsResponse
func (c *ClientWithResponses) PostArtistClaimsWithBodyWithResponse(ctx context.Context, params *PostArtistClaimsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostArtistClaimsResponse, error) {
	rsp, err := c.PostArtistClaimsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostArtistClaimsResponse(rsp)
}

func (c *ClientWithResponses) PostArtistClaimsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, params *PostArtistClaimsParams, body PostArtistClaimsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostArtistClaimsResponse, error) {
	rsp, err := c.PostArtistClaimsWithApplicationVndAPIPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostArtistClaimsResponse(rsp)
}

// GetArtistClaimsIdWithResponse request returning *GetArtistClaimsIdResponse
func (c *ClientWithResponses) GetArtistClaimsIdWithResponse(ctx context.Context, id string, params *GetArtistClaimsIdParams, reqEditors ...RequestEditorFn) (*GetArtistClaimsIdResponse, error) {
	rsp, err := c.GetArtistClaimsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistClaimsIdResponse(rsp)
}

// PatchArtistClaimsIdWithBodyWithResponse request with arbitrary body returning *PatchArtistClaimsIdResponse
func (c *ClientWithResponses) PatchArtistClaimsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchArtistClaimsIdResponse, error) {
	rsp, err := c.PatchArtistClaimsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchArtistClaimsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchArtistClaimsIdWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchArtistClaimsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchArtistClaimsIdResponse, error) {
	rsp, err := c.PatchArtistClaimsIdWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchArtistClaimsIdResponse(rsp)
}

// GetArtistClaimsIdRelationshipsAcceptedArtistsWithResponse request returning *GetArtistClaimsIdRelationshipsAcceptedArtistsResponse
func (c *ClientWithResponses) GetArtistClaimsIdRelationshipsAcceptedArtistsWithResponse(ctx context.Context, id string, params *GetArtistClaimsIdRelationshipsAcceptedArtistsParams, reqEditors ...RequestEditorFn) (*GetArtistClaimsIdRelationshipsAcceptedArtistsResponse, error) {
	rsp, err := c.GetArtistClaimsIdRelationshipsAcceptedArtists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistClaimsIdRelationshipsAcceptedArtistsResponse(rsp)
}

// PatchArtistClaimsIdRelationshipsAcceptedArtistsWithBodyWithResponse request with arbitrary body returning *PatchArtistClaimsIdRelationshipsAcceptedArtistsResponse
func (c *ClientWithResponses) PatchArtistClaimsIdRelationshipsAcceptedArtistsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchArtistClaimsIdRelationshipsAcceptedArtistsResponse, error) {
	rsp, err := c.PatchArtistClaimsIdRelationshipsAcceptedArtistsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchArtistClaimsIdRelationshipsAcceptedArtistsResponse(rsp)
}

func (c *ClientWithResponses) PatchArtistClaimsIdRelationshipsAcceptedArtistsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchArtistClaimsIdRelationshipsAcceptedArtistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchArtistClaimsIdRelationshipsAcceptedArtistsResponse, error) {
	rsp, err := c.PatchArtistClaimsIdRelationshipsAcceptedArtistsWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchArtistClaimsIdRelationshipsAcceptedArtistsResponse(rsp)
}

// GetArtistClaimsIdRelationshipsOwnersWithResponse request returning *GetArtistClaimsIdRelationshipsOwnersResponse
func (c *ClientWithResponses) GetArtistClaimsIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetArtistClaimsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetArtistClaimsIdRelationshipsOwnersResponse, error) {
	rsp, err := c.GetArtistClaimsIdRelationshipsOwners(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistClaimsIdRelationshipsOwnersResponse(rsp)
}

// GetArtistClaimsIdRelationshipsRecommendedArtistsWithResponse request returning *GetArtistClaimsIdRelationshipsRecommendedArtistsResponse
func (c *ClientWithResponses) GetArtistClaimsIdRelationshipsRecommendedArtistsWithResponse(ctx context.Context, id string, params *GetArtistClaimsIdRelationshipsRecommendedArtistsParams, reqEditors ...RequestEditorFn) (*GetArtistClaimsIdRelationshipsRecommendedArtistsResponse, error) {
	rsp, err := c.GetArtistClaimsIdRelationshipsRecommendedArtists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistClaimsIdRelationshipsRecommendedArtistsResponse(rsp)
}

// GetArtistRolesWithResponse request returning *GetArtistRolesResponse
func (c *ClientWithResponses) GetArtistRolesWithResponse(ctx context.Context, params *GetArtistRolesParams, reqEditors ...RequestEditorFn) (*GetArtistRolesResponse, error) {
	rsp, err := c.GetArtistRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistRolesResponse(rsp)
}

// GetArtistRolesIdWithResponse request returning *GetArtistRolesIdResponse
func (c *ClientWithResponses) GetArtistRolesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetArtistRolesIdResponse, error) {
	rsp, err := c.GetArtistRolesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistRolesIdResponse(rsp)
}

// GetArtistsWithResponse request returning *GetArtistsResponse
func (c *ClientWithResponses) GetArtistsWithResponse(ctx context.Context, params *GetArtistsParams, reqEditors ...RequestEditorFn) (*GetArtistsResponse, error) {
	rsp, err := c.GetArtists(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsResponse(rsp)
}

// PostArtistsWithBodyWithResponse request with arbitrary body returning *PostArtistsResponse
func (c *ClientWithResponses) PostArtistsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostArtistsResponse, error) {
	rsp, err := c.PostArtistsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostArtistsResponse(rsp)
}

func (c *ClientWithResponses) PostArtistsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostArtistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostArtistsResponse, error) {
	rsp, err := c.PostArtistsWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostArtistsResponse(rsp)
}

// GetArtistsIdWithResponse request returning *GetArtistsIdResponse
func (c *ClientWithResponses) GetArtistsIdWithResponse(ctx context.Context, id string, params *GetArtistsIdParams, reqEditors ...RequestEditorFn) (*GetArtistsIdResponse, error) {
	rsp, err := c.GetArtistsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdResponse(rsp)
}

// PatchArtistsIdWithBodyWithResponse request with arbitrary body returning *PatchArtistsIdResponse
func (c *ClientWithResponses) PatchArtistsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchArtistsIdResponse, error) {
	rsp, err := c.PatchArtistsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchArtistsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchArtistsIdWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchArtistsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchArtistsIdResponse, error) {
	rsp, err := c.PatchArtistsIdWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchArtistsIdResponse(rsp)
}

// GetArtistsIdRelationshipsAlbumsWithResponse request returning *GetArtistsIdRelationshipsAlbumsResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsAlbumsWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsAlbumsResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsAlbums(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsAlbumsResponse(rsp)
}

// GetArtistsIdRelationshipsBiographyWithResponse request returning *GetArtistsIdRelationshipsBiographyResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsBiographyWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsBiographyParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsBiographyResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsBiography(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsBiographyResponse(rsp)
}

// GetArtistsIdRelationshipsFollowersWithResponse request returning *GetArtistsIdRelationshipsFollowersResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsFollowersWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsFollowersParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsFollowersResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsFollowers(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsFollowersResponse(rsp)
}

// DeleteArtistsIdRelationshipsFollowingWithBodyWithResponse request with arbitrary body returning *DeleteArtistsIdRelationshipsFollowingResponse
func (c *ClientWithResponses) DeleteArtistsIdRelationshipsFollowingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteArtistsIdRelationshipsFollowingResponse, error) {
	rsp, err := c.DeleteArtistsIdRelationshipsFollowingWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteArtistsIdRelationshipsFollowingResponse(rsp)
}

func (c *ClientWithResponses) DeleteArtistsIdRelationshipsFollowingWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body DeleteArtistsIdRelationshipsFollowingApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteArtistsIdRelationshipsFollowingResponse, error) {
	rsp, err := c.DeleteArtistsIdRelationshipsFollowingWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteArtistsIdRelationshipsFollowingResponse(rsp)
}

// GetArtistsIdRelationshipsFollowingWithResponse request returning *GetArtistsIdRelationshipsFollowingResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsFollowingWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsFollowingParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsFollowingResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsFollowing(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsFollowingResponse(rsp)
}

// PostArtistsIdRelationshipsFollowingWithBodyWithResponse request with arbitrary body returning *PostArtistsIdRelationshipsFollowingResponse
func (c *ClientWithResponses) PostArtistsIdRelationshipsFollowingWithBodyWithResponse(ctx context.Context, id string, params *PostArtistsIdRelationshipsFollowingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostArtistsIdRelationshipsFollowingResponse, error) {
	rsp, err := c.PostArtistsIdRelationshipsFollowingWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostArtistsIdRelationshipsFollowingResponse(rsp)
}

func (c *ClientWithResponses) PostArtistsIdRelationshipsFollowingWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, params *PostArtistsIdRelationshipsFollowingParams, body PostArtistsIdRelationshipsFollowingApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostArtistsIdRelationshipsFollowingResponse, error) {
	rsp, err := c.PostArtistsIdRelationshipsFollowingWithApplicationVndAPIPlusJSONBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostArtistsIdRelationshipsFollowingResponse(rsp)
}

// GetArtistsIdRelationshipsOwnersWithResponse request returning *GetArtistsIdRelationshipsOwnersResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsOwnersResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsOwners(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsOwnersResponse(rsp)
}

// GetArtistsIdRelationshipsProfileArtWithResponse request returning *GetArtistsIdRelationshipsProfileArtResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsProfileArtWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsProfileArtParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsProfileArtResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsProfileArt(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsProfileArtResponse(rsp)
}

// PatchArtistsIdRelationshipsProfileArtWithBodyWithResponse request with arbitrary body returning *PatchArtistsIdRelationshipsProfileArtResponse
func (c *ClientWithResponses) PatchArtistsIdRelationshipsProfileArtWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchArtistsIdRelationshipsProfileArtResponse, error) {
	rsp, err := c.PatchArtistsIdRelationshipsProfileArtWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchArtistsIdRelationshipsProfileArtResponse(rsp)
}

func (c *ClientWithResponses) PatchArtistsIdRelationshipsProfileArtWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchArtistsIdRelationshipsProfileArtApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchArtistsIdRelationshipsProfileArtResponse, error) {
	rsp, err := c.PatchArtistsIdRelationshipsProfileArtWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchArtistsIdRelationshipsProfileArtResponse(rsp)
}

// GetArtistsIdRelationshipsRadioWithResponse request returning *GetArtistsIdRelationshipsRadioResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsRadioWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsRadioParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsRadioResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsRadio(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsRadioResponse(rsp)
}

// GetArtistsIdRelationshipsRolesWithResponse request returning *GetArtistsIdRelationshipsRolesResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsRolesWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsRolesParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsRolesResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsRoles(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsRolesResponse(rsp)
}

// GetArtistsIdRelationshipsSimilarArtistsWithResponse request returning *GetArtistsIdRelationshipsSimilarArtistsResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsSimilarArtistsWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsSimilarArtistsParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsSimilarArtistsResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsSimilarArtists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsSimilarArtistsResponse(rsp)
}

// GetArtistsIdRelationshipsTrackProvidersWithResponse request returning *GetArtistsIdRelationshipsTrackProvidersResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsTrackProvidersWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsTrackProvidersParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsTrackProvidersResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsTrackProviders(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsTrackProvidersResponse(rsp)
}

// GetArtistsIdRelationshipsTracksWithResponse request returning *GetArtistsIdRelationshipsTracksResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsTracksWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsTracksParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsTracksResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsTracks(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsTracksResponse(rsp)
}

// GetArtistsIdRelationshipsVideosWithResponse request returning *GetArtistsIdRelationshipsVideosResponse
func (c *ClientWithResponses) GetArtistsIdRelationshipsVideosWithResponse(ctx context.Context, id string, params *GetArtistsIdRelationshipsVideosParams, reqEditors ...RequestEditorFn) (*GetArtistsIdRelationshipsVideosResponse, error) {
	rsp, err := c.GetArtistsIdRelationshipsVideos(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtistsIdRelationshipsVideosResponse(rsp)
}

// GetArtworksWithResponse request returning *GetArtworksResponse
func (c *ClientWithResponses) GetArtworksWithResponse(ctx context.Context, params *GetArtworksParams, reqEditors ...RequestEditorFn) (*GetArtworksResponse, error) {
	rsp, err := c.GetArtworks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtworksResponse(rsp)
}

// PostArtworksWithBodyWithResponse request with arbitrary body returning *PostArtworksResponse
func (c *ClientWithResponses) PostArtworksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostArtworksResponse, error) {
	rsp, err := c.PostArtworksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostArtworksResponse(rsp)
}

func (c *ClientWithResponses) PostArtworksWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostArtworksApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostArtworksResponse, error) {
	rsp, err := c.PostArtworksWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostArtworksResponse(rsp)
}

// GetArtworksIdWithResponse request returning *GetArtworksIdResponse
func (c *ClientWithResponses) GetArtworksIdWithResponse(ctx context.Context, id string, params *GetArtworksIdParams, reqEditors ...RequestEditorFn) (*GetArtworksIdResponse, error) {
	rsp, err := c.GetArtworksId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtworksIdResponse(rsp)
}

// GetArtworksIdRelationshipsOwnersWithResponse request returning *GetArtworksIdRelationshipsOwnersResponse
func (c *ClientWithResponses) GetArtworksIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetArtworksIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetArtworksIdRelationshipsOwnersResponse, error) {
	rsp, err := c.GetArtworksIdRelationshipsOwners(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtworksIdRelationshipsOwnersResponse(rsp)
}

// GetGenresWithResponse request returning *GetGenresResponse
func (c *ClientWithResponses) GetGenresWithResponse(ctx context.Context, params *GetGenresParams, reqEditors ...RequestEditorFn) (*GetGenresResponse, error) {
	rsp, err := c.GetGenres(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGenresResponse(rsp)
}

// GetGenresIdWithResponse request returning *GetGenresIdResponse
func (c *ClientWithResponses) GetGenresIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGenresIdResponse, error) {
	rsp, err := c.GetGenresId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGenresIdResponse(rsp)
}

// GetLyricsWithResponse request returning *GetLyricsResponse
func (c *ClientWithResponses) GetLyricsWithResponse(ctx context.Context, params *GetLyricsParams, reqEditors ...RequestEditorFn) (*GetLyricsResponse, error) {
	rsp, err := c.GetLyrics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLyricsResponse(rsp)
}

// PostLyricsWithBodyWithResponse request with arbitrary body returning *PostLyricsResponse
func (c *ClientWithResponses) PostLyricsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLyricsResponse, error) {
	rsp, err := c.PostLyricsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLyricsResponse(rsp)
}

func (c *ClientWithResponses) PostLyricsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostLyricsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLyricsResponse, error) {
	rsp, err := c.PostLyricsWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLyricsResponse(rsp)
}

// GetLyricsIdWithResponse request returning *GetLyricsIdResponse
func (c *ClientWithResponses) GetLyricsIdWithResponse(ctx context.Context, id string, params *GetLyricsIdParams, reqEditors ...RequestEditorFn) (*GetLyricsIdResponse, error) {
	rsp, err := c.GetLyricsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLyricsIdResponse(rsp)
}

// PatchLyricsIdWithBodyWithResponse request with arbitrary body returning *PatchLyricsIdResponse
func (c *ClientWithResponses) PatchLyricsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLyricsIdResponse, error) {
	rsp, err := c.PatchLyricsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLyricsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchLyricsIdWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchLyricsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLyricsIdResponse, error) {
	rsp, err := c.PatchLyricsIdWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLyricsIdResponse(rsp)
}

// GetLyricsIdRelationshipsOwnersWithResponse request returning *GetLyricsIdRelationshipsOwnersResponse
func (c *ClientWithResponses) GetLyricsIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetLyricsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetLyricsIdRelationshipsOwnersResponse, error) {
	rsp, err := c.GetLyricsIdRelationshipsOwners(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLyricsIdRelationshipsOwnersResponse(rsp)
}

// GetLyricsIdRelationshipsTrackWithResponse request returning *GetLyricsIdRelationshipsTrackResponse
func (c *ClientWithResponses) GetLyricsIdRelationshipsTrackWithResponse(ctx context.Context, id string, params *GetLyricsIdRelationshipsTrackParams, reqEditors ...RequestEditorFn) (*GetLyricsIdRelationshipsTrackResponse, error) {
	rsp, err := c.GetLyricsIdRelationshipsTrack(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLyricsIdRelationshipsTrackResponse(rsp)
}

// GetPlaylistsWithResponse request returning *GetPlaylistsResponse
func (c *ClientWithResponses) GetPlaylistsWithResponse(ctx context.Context, params *GetPlaylistsParams, reqEditors ...RequestEditorFn) (*GetPlaylistsResponse, error) {
	rsp, err := c.GetPlaylists(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaylistsResponse(rsp)
}

// PostPlaylistsWithBodyWithResponse request with arbitrary body returning *PostPlaylistsResponse
func (c *ClientWithResponses) PostPlaylistsWithBodyWithResponse(ctx context.Context, params *PostPlaylistsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPlaylistsResponse, error) {
	rsp, err := c.PostPlaylistsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlaylistsResponse(rsp)
}

func (c *ClientWithResponses) PostPlaylistsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, params *PostPlaylistsParams, body PostPlaylistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlaylistsResponse, error) {
	rsp, err := c.PostPlaylistsWithApplicationVndAPIPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlaylistsResponse(rsp)
}

// DeletePlaylistsIdWithResponse request returning *DeletePlaylistsIdResponse
func (c *ClientWithResponses) DeletePlaylistsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlaylistsIdResponse, error) {
	rsp, err := c.DeletePlaylistsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaylistsIdResponse(rsp)
}

// GetPlaylistsIdWithResponse request returning *GetPlaylistsIdResponse
func (c *ClientWithResponses) GetPlaylistsIdWithResponse(ctx context.Context, id string, params *GetPlaylistsIdParams, reqEditors ...RequestEditorFn) (*GetPlaylistsIdResponse, error) {
	rsp, err := c.GetPlaylistsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaylistsIdResponse(rsp)
}

// PatchPlaylistsIdWithBodyWithResponse request with arbitrary body returning *PatchPlaylistsIdResponse
func (c *ClientWithResponses) PatchPlaylistsIdWithBodyWithResponse(ctx context.Context, id string, params *PatchPlaylistsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPlaylistsIdResponse, error) {
	rsp, err := c.PatchPlaylistsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPlaylistsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchPlaylistsIdWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, params *PatchPlaylistsIdParams, body PatchPlaylistsIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPlaylistsIdResponse, error) {
	rsp, err := c.PatchPlaylistsIdWithApplicationVndAPIPlusJSONBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPlaylistsIdResponse(rsp)
}

// GetPlaylistsIdRelationshipsCoverArtWithResponse request returning *GetPlaylistsIdRelationshipsCoverArtResponse
func (c *ClientWithResponses) GetPlaylistsIdRelationshipsCoverArtWithResponse(ctx context.Context, id string, params *GetPlaylistsIdRelationshipsCoverArtParams, reqEditors ...RequestEditorFn) (*GetPlaylistsIdRelationshipsCoverArtResponse, error) {
	rsp, err := c.GetPlaylistsIdRelationshipsCoverArt(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaylistsIdRelationshipsCoverArtResponse(rsp)
}

// PatchPlaylistsIdRelationshipsCoverArtWithBodyWithResponse request with arbitrary body returning *PatchPlaylistsIdRelationshipsCoverArtResponse
func (c *ClientWithResponses) PatchPlaylistsIdRelationshipsCoverArtWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPlaylistsIdRelationshipsCoverArtResponse, error) {
	rsp, err := c.PatchPlaylistsIdRelationshipsCoverArtWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPlaylistsIdRelationshipsCoverArtResponse(rsp)
}

func (c *ClientWithResponses) PatchPlaylistsIdRelationshipsCoverArtWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchPlaylistsIdRelationshipsCoverArtApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPlaylistsIdRelationshipsCoverArtResponse, error) {
	rsp, err := c.PatchPlaylistsIdRelationshipsCoverArtWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPlaylistsIdRelationshipsCoverArtResponse(rsp)
}

// DeletePlaylistsIdRelationshipsItemsWithBodyWithResponse request with arbitrary body returning *DeletePlaylistsIdRelationshipsItemsResponse
func (c *ClientWithResponses) DeletePlaylistsIdRelationshipsItemsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeletePlaylistsIdRelationshipsItemsResponse, error) {
	rsp, err := c.DeletePlaylistsIdRelationshipsItemsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaylistsIdRelationshipsItemsResponse(rsp)
}

func (c *ClientWithResponses) DeletePlaylistsIdRelationshipsItemsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body DeletePlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeletePlaylistsIdRelationshipsItemsResponse, error) {
	rsp, err := c.DeletePlaylistsIdRelationshipsItemsWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlaylistsIdRelationshipsItemsResponse(rsp)
}

// GetPlaylistsIdRelationshipsItemsWithResponse request returning *GetPlaylistsIdRelationshipsItemsResponse
func (c *ClientWithResponses) GetPlaylistsIdRelationshipsItemsWithResponse(ctx context.Context, id string, params *GetPlaylistsIdRelationshipsItemsParams, reqEditors ...RequestEditorFn) (*GetPlaylistsIdRelationshipsItemsResponse, error) {
	rsp, err := c.GetPlaylistsIdRelationshipsItems(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaylistsIdRelationshipsItemsResponse(rsp)
}

// PatchPlaylistsIdRelationshipsItemsWithBodyWithResponse request with arbitrary body returning *PatchPlaylistsIdRelationshipsItemsResponse
func (c *ClientWithResponses) PatchPlaylistsIdRelationshipsItemsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPlaylistsIdRelationshipsItemsResponse, error) {
	rsp, err := c.PatchPlaylistsIdRelationshipsItemsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPlaylistsIdRelationshipsItemsResponse(rsp)
}

func (c *ClientWithResponses) PatchPlaylistsIdRelationshipsItemsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchPlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPlaylistsIdRelationshipsItemsResponse, error) {
	rsp, err := c.PatchPlaylistsIdRelationshipsItemsWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPlaylistsIdRelationshipsItemsResponse(rsp)
}

// PostPlaylistsIdRelationshipsItemsWithBodyWithResponse request with arbitrary body returning *PostPlaylistsIdRelationshipsItemsResponse
func (c *ClientWithResponses) PostPlaylistsIdRelationshipsItemsWithBodyWithResponse(ctx context.Context, id string, params *PostPlaylistsIdRelationshipsItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPlaylistsIdRelationshipsItemsResponse, error) {
	rsp, err := c.PostPlaylistsIdRelationshipsItemsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlaylistsIdRelationshipsItemsResponse(rsp)
}

func (c *ClientWithResponses) PostPlaylistsIdRelationshipsItemsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, params *PostPlaylistsIdRelationshipsItemsParams, body PostPlaylistsIdRelationshipsItemsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlaylistsIdRelationshipsItemsResponse, error) {
	rsp, err := c.PostPlaylistsIdRelationshipsItemsWithApplicationVndAPIPlusJSONBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlaylistsIdRelationshipsItemsResponse(rsp)
}

// GetPlaylistsIdRelationshipsOwnersWithResponse request returning *GetPlaylistsIdRelationshipsOwnersResponse
func (c *ClientWithResponses) GetPlaylistsIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetPlaylistsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetPlaylistsIdRelationshipsOwnersResponse, error) {
	rsp, err := c.GetPlaylistsIdRelationshipsOwners(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaylistsIdRelationshipsOwnersResponse(rsp)
}

// GetProvidersWithResponse request returning *GetProvidersResponse
func (c *ClientWithResponses) GetProvidersWithResponse(ctx context.Context, params *GetProvidersParams, reqEditors ...RequestEditorFn) (*GetProvidersResponse, error) {
	rsp, err := c.GetProviders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProvidersResponse(rsp)
}

// GetProvidersIdWithResponse request returning *GetProvidersIdResponse
func (c *ClientWithResponses) GetProvidersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetProvidersIdResponse, error) {
	rsp, err := c.GetProvidersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProvidersIdResponse(rsp)
}

// GetSearchResultsIdWithResponse request returning *GetSearchResultsIdResponse
func (c *ClientWithResponses) GetSearchResultsIdWithResponse(ctx context.Context, id string, params *GetSearchResultsIdParams, reqEditors ...RequestEditorFn) (*GetSearchResultsIdResponse, error) {
	rsp, err := c.GetSearchResultsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchResultsIdResponse(rsp)
}

// GetSearchResultsIdRelationshipsAlbumsWithResponse request returning *GetSearchResultsIdRelationshipsAlbumsResponse
func (c *ClientWithResponses) GetSearchResultsIdRelationshipsAlbumsWithResponse(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*GetSearchResultsIdRelationshipsAlbumsResponse, error) {
	rsp, err := c.GetSearchResultsIdRelationshipsAlbums(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchResultsIdRelationshipsAlbumsResponse(rsp)
}

// GetSearchResultsIdRelationshipsArtistsWithResponse request returning *GetSearchResultsIdRelationshipsArtistsResponse
func (c *ClientWithResponses) GetSearchResultsIdRelationshipsArtistsWithResponse(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*GetSearchResultsIdRelationshipsArtistsResponse, error) {
	rsp, err := c.GetSearchResultsIdRelationshipsArtists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchResultsIdRelationshipsArtistsResponse(rsp)
}

// GetSearchResultsIdRelationshipsPlaylistsWithResponse request returning *GetSearchResultsIdRelationshipsPlaylistsResponse
func (c *ClientWithResponses) GetSearchResultsIdRelationshipsPlaylistsWithResponse(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsPlaylistsParams, reqEditors ...RequestEditorFn) (*GetSearchResultsIdRelationshipsPlaylistsResponse, error) {
	rsp, err := c.GetSearchResultsIdRelationshipsPlaylists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchResultsIdRelationshipsPlaylistsResponse(rsp)
}

// GetSearchResultsIdRelationshipsTopHitsWithResponse request returning *GetSearchResultsIdRelationshipsTopHitsResponse
func (c *ClientWithResponses) GetSearchResultsIdRelationshipsTopHitsWithResponse(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsTopHitsParams, reqEditors ...RequestEditorFn) (*GetSearchResultsIdRelationshipsTopHitsResponse, error) {
	rsp, err := c.GetSearchResultsIdRelationshipsTopHits(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchResultsIdRelationshipsTopHitsResponse(rsp)
}

// GetSearchResultsIdRelationshipsTracksWithResponse request returning *GetSearchResultsIdRelationshipsTracksResponse
func (c *ClientWithResponses) GetSearchResultsIdRelationshipsTracksWithResponse(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsTracksParams, reqEditors ...RequestEditorFn) (*GetSearchResultsIdRelationshipsTracksResponse, error) {
	rsp, err := c.GetSearchResultsIdRelationshipsTracks(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchResultsIdRelationshipsTracksResponse(rsp)
}

// GetSearchResultsIdRelationshipsVideosWithResponse request returning *GetSearchResultsIdRelationshipsVideosResponse
func (c *ClientWithResponses) GetSearchResultsIdRelationshipsVideosWithResponse(ctx context.Context, id string, params *GetSearchResultsIdRelationshipsVideosParams, reqEditors ...RequestEditorFn) (*GetSearchResultsIdRelationshipsVideosResponse, error) {
	rsp, err := c.GetSearchResultsIdRelationshipsVideos(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchResultsIdRelationshipsVideosResponse(rsp)
}

// GetSearchSuggestionsIdWithResponse request returning *GetSearchSuggestionsIdResponse
func (c *ClientWithResponses) GetSearchSuggestionsIdWithResponse(ctx context.Context, id string, params *GetSearchSuggestionsIdParams, reqEditors ...RequestEditorFn) (*GetSearchSuggestionsIdResponse, error) {
	rsp, err := c.GetSearchSuggestionsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchSuggestionsIdResponse(rsp)
}

// GetSearchSuggestionsIdRelationshipsDirectHitsWithResponse request returning *GetSearchSuggestionsIdRelationshipsDirectHitsResponse
func (c *ClientWithResponses) GetSearchSuggestionsIdRelationshipsDirectHitsWithResponse(ctx context.Context, id string, params *GetSearchSuggestionsIdRelationshipsDirectHitsParams, reqEditors ...RequestEditorFn) (*GetSearchSuggestionsIdRelationshipsDirectHitsResponse, error) {
	rsp, err := c.GetSearchSuggestionsIdRelationshipsDirectHits(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchSuggestionsIdRelationshipsDirectHitsResponse(rsp)
}

// GetTrackFilesIdWithResponse request returning *GetTrackFilesIdResponse
func (c *ClientWithResponses) GetTrackFilesIdWithResponse(ctx context.Context, id string, params *GetTrackFilesIdParams, reqEditors ...RequestEditorFn) (*GetTrackFilesIdResponse, error) {
	rsp, err := c.GetTrackFilesId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrackFilesIdResponse(rsp)
}

// GetTrackManifestsIdWithResponse request returning *GetTrackManifestsIdResponse
func (c *ClientWithResponses) GetTrackManifestsIdWithResponse(ctx context.Context, id string, params *GetTrackManifestsIdParams, reqEditors ...RequestEditorFn) (*GetTrackManifestsIdResponse, error) {
	rsp, err := c.GetTrackManifestsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrackManifestsIdResponse(rsp)
}

// GetTrackSourceFilesWithResponse request returning *GetTrackSourceFilesResponse
func (c *ClientWithResponses) GetTrackSourceFilesWithResponse(ctx context.Context, params *GetTrackSourceFilesParams, reqEditors ...RequestEditorFn) (*GetTrackSourceFilesResponse, error) {
	rsp, err := c.GetTrackSourceFiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrackSourceFilesResponse(rsp)
}

// PostTrackSourceFilesWithBodyWithResponse request with arbitrary body returning *PostTrackSourceFilesResponse
func (c *ClientWithResponses) PostTrackSourceFilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTrackSourceFilesResponse, error) {
	rsp, err := c.PostTrackSourceFilesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTrackSourceFilesResponse(rsp)
}

func (c *ClientWithResponses) PostTrackSourceFilesWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostTrackSourceFilesApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTrackSourceFilesResponse, error) {
	rsp, err := c.PostTrackSourceFilesWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTrackSourceFilesResponse(rsp)
}

// GetTrackSourceFilesIdWithResponse request returning *GetTrackSourceFilesIdResponse
func (c *ClientWithResponses) GetTrackSourceFilesIdWithResponse(ctx context.Context, id string, params *GetTrackSourceFilesIdParams, reqEditors ...RequestEditorFn) (*GetTrackSourceFilesIdResponse, error) {
	rsp, err := c.GetTrackSourceFilesId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrackSourceFilesIdResponse(rsp)
}

// GetTrackSourceFilesIdRelationshipsOwnersWithResponse request returning *GetTrackSourceFilesIdRelationshipsOwnersResponse
func (c *ClientWithResponses) GetTrackSourceFilesIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetTrackSourceFilesIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetTrackSourceFilesIdRelationshipsOwnersResponse, error) {
	rsp, err := c.GetTrackSourceFilesIdRelationshipsOwners(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrackSourceFilesIdRelationshipsOwnersResponse(rsp)
}

// GetTrackStatisticsWithResponse request returning *GetTrackStatisticsResponse
func (c *ClientWithResponses) GetTrackStatisticsWithResponse(ctx context.Context, params *GetTrackStatisticsParams, reqEditors ...RequestEditorFn) (*GetTrackStatisticsResponse, error) {
	rsp, err := c.GetTrackStatistics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrackStatisticsResponse(rsp)
}

// GetTrackStatisticsIdWithResponse request returning *GetTrackStatisticsIdResponse
func (c *ClientWithResponses) GetTrackStatisticsIdWithResponse(ctx context.Context, id string, params *GetTrackStatisticsIdParams, reqEditors ...RequestEditorFn) (*GetTrackStatisticsIdResponse, error) {
	rsp, err := c.GetTrackStatisticsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrackStatisticsIdResponse(rsp)
}

// GetTrackStatisticsIdRelationshipsOwnersWithResponse request returning *GetTrackStatisticsIdRelationshipsOwnersResponse
func (c *ClientWithResponses) GetTrackStatisticsIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetTrackStatisticsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetTrackStatisticsIdRelationshipsOwnersResponse, error) {
	rsp, err := c.GetTrackStatisticsIdRelationshipsOwners(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrackStatisticsIdRelationshipsOwnersResponse(rsp)
}

// GetTracksWithResponse request returning *GetTracksResponse
func (c *ClientWithResponses) GetTracksWithResponse(ctx context.Context, params *GetTracksParams, reqEditors ...RequestEditorFn) (*GetTracksResponse, error) {
	rsp, err := c.GetTracks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksResponse(rsp)
}

// PostTracksWithBodyWithResponse request with arbitrary body returning *PostTracksResponse
func (c *ClientWithResponses) PostTracksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTracksResponse, error) {
	rsp, err := c.PostTracksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTracksResponse(rsp)
}

func (c *ClientWithResponses) PostTracksWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostTracksApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTracksResponse, error) {
	rsp, err := c.PostTracksWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTracksResponse(rsp)
}

// DeleteTracksIdWithResponse request returning *DeleteTracksIdResponse
func (c *ClientWithResponses) DeleteTracksIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTracksIdResponse, error) {
	rsp, err := c.DeleteTracksId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTracksIdResponse(rsp)
}

// GetTracksIdWithResponse request returning *GetTracksIdResponse
func (c *ClientWithResponses) GetTracksIdWithResponse(ctx context.Context, id string, params *GetTracksIdParams, reqEditors ...RequestEditorFn) (*GetTracksIdResponse, error) {
	rsp, err := c.GetTracksId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdResponse(rsp)
}

// PatchTracksIdWithBodyWithResponse request with arbitrary body returning *PatchTracksIdResponse
func (c *ClientWithResponses) PatchTracksIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTracksIdResponse, error) {
	rsp, err := c.PatchTracksIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTracksIdResponse(rsp)
}

func (c *ClientWithResponses) PatchTracksIdWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PatchTracksIdApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTracksIdResponse, error) {
	rsp, err := c.PatchTracksIdWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTracksIdResponse(rsp)
}

// GetTracksIdRelationshipsAlbumsWithResponse request returning *GetTracksIdRelationshipsAlbumsResponse
func (c *ClientWithResponses) GetTracksIdRelationshipsAlbumsWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsAlbumsResponse, error) {
	rsp, err := c.GetTracksIdRelationshipsAlbums(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdRelationshipsAlbumsResponse(rsp)
}

// GetTracksIdRelationshipsArtistsWithResponse request returning *GetTracksIdRelationshipsArtistsResponse
func (c *ClientWithResponses) GetTracksIdRelationshipsArtistsWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsArtistsResponse, error) {
	rsp, err := c.GetTracksIdRelationshipsArtists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdRelationshipsArtistsResponse(rsp)
}

// GetTracksIdRelationshipsGenresWithResponse request returning *GetTracksIdRelationshipsGenresResponse
func (c *ClientWithResponses) GetTracksIdRelationshipsGenresWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsGenresParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsGenresResponse, error) {
	rsp, err := c.GetTracksIdRelationshipsGenres(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdRelationshipsGenresResponse(rsp)
}

// GetTracksIdRelationshipsLyricsWithResponse request returning *GetTracksIdRelationshipsLyricsResponse
func (c *ClientWithResponses) GetTracksIdRelationshipsLyricsWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsLyricsParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsLyricsResponse, error) {
	rsp, err := c.GetTracksIdRelationshipsLyrics(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdRelationshipsLyricsResponse(rsp)
}

// GetTracksIdRelationshipsOwnersWithResponse request returning *GetTracksIdRelationshipsOwnersResponse
func (c *ClientWithResponses) GetTracksIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsOwnersResponse, error) {
	rsp, err := c.GetTracksIdRelationshipsOwners(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdRelationshipsOwnersResponse(rsp)
}

// GetTracksIdRelationshipsProvidersWithResponse request returning *GetTracksIdRelationshipsProvidersResponse
func (c *ClientWithResponses) GetTracksIdRelationshipsProvidersWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsProvidersResponse, error) {
	rsp, err := c.GetTracksIdRelationshipsProviders(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdRelationshipsProvidersResponse(rsp)
}

// GetTracksIdRelationshipsRadioWithResponse request returning *GetTracksIdRelationshipsRadioResponse
func (c *ClientWithResponses) GetTracksIdRelationshipsRadioWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsRadioParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsRadioResponse, error) {
	rsp, err := c.GetTracksIdRelationshipsRadio(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdRelationshipsRadioResponse(rsp)
}

// GetTracksIdRelationshipsSimilarTracksWithResponse request returning *GetTracksIdRelationshipsSimilarTracksResponse
func (c *ClientWithResponses) GetTracksIdRelationshipsSimilarTracksWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsSimilarTracksParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsSimilarTracksResponse, error) {
	rsp, err := c.GetTracksIdRelationshipsSimilarTracks(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdRelationshipsSimilarTracksResponse(rsp)
}

// GetTracksIdRelationshipsSourceFileWithResponse request returning *GetTracksIdRelationshipsSourceFileResponse
func (c *ClientWithResponses) GetTracksIdRelationshipsSourceFileWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsSourceFileParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsSourceFileResponse, error) {
	rsp, err := c.GetTracksIdRelationshipsSourceFile(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdRelationshipsSourceFileResponse(rsp)
}

// GetTracksIdRelationshipsTrackStatisticsWithResponse request returning *GetTracksIdRelationshipsTrackStatisticsResponse
func (c *ClientWithResponses) GetTracksIdRelationshipsTrackStatisticsWithResponse(ctx context.Context, id string, params *GetTracksIdRelationshipsTrackStatisticsParams, reqEditors ...RequestEditorFn) (*GetTracksIdRelationshipsTrackStatisticsResponse, error) {
	rsp, err := c.GetTracksIdRelationshipsTrackStatistics(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdRelationshipsTrackStatisticsResponse(rsp)
}

// GetUserCollectionsIdWithResponse request returning *GetUserCollectionsIdResponse
func (c *ClientWithResponses) GetUserCollectionsIdWithResponse(ctx context.Context, id string, params *GetUserCollectionsIdParams, reqEditors ...RequestEditorFn) (*GetUserCollectionsIdResponse, error) {
	rsp, err := c.GetUserCollectionsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserCollectionsIdResponse(rsp)
}

// DeleteUserCollectionsIdRelationshipsAlbumsWithBodyWithResponse request with arbitrary body returning *DeleteUserCollectionsIdRelationshipsAlbumsResponse
func (c *ClientWithResponses) DeleteUserCollectionsIdRelationshipsAlbumsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsAlbumsResponse, error) {
	rsp, err := c.DeleteUserCollectionsIdRelationshipsAlbumsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserCollectionsIdRelationshipsAlbumsResponse(rsp)
}

func (c *ClientWithResponses) DeleteUserCollectionsIdRelationshipsAlbumsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsAlbumsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsAlbumsResponse, error) {
	rsp, err := c.DeleteUserCollectionsIdRelationshipsAlbumsWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserCollectionsIdRelationshipsAlbumsResponse(rsp)
}

// GetUserCollectionsIdRelationshipsAlbumsWithResponse request returning *GetUserCollectionsIdRelationshipsAlbumsResponse
func (c *ClientWithResponses) GetUserCollectionsIdRelationshipsAlbumsWithResponse(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*GetUserCollectionsIdRelationshipsAlbumsResponse, error) {
	rsp, err := c.GetUserCollectionsIdRelationshipsAlbums(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserCollectionsIdRelationshipsAlbumsResponse(rsp)
}

// PostUserCollectionsIdRelationshipsAlbumsWithBodyWithResponse request with arbitrary body returning *PostUserCollectionsIdRelationshipsAlbumsResponse
func (c *ClientWithResponses) PostUserCollectionsIdRelationshipsAlbumsWithBodyWithResponse(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsAlbumsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsAlbumsResponse, error) {
	rsp, err := c.PostUserCollectionsIdRelationshipsAlbumsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserCollectionsIdRelationshipsAlbumsResponse(rsp)
}

func (c *ClientWithResponses) PostUserCollectionsIdRelationshipsAlbumsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsAlbumsParams, body PostUserCollectionsIdRelationshipsAlbumsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsAlbumsResponse, error) {
	rsp, err := c.PostUserCollectionsIdRelationshipsAlbumsWithApplicationVndAPIPlusJSONBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserCollectionsIdRelationshipsAlbumsResponse(rsp)
}

// DeleteUserCollectionsIdRelationshipsArtistsWithBodyWithResponse request with arbitrary body returning *DeleteUserCollectionsIdRelationshipsArtistsResponse
func (c *ClientWithResponses) DeleteUserCollectionsIdRelationshipsArtistsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsArtistsResponse, error) {
	rsp, err := c.DeleteUserCollectionsIdRelationshipsArtistsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserCollectionsIdRelationshipsArtistsResponse(rsp)
}

func (c *ClientWithResponses) DeleteUserCollectionsIdRelationshipsArtistsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsArtistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsArtistsResponse, error) {
	rsp, err := c.DeleteUserCollectionsIdRelationshipsArtistsWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserCollectionsIdRelationshipsArtistsResponse(rsp)
}

// GetUserCollectionsIdRelationshipsArtistsWithResponse request returning *GetUserCollectionsIdRelationshipsArtistsResponse
func (c *ClientWithResponses) GetUserCollectionsIdRelationshipsArtistsWithResponse(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*GetUserCollectionsIdRelationshipsArtistsResponse, error) {
	rsp, err := c.GetUserCollectionsIdRelationshipsArtists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserCollectionsIdRelationshipsArtistsResponse(rsp)
}

// PostUserCollectionsIdRelationshipsArtistsWithBodyWithResponse request with arbitrary body returning *PostUserCollectionsIdRelationshipsArtistsResponse
func (c *ClientWithResponses) PostUserCollectionsIdRelationshipsArtistsWithBodyWithResponse(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsArtistsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsArtistsResponse, error) {
	rsp, err := c.PostUserCollectionsIdRelationshipsArtistsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserCollectionsIdRelationshipsArtistsResponse(rsp)
}

func (c *ClientWithResponses) PostUserCollectionsIdRelationshipsArtistsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsArtistsParams, body PostUserCollectionsIdRelationshipsArtistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsArtistsResponse, error) {
	rsp, err := c.PostUserCollectionsIdRelationshipsArtistsWithApplicationVndAPIPlusJSONBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserCollectionsIdRelationshipsArtistsResponse(rsp)
}

// GetUserCollectionsIdRelationshipsOwnersWithResponse request returning *GetUserCollectionsIdRelationshipsOwnersResponse
func (c *ClientWithResponses) GetUserCollectionsIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetUserCollectionsIdRelationshipsOwnersResponse, error) {
	rsp, err := c.GetUserCollectionsIdRelationshipsOwners(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserCollectionsIdRelationshipsOwnersResponse(rsp)
}

// DeleteUserCollectionsIdRelationshipsPlaylistsWithBodyWithResponse request with arbitrary body returning *DeleteUserCollectionsIdRelationshipsPlaylistsResponse
func (c *ClientWithResponses) DeleteUserCollectionsIdRelationshipsPlaylistsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsPlaylistsResponse, error) {
	rsp, err := c.DeleteUserCollectionsIdRelationshipsPlaylistsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserCollectionsIdRelationshipsPlaylistsResponse(rsp)
}

func (c *ClientWithResponses) DeleteUserCollectionsIdRelationshipsPlaylistsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsPlaylistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsPlaylistsResponse, error) {
	rsp, err := c.DeleteUserCollectionsIdRelationshipsPlaylistsWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserCollectionsIdRelationshipsPlaylistsResponse(rsp)
}

// GetUserCollectionsIdRelationshipsPlaylistsWithResponse request returning *GetUserCollectionsIdRelationshipsPlaylistsResponse
func (c *ClientWithResponses) GetUserCollectionsIdRelationshipsPlaylistsWithResponse(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsPlaylistsParams, reqEditors ...RequestEditorFn) (*GetUserCollectionsIdRelationshipsPlaylistsResponse, error) {
	rsp, err := c.GetUserCollectionsIdRelationshipsPlaylists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserCollectionsIdRelationshipsPlaylistsResponse(rsp)
}

// PostUserCollectionsIdRelationshipsPlaylistsWithBodyWithResponse request with arbitrary body returning *PostUserCollectionsIdRelationshipsPlaylistsResponse
func (c *ClientWithResponses) PostUserCollectionsIdRelationshipsPlaylistsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsPlaylistsResponse, error) {
	rsp, err := c.PostUserCollectionsIdRelationshipsPlaylistsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserCollectionsIdRelationshipsPlaylistsResponse(rsp)
}

func (c *ClientWithResponses) PostUserCollectionsIdRelationshipsPlaylistsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body PostUserCollectionsIdRelationshipsPlaylistsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsPlaylistsResponse, error) {
	rsp, err := c.PostUserCollectionsIdRelationshipsPlaylistsWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserCollectionsIdRelationshipsPlaylistsResponse(rsp)
}

// DeleteUserCollectionsIdRelationshipsTracksWithBodyWithResponse request with arbitrary body returning *DeleteUserCollectionsIdRelationshipsTracksResponse
func (c *ClientWithResponses) DeleteUserCollectionsIdRelationshipsTracksWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsTracksResponse, error) {
	rsp, err := c.DeleteUserCollectionsIdRelationshipsTracksWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserCollectionsIdRelationshipsTracksResponse(rsp)
}

func (c *ClientWithResponses) DeleteUserCollectionsIdRelationshipsTracksWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsTracksApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsTracksResponse, error) {
	rsp, err := c.DeleteUserCollectionsIdRelationshipsTracksWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserCollectionsIdRelationshipsTracksResponse(rsp)
}

// GetUserCollectionsIdRelationshipsTracksWithResponse request returning *GetUserCollectionsIdRelationshipsTracksResponse
func (c *ClientWithResponses) GetUserCollectionsIdRelationshipsTracksWithResponse(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsTracksParams, reqEditors ...RequestEditorFn) (*GetUserCollectionsIdRelationshipsTracksResponse, error) {
	rsp, err := c.GetUserCollectionsIdRelationshipsTracks(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserCollectionsIdRelationshipsTracksResponse(rsp)
}

// PostUserCollectionsIdRelationshipsTracksWithBodyWithResponse request with arbitrary body returning *PostUserCollectionsIdRelationshipsTracksResponse
func (c *ClientWithResponses) PostUserCollectionsIdRelationshipsTracksWithBodyWithResponse(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsTracksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsTracksResponse, error) {
	rsp, err := c.PostUserCollectionsIdRelationshipsTracksWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserCollectionsIdRelationshipsTracksResponse(rsp)
}

func (c *ClientWithResponses) PostUserCollectionsIdRelationshipsTracksWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsTracksParams, body PostUserCollectionsIdRelationshipsTracksApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsTracksResponse, error) {
	rsp, err := c.PostUserCollectionsIdRelationshipsTracksWithApplicationVndAPIPlusJSONBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserCollectionsIdRelationshipsTracksResponse(rsp)
}

// DeleteUserCollectionsIdRelationshipsVideosWithBodyWithResponse request with arbitrary body returning *DeleteUserCollectionsIdRelationshipsVideosResponse
func (c *ClientWithResponses) DeleteUserCollectionsIdRelationshipsVideosWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsVideosResponse, error) {
	rsp, err := c.DeleteUserCollectionsIdRelationshipsVideosWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserCollectionsIdRelationshipsVideosResponse(rsp)
}

func (c *ClientWithResponses) DeleteUserCollectionsIdRelationshipsVideosWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, body DeleteUserCollectionsIdRelationshipsVideosApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserCollectionsIdRelationshipsVideosResponse, error) {
	rsp, err := c.DeleteUserCollectionsIdRelationshipsVideosWithApplicationVndAPIPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserCollectionsIdRelationshipsVideosResponse(rsp)
}

// GetUserCollectionsIdRelationshipsVideosWithResponse request returning *GetUserCollectionsIdRelationshipsVideosResponse
func (c *ClientWithResponses) GetUserCollectionsIdRelationshipsVideosWithResponse(ctx context.Context, id string, params *GetUserCollectionsIdRelationshipsVideosParams, reqEditors ...RequestEditorFn) (*GetUserCollectionsIdRelationshipsVideosResponse, error) {
	rsp, err := c.GetUserCollectionsIdRelationshipsVideos(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserCollectionsIdRelationshipsVideosResponse(rsp)
}

// PostUserCollectionsIdRelationshipsVideosWithBodyWithResponse request with arbitrary body returning *PostUserCollectionsIdRelationshipsVideosResponse
func (c *ClientWithResponses) PostUserCollectionsIdRelationshipsVideosWithBodyWithResponse(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsVideosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsVideosResponse, error) {
	rsp, err := c.PostUserCollectionsIdRelationshipsVideosWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserCollectionsIdRelationshipsVideosResponse(rsp)
}

func (c *ClientWithResponses) PostUserCollectionsIdRelationshipsVideosWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, id string, params *PostUserCollectionsIdRelationshipsVideosParams, body PostUserCollectionsIdRelationshipsVideosApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserCollectionsIdRelationshipsVideosResponse, error) {
	rsp, err := c.PostUserCollectionsIdRelationshipsVideosWithApplicationVndAPIPlusJSONBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserCollectionsIdRelationshipsVideosResponse(rsp)
}

// GetUserEntitlementsIdWithResponse request returning *GetUserEntitlementsIdResponse
func (c *ClientWithResponses) GetUserEntitlementsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetUserEntitlementsIdResponse, error) {
	rsp, err := c.GetUserEntitlementsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserEntitlementsIdResponse(rsp)
}

// GetUserRecommendationsIdWithResponse request returning *GetUserRecommendationsIdResponse
func (c *ClientWithResponses) GetUserRecommendationsIdWithResponse(ctx context.Context, id string, params *GetUserRecommendationsIdParams, reqEditors ...RequestEditorFn) (*GetUserRecommendationsIdResponse, error) {
	rsp, err := c.GetUserRecommendationsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRecommendationsIdResponse(rsp)
}

// GetUserRecommendationsIdRelationshipsDiscoveryMixesWithResponse request returning *GetUserRecommendationsIdRelationshipsDiscoveryMixesResponse
func (c *ClientWithResponses) GetUserRecommendationsIdRelationshipsDiscoveryMixesWithResponse(ctx context.Context, id string, params *GetUserRecommendationsIdRelationshipsDiscoveryMixesParams, reqEditors ...RequestEditorFn) (*GetUserRecommendationsIdRelationshipsDiscoveryMixesResponse, error) {
	rsp, err := c.GetUserRecommendationsIdRelationshipsDiscoveryMixes(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRecommendationsIdRelationshipsDiscoveryMixesResponse(rsp)
}

// GetUserRecommendationsIdRelationshipsMyMixesWithResponse request returning *GetUserRecommendationsIdRelationshipsMyMixesResponse
func (c *ClientWithResponses) GetUserRecommendationsIdRelationshipsMyMixesWithResponse(ctx context.Context, id string, params *GetUserRecommendationsIdRelationshipsMyMixesParams, reqEditors ...RequestEditorFn) (*GetUserRecommendationsIdRelationshipsMyMixesResponse, error) {
	rsp, err := c.GetUserRecommendationsIdRelationshipsMyMixes(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRecommendationsIdRelationshipsMyMixesResponse(rsp)
}

// GetUserRecommendationsIdRelationshipsNewArrivalMixesWithResponse request returning *GetUserRecommendationsIdRelationshipsNewArrivalMixesResponse
func (c *ClientWithResponses) GetUserRecommendationsIdRelationshipsNewArrivalMixesWithResponse(ctx context.Context, id string, params *GetUserRecommendationsIdRelationshipsNewArrivalMixesParams, reqEditors ...RequestEditorFn) (*GetUserRecommendationsIdRelationshipsNewArrivalMixesResponse, error) {
	rsp, err := c.GetUserRecommendationsIdRelationshipsNewArrivalMixes(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserRecommendationsIdRelationshipsNewArrivalMixesResponse(rsp)
}

// PostUserReportsWithBodyWithResponse request with arbitrary body returning *PostUserReportsResponse
func (c *ClientWithResponses) PostUserReportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserReportsResponse, error) {
	rsp, err := c.PostUserReportsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserReportsResponse(rsp)
}

func (c *ClientWithResponses) PostUserReportsWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostUserReportsApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserReportsResponse, error) {
	rsp, err := c.PostUserReportsWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserReportsResponse(rsp)
}

// GetUserSharesWithResponse request returning *GetUserSharesResponse
func (c *ClientWithResponses) GetUserSharesWithResponse(ctx context.Context, params *GetUserSharesParams, reqEditors ...RequestEditorFn) (*GetUserSharesResponse, error) {
	rsp, err := c.GetUserShares(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserSharesResponse(rsp)
}

// PostUserSharesWithBodyWithResponse request with arbitrary body returning *PostUserSharesResponse
func (c *ClientWithResponses) PostUserSharesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserSharesResponse, error) {
	rsp, err := c.PostUserSharesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserSharesResponse(rsp)
}

func (c *ClientWithResponses) PostUserSharesWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, body PostUserSharesApplicationVndAPIPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserSharesResponse, error) {
	rsp, err := c.PostUserSharesWithApplicationVndAPIPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserSharesResponse(rsp)
}

// GetUserSharesIdWithResponse request returning *GetUserSharesIdResponse
func (c *ClientWithResponses) GetUserSharesIdWithResponse(ctx context.Context, id string, params *GetUserSharesIdParams, reqEditors ...RequestEditorFn) (*GetUserSharesIdResponse, error) {
	rsp, err := c.GetUserSharesId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserSharesIdResponse(rsp)
}

// GetUserSharesIdRelationshipsOwnersWithResponse request returning *GetUserSharesIdRelationshipsOwnersResponse
func (c *ClientWithResponses) GetUserSharesIdRelationshipsOwnersWithResponse(ctx context.Context, id string, params *GetUserSharesIdRelationshipsOwnersParams, reqEditors ...RequestEditorFn) (*GetUserSharesIdRelationshipsOwnersResponse, error) {
	rsp, err := c.GetUserSharesIdRelationshipsOwners(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserSharesIdRelationshipsOwnersResponse(rsp)
}

// GetUserSharesIdRelationshipsSharedResourcesWithResponse request returning *GetUserSharesIdRelationshipsSharedResourcesResponse
func (c *ClientWithResponses) GetUserSharesIdRelationshipsSharedResourcesWithResponse(ctx context.Context, id string, params *GetUserSharesIdRelationshipsSharedResourcesParams, reqEditors ...RequestEditorFn) (*GetUserSharesIdRelationshipsSharedResourcesResponse, error) {
	rsp, err := c.GetUserSharesIdRelationshipsSharedResources(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserSharesIdRelationshipsSharedResourcesResponse(rsp)
}

// GetUsersMeWithResponse request returning *GetUsersMeResponse
func (c *ClientWithResponses) GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error) {
	rsp, err := c.GetUsersMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersMeResponse(rsp)
}

// GetVideosWithResponse request returning *GetVideosResponse
func (c *ClientWithResponses) GetVideosWithResponse(ctx context.Context, params *GetVideosParams, reqEditors ...RequestEditorFn) (*GetVideosResponse, error) {
	rsp, err := c.GetVideos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideosResponse(rsp)
}

// GetVideosIdWithResponse request returning *GetVideosIdResponse
func (c *ClientWithResponses) GetVideosIdWithResponse(ctx context.Context, id string, params *GetVideosIdParams, reqEditors ...RequestEditorFn) (*GetVideosIdResponse, error) {
	rsp, err := c.GetVideosId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideosIdResponse(rsp)
}

// GetVideosIdRelationshipsAlbumsWithResponse request returning *GetVideosIdRelationshipsAlbumsResponse
func (c *ClientWithResponses) GetVideosIdRelationshipsAlbumsWithResponse(ctx context.Context, id string, params *GetVideosIdRelationshipsAlbumsParams, reqEditors ...RequestEditorFn) (*GetVideosIdRelationshipsAlbumsResponse, error) {
	rsp, err := c.GetVideosIdRelationshipsAlbums(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideosIdRelationshipsAlbumsResponse(rsp)
}

// GetVideosIdRelationshipsArtistsWithResponse request returning *GetVideosIdRelationshipsArtistsResponse
func (c *ClientWithResponses) GetVideosIdRelationshipsArtistsWithResponse(ctx context.Context, id string, params *GetVideosIdRelationshipsArtistsParams, reqEditors ...RequestEditorFn) (*GetVideosIdRelationshipsArtistsResponse, error) {
	rsp, err := c.GetVideosIdRelationshipsArtists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideosIdRelationshipsArtistsResponse(rsp)
}

// GetVideosIdRelationshipsProvidersWithResponse request returning *GetVideosIdRelationshipsProvidersResponse
func (c *ClientWithResponses) GetVideosIdRelationshipsProvidersWithResponse(ctx context.Context, id string, params *GetVideosIdRelationshipsProvidersParams, reqEditors ...RequestEditorFn) (*GetVideosIdRelationshipsProvidersResponse, error) {
	rsp, err := c.GetVideosIdRelationshipsProviders(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideosIdRelationshipsProvidersResponse(rsp)
}

// GetVideosIdRelationshipsThumbnailArtWithResponse request returning *GetVideosIdRelationshipsThumbnailArtResponse
func (c *ClientWithResponses) GetVideosIdRelationshipsThumbnailArtWithResponse(ctx context.Context, id string, params *GetVideosIdRelationshipsThumbnailArtParams, reqEditors ...RequestEditorFn) (*GetVideosIdRelationshipsThumbnailArtResponse, error) {
	rsp, err := c.GetVideosIdRelationshipsThumbnailArt(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideosIdRelationshipsThumbnailArtResponse(rsp)
}

// ParseGetAlbumsResponse parses an HTTP response from a GetAlbumsWithResponse call
func ParseGetAlbumsResponse(rsp *http.Response) (*GetAlbumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumsMultiResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostAlbumsResponse parses an HTTP response from a PostAlbumsWithResponse call
func ParsePostAlbumsResponse(rsp *http.Response) (*PostAlbumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAlbumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AlbumsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAlbumsIdResponse parses an HTTP response from a DeleteAlbumsIdWithResponse call
func ParseDeleteAlbumsIdResponse(rsp *http.Response) (*DeleteAlbumsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAlbumsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetAlbumsIdResponse parses an HTTP response from a GetAlbumsIdWithResponse call
func ParseGetAlbumsIdResponse(rsp *http.Response) (*GetAlbumsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePatchAlbumsIdResponse parses an HTTP response from a PatchAlbumsIdWithResponse call
func ParsePatchAlbumsIdResponse(rsp *http.Response) (*PatchAlbumsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchAlbumsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetAlbumsIdRelationshipsArtistsResponse parses an HTTP response from a GetAlbumsIdRelationshipsArtistsWithResponse call
func ParseGetAlbumsIdRelationshipsArtistsResponse(rsp *http.Response) (*GetAlbumsIdRelationshipsArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumsIdRelationshipsArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetAlbumsIdRelationshipsCoverArtResponse parses an HTTP response from a GetAlbumsIdRelationshipsCoverArtWithResponse call
func ParseGetAlbumsIdRelationshipsCoverArtResponse(rsp *http.Response) (*GetAlbumsIdRelationshipsCoverArtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumsIdRelationshipsCoverArtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePatchAlbumsIdRelationshipsCoverArtResponse parses an HTTP response from a PatchAlbumsIdRelationshipsCoverArtWithResponse call
func ParsePatchAlbumsIdRelationshipsCoverArtResponse(rsp *http.Response) (*PatchAlbumsIdRelationshipsCoverArtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchAlbumsIdRelationshipsCoverArtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetAlbumsIdRelationshipsGenresResponse parses an HTTP response from a GetAlbumsIdRelationshipsGenresWithResponse call
func ParseGetAlbumsIdRelationshipsGenresResponse(rsp *http.Response) (*GetAlbumsIdRelationshipsGenresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumsIdRelationshipsGenresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetAlbumsIdRelationshipsItemsResponse parses an HTTP response from a GetAlbumsIdRelationshipsItemsWithResponse call
func ParseGetAlbumsIdRelationshipsItemsResponse(rsp *http.Response) (*GetAlbumsIdRelationshipsItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumsIdRelationshipsItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumsItemsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetAlbumsIdRelationshipsOwnersResponse parses an HTTP response from a GetAlbumsIdRelationshipsOwnersWithResponse call
func ParseGetAlbumsIdRelationshipsOwnersResponse(rsp *http.Response) (*GetAlbumsIdRelationshipsOwnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumsIdRelationshipsOwnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetAlbumsIdRelationshipsProvidersResponse parses an HTTP response from a GetAlbumsIdRelationshipsProvidersWithResponse call
func ParseGetAlbumsIdRelationshipsProvidersResponse(rsp *http.Response) (*GetAlbumsIdRelationshipsProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumsIdRelationshipsProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetAlbumsIdRelationshipsSimilarAlbumsResponse parses an HTTP response from a GetAlbumsIdRelationshipsSimilarAlbumsWithResponse call
func ParseGetAlbumsIdRelationshipsSimilarAlbumsResponse(rsp *http.Response) (*GetAlbumsIdRelationshipsSimilarAlbumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumsIdRelationshipsSimilarAlbumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostAppreciationsResponse parses an HTTP response from a PostAppreciationsWithResponse call
func ParsePostAppreciationsResponse(rsp *http.Response) (*PostAppreciationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAppreciationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppreciationsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistBiographiesResponse parses an HTTP response from a GetArtistBiographiesWithResponse call
func ParseGetArtistBiographiesResponse(rsp *http.Response) (*GetArtistBiographiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistBiographiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistBiographiesMultiResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistBiographiesIdResponse parses an HTTP response from a GetArtistBiographiesIdWithResponse call
func ParseGetArtistBiographiesIdResponse(rsp *http.Response) (*GetArtistBiographiesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistBiographiesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistBiographiesSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePatchArtistBiographiesIdResponse parses an HTTP response from a PatchArtistBiographiesIdWithResponse call
func ParsePatchArtistBiographiesIdResponse(rsp *http.Response) (*PatchArtistBiographiesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchArtistBiographiesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistBiographiesIdRelationshipsOwnersResponse parses an HTTP response from a GetArtistBiographiesIdRelationshipsOwnersWithResponse call
func ParseGetArtistBiographiesIdRelationshipsOwnersResponse(rsp *http.Response) (*GetArtistBiographiesIdRelationshipsOwnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistBiographiesIdRelationshipsOwnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistBiographiesMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostArtistClaimsResponse parses an HTTP response from a PostArtistClaimsWithResponse call
func ParsePostArtistClaimsResponse(rsp *http.Response) (*PostArtistClaimsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostArtistClaimsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ArtistClaimsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistClaimsIdResponse parses an HTTP response from a GetArtistClaimsIdWithResponse call
func ParseGetArtistClaimsIdResponse(rsp *http.Response) (*GetArtistClaimsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistClaimsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistClaimsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePatchArtistClaimsIdResponse parses an HTTP response from a PatchArtistClaimsIdWithResponse call
func ParsePatchArtistClaimsIdResponse(rsp *http.Response) (*PatchArtistClaimsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchArtistClaimsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistClaimsIdRelationshipsAcceptedArtistsResponse parses an HTTP response from a GetArtistClaimsIdRelationshipsAcceptedArtistsWithResponse call
func ParseGetArtistClaimsIdRelationshipsAcceptedArtistsResponse(rsp *http.Response) (*GetArtistClaimsIdRelationshipsAcceptedArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistClaimsIdRelationshipsAcceptedArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistClaimsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePatchArtistClaimsIdRelationshipsAcceptedArtistsResponse parses an HTTP response from a PatchArtistClaimsIdRelationshipsAcceptedArtistsWithResponse call
func ParsePatchArtistClaimsIdRelationshipsAcceptedArtistsResponse(rsp *http.Response) (*PatchArtistClaimsIdRelationshipsAcceptedArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchArtistClaimsIdRelationshipsAcceptedArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistClaimsIdRelationshipsOwnersResponse parses an HTTP response from a GetArtistClaimsIdRelationshipsOwnersWithResponse call
func ParseGetArtistClaimsIdRelationshipsOwnersResponse(rsp *http.Response) (*GetArtistClaimsIdRelationshipsOwnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistClaimsIdRelationshipsOwnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistClaimsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistClaimsIdRelationshipsRecommendedArtistsResponse parses an HTTP response from a GetArtistClaimsIdRelationshipsRecommendedArtistsWithResponse call
func ParseGetArtistClaimsIdRelationshipsRecommendedArtistsResponse(rsp *http.Response) (*GetArtistClaimsIdRelationshipsRecommendedArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistClaimsIdRelationshipsRecommendedArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistClaimsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistRolesResponse parses an HTTP response from a GetArtistRolesWithResponse call
func ParseGetArtistRolesResponse(rsp *http.Response) (*GetArtistRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistRolesMultiResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistRolesIdResponse parses an HTTP response from a GetArtistRolesIdWithResponse call
func ParseGetArtistRolesIdResponse(rsp *http.Response) (*GetArtistRolesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistRolesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistRolesSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsResponse parses an HTTP response from a GetArtistsWithResponse call
func ParseGetArtistsResponse(rsp *http.Response) (*GetArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsMultiResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostArtistsResponse parses an HTTP response from a PostArtistsWithResponse call
func ParsePostArtistsResponse(rsp *http.Response) (*PostArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ArtistsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdResponse parses an HTTP response from a GetArtistsIdWithResponse call
func ParseGetArtistsIdResponse(rsp *http.Response) (*GetArtistsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePatchArtistsIdResponse parses an HTTP response from a PatchArtistsIdWithResponse call
func ParsePatchArtistsIdResponse(rsp *http.Response) (*PatchArtistsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchArtistsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsAlbumsResponse parses an HTTP response from a GetArtistsIdRelationshipsAlbumsWithResponse call
func ParseGetArtistsIdRelationshipsAlbumsResponse(rsp *http.Response) (*GetArtistsIdRelationshipsAlbumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsAlbumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsBiographyResponse parses an HTTP response from a GetArtistsIdRelationshipsBiographyWithResponse call
func ParseGetArtistsIdRelationshipsBiographyResponse(rsp *http.Response) (*GetArtistsIdRelationshipsBiographyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsBiographyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsSingleRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsFollowersResponse parses an HTTP response from a GetArtistsIdRelationshipsFollowersWithResponse call
func ParseGetArtistsIdRelationshipsFollowersResponse(rsp *http.Response) (*GetArtistsIdRelationshipsFollowersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsFollowersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsFollowersMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteArtistsIdRelationshipsFollowingResponse parses an HTTP response from a DeleteArtistsIdRelationshipsFollowingWithResponse call
func ParseDeleteArtistsIdRelationshipsFollowingResponse(rsp *http.Response) (*DeleteArtistsIdRelationshipsFollowingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteArtistsIdRelationshipsFollowingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsFollowingResponse parses an HTTP response from a GetArtistsIdRelationshipsFollowingWithResponse call
func ParseGetArtistsIdRelationshipsFollowingResponse(rsp *http.Response) (*GetArtistsIdRelationshipsFollowingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsFollowingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsFollowingMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostArtistsIdRelationshipsFollowingResponse parses an HTTP response from a PostArtistsIdRelationshipsFollowingWithResponse call
func ParsePostArtistsIdRelationshipsFollowingResponse(rsp *http.Response) (*PostArtistsIdRelationshipsFollowingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostArtistsIdRelationshipsFollowingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsOwnersResponse parses an HTTP response from a GetArtistsIdRelationshipsOwnersWithResponse call
func ParseGetArtistsIdRelationshipsOwnersResponse(rsp *http.Response) (*GetArtistsIdRelationshipsOwnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsOwnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsProfileArtResponse parses an HTTP response from a GetArtistsIdRelationshipsProfileArtWithResponse call
func ParseGetArtistsIdRelationshipsProfileArtResponse(rsp *http.Response) (*GetArtistsIdRelationshipsProfileArtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsProfileArtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePatchArtistsIdRelationshipsProfileArtResponse parses an HTTP response from a PatchArtistsIdRelationshipsProfileArtWithResponse call
func ParsePatchArtistsIdRelationshipsProfileArtResponse(rsp *http.Response) (*PatchArtistsIdRelationshipsProfileArtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchArtistsIdRelationshipsProfileArtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsRadioResponse parses an HTTP response from a GetArtistsIdRelationshipsRadioWithResponse call
func ParseGetArtistsIdRelationshipsRadioResponse(rsp *http.Response) (*GetArtistsIdRelationshipsRadioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsRadioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsRolesResponse parses an HTTP response from a GetArtistsIdRelationshipsRolesWithResponse call
func ParseGetArtistsIdRelationshipsRolesResponse(rsp *http.Response) (*GetArtistsIdRelationshipsRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsSimilarArtistsResponse parses an HTTP response from a GetArtistsIdRelationshipsSimilarArtistsWithResponse call
func ParseGetArtistsIdRelationshipsSimilarArtistsResponse(rsp *http.Response) (*GetArtistsIdRelationshipsSimilarArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsSimilarArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsTrackProvidersResponse parses an HTTP response from a GetArtistsIdRelationshipsTrackProvidersWithResponse call
func ParseGetArtistsIdRelationshipsTrackProvidersResponse(rsp *http.Response) (*GetArtistsIdRelationshipsTrackProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsTrackProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsTrackProvidersMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsTracksResponse parses an HTTP response from a GetArtistsIdRelationshipsTracksWithResponse call
func ParseGetArtistsIdRelationshipsTracksResponse(rsp *http.Response) (*GetArtistsIdRelationshipsTracksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsTracksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtistsIdRelationshipsVideosResponse parses an HTTP response from a GetArtistsIdRelationshipsVideosWithResponse call
func ParseGetArtistsIdRelationshipsVideosResponse(rsp *http.Response) (*GetArtistsIdRelationshipsVideosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtistsIdRelationshipsVideosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtistsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtworksResponse parses an HTTP response from a GetArtworksWithResponse call
func ParseGetArtworksResponse(rsp *http.Response) (*GetArtworksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtworksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtworksMultiResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostArtworksResponse parses an HTTP response from a PostArtworksWithResponse call
func ParsePostArtworksResponse(rsp *http.Response) (*PostArtworksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostArtworksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ArtworksSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtworksIdResponse parses an HTTP response from a GetArtworksIdWithResponse call
func ParseGetArtworksIdResponse(rsp *http.Response) (*GetArtworksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtworksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtworksSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetArtworksIdRelationshipsOwnersResponse parses an HTTP response from a GetArtworksIdRelationshipsOwnersWithResponse call
func ParseGetArtworksIdRelationshipsOwnersResponse(rsp *http.Response) (*GetArtworksIdRelationshipsOwnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtworksIdRelationshipsOwnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtworksMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetGenresResponse parses an HTTP response from a GetGenresWithResponse call
func ParseGetGenresResponse(rsp *http.Response) (*GetGenresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGenresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenresMultiResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetGenresIdResponse parses an HTTP response from a GetGenresIdWithResponse call
func ParseGetGenresIdResponse(rsp *http.Response) (*GetGenresIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGenresIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenresSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetLyricsResponse parses an HTTP response from a GetLyricsWithResponse call
func ParseGetLyricsResponse(rsp *http.Response) (*GetLyricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLyricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LyricsMultiResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostLyricsResponse parses an HTTP response from a PostLyricsWithResponse call
func ParsePostLyricsResponse(rsp *http.Response) (*PostLyricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLyricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LyricsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetLyricsIdResponse parses an HTTP response from a GetLyricsIdWithResponse call
func ParseGetLyricsIdResponse(rsp *http.Response) (*GetLyricsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLyricsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LyricsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePatchLyricsIdResponse parses an HTTP response from a PatchLyricsIdWithResponse call
func ParsePatchLyricsIdResponse(rsp *http.Response) (*PatchLyricsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLyricsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetLyricsIdRelationshipsOwnersResponse parses an HTTP response from a GetLyricsIdRelationshipsOwnersWithResponse call
func ParseGetLyricsIdRelationshipsOwnersResponse(rsp *http.Response) (*GetLyricsIdRelationshipsOwnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLyricsIdRelationshipsOwnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LyricsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetLyricsIdRelationshipsTrackResponse parses an HTTP response from a GetLyricsIdRelationshipsTrackWithResponse call
func ParseGetLyricsIdRelationshipsTrackResponse(rsp *http.Response) (*GetLyricsIdRelationshipsTrackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLyricsIdRelationshipsTrackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LyricsSingleRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetPlaylistsResponse parses an HTTP response from a GetPlaylistsWithResponse call
func ParseGetPlaylistsResponse(rsp *http.Response) (*GetPlaylistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaylistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlaylistsMultiResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostPlaylistsResponse parses an HTTP response from a PostPlaylistsWithResponse call
func ParsePostPlaylistsResponse(rsp *http.Response) (*PostPlaylistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPlaylistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PlaylistsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseDeletePlaylistsIdResponse parses an HTTP response from a DeletePlaylistsIdWithResponse call
func ParseDeletePlaylistsIdResponse(rsp *http.Response) (*DeletePlaylistsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaylistsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetPlaylistsIdResponse parses an HTTP response from a GetPlaylistsIdWithResponse call
func ParseGetPlaylistsIdResponse(rsp *http.Response) (*GetPlaylistsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaylistsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlaylistsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePatchPlaylistsIdResponse parses an HTTP response from a PatchPlaylistsIdWithResponse call
func ParsePatchPlaylistsIdResponse(rsp *http.Response) (*PatchPlaylistsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPlaylistsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetPlaylistsIdRelationshipsCoverArtResponse parses an HTTP response from a GetPlaylistsIdRelationshipsCoverArtWithResponse call
func ParseGetPlaylistsIdRelationshipsCoverArtResponse(rsp *http.Response) (*GetPlaylistsIdRelationshipsCoverArtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaylistsIdRelationshipsCoverArtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlaylistsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePatchPlaylistsIdRelationshipsCoverArtResponse parses an HTTP response from a PatchPlaylistsIdRelationshipsCoverArtWithResponse call
func ParsePatchPlaylistsIdRelationshipsCoverArtResponse(rsp *http.Response) (*PatchPlaylistsIdRelationshipsCoverArtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPlaylistsIdRelationshipsCoverArtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseDeletePlaylistsIdRelationshipsItemsResponse parses an HTTP response from a DeletePlaylistsIdRelationshipsItemsWithResponse call
func ParseDeletePlaylistsIdRelationshipsItemsResponse(rsp *http.Response) (*DeletePlaylistsIdRelationshipsItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePlaylistsIdRelationshipsItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetPlaylistsIdRelationshipsItemsResponse parses an HTTP response from a GetPlaylistsIdRelationshipsItemsWithResponse call
func ParseGetPlaylistsIdRelationshipsItemsResponse(rsp *http.Response) (*GetPlaylistsIdRelationshipsItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaylistsIdRelationshipsItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlaylistsItemsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePatchPlaylistsIdRelationshipsItemsResponse parses an HTTP response from a PatchPlaylistsIdRelationshipsItemsWithResponse call
func ParsePatchPlaylistsIdRelationshipsItemsResponse(rsp *http.Response) (*PatchPlaylistsIdRelationshipsItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPlaylistsIdRelationshipsItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostPlaylistsIdRelationshipsItemsResponse parses an HTTP response from a PostPlaylistsIdRelationshipsItemsWithResponse call
func ParsePostPlaylistsIdRelationshipsItemsResponse(rsp *http.Response) (*PostPlaylistsIdRelationshipsItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPlaylistsIdRelationshipsItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetPlaylistsIdRelationshipsOwnersResponse parses an HTTP response from a GetPlaylistsIdRelationshipsOwnersWithResponse call
func ParseGetPlaylistsIdRelationshipsOwnersResponse(rsp *http.Response) (*GetPlaylistsIdRelationshipsOwnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaylistsIdRelationshipsOwnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlaylistsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetProvidersResponse parses an HTTP response from a GetProvidersWithResponse call
func ParseGetProvidersResponse(rsp *http.Response) (*GetProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProvidersMultiResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetProvidersIdResponse parses an HTTP response from a GetProvidersIdWithResponse call
func ParseGetProvidersIdResponse(rsp *http.Response) (*GetProvidersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProvidersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProvidersSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetSearchResultsIdResponse parses an HTTP response from a GetSearchResultsIdWithResponse call
func ParseGetSearchResultsIdResponse(rsp *http.Response) (*GetSearchResultsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchResultsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResultsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetSearchResultsIdRelationshipsAlbumsResponse parses an HTTP response from a GetSearchResultsIdRelationshipsAlbumsWithResponse call
func ParseGetSearchResultsIdRelationshipsAlbumsResponse(rsp *http.Response) (*GetSearchResultsIdRelationshipsAlbumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchResultsIdRelationshipsAlbumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResultsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetSearchResultsIdRelationshipsArtistsResponse parses an HTTP response from a GetSearchResultsIdRelationshipsArtistsWithResponse call
func ParseGetSearchResultsIdRelationshipsArtistsResponse(rsp *http.Response) (*GetSearchResultsIdRelationshipsArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchResultsIdRelationshipsArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResultsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetSearchResultsIdRelationshipsPlaylistsResponse parses an HTTP response from a GetSearchResultsIdRelationshipsPlaylistsWithResponse call
func ParseGetSearchResultsIdRelationshipsPlaylistsResponse(rsp *http.Response) (*GetSearchResultsIdRelationshipsPlaylistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchResultsIdRelationshipsPlaylistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResultsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetSearchResultsIdRelationshipsTopHitsResponse parses an HTTP response from a GetSearchResultsIdRelationshipsTopHitsWithResponse call
func ParseGetSearchResultsIdRelationshipsTopHitsResponse(rsp *http.Response) (*GetSearchResultsIdRelationshipsTopHitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchResultsIdRelationshipsTopHitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResultsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetSearchResultsIdRelationshipsTracksResponse parses an HTTP response from a GetSearchResultsIdRelationshipsTracksWithResponse call
func ParseGetSearchResultsIdRelationshipsTracksResponse(rsp *http.Response) (*GetSearchResultsIdRelationshipsTracksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchResultsIdRelationshipsTracksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResultsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetSearchResultsIdRelationshipsVideosResponse parses an HTTP response from a GetSearchResultsIdRelationshipsVideosWithResponse call
func ParseGetSearchResultsIdRelationshipsVideosResponse(rsp *http.Response) (*GetSearchResultsIdRelationshipsVideosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchResultsIdRelationshipsVideosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResultsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetSearchSuggestionsIdResponse parses an HTTP response from a GetSearchSuggestionsIdWithResponse call
func ParseGetSearchSuggestionsIdResponse(rsp *http.Response) (*GetSearchSuggestionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchSuggestionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchSuggestionsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetSearchSuggestionsIdRelationshipsDirectHitsResponse parses an HTTP response from a GetSearchSuggestionsIdRelationshipsDirectHitsWithResponse call
func ParseGetSearchSuggestionsIdRelationshipsDirectHitsResponse(rsp *http.Response) (*GetSearchSuggestionsIdRelationshipsDirectHitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchSuggestionsIdRelationshipsDirectHitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchSuggestionsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTrackFilesIdResponse parses an HTTP response from a GetTrackFilesIdWithResponse call
func ParseGetTrackFilesIdResponse(rsp *http.Response) (*GetTrackFilesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrackFilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrackFilesSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTrackManifestsIdResponse parses an HTTP response from a GetTrackManifestsIdWithResponse call
func ParseGetTrackManifestsIdResponse(rsp *http.Response) (*GetTrackManifestsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrackManifestsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrackManifestsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTrackSourceFilesResponse parses an HTTP response from a GetTrackSourceFilesWithResponse call
func ParseGetTrackSourceFilesResponse(rsp *http.Response) (*GetTrackSourceFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrackSourceFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrackSourceFilesMultiResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostTrackSourceFilesResponse parses an HTTP response from a PostTrackSourceFilesWithResponse call
func ParsePostTrackSourceFilesResponse(rsp *http.Response) (*PostTrackSourceFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTrackSourceFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TrackSourceFilesSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTrackSourceFilesIdResponse parses an HTTP response from a GetTrackSourceFilesIdWithResponse call
func ParseGetTrackSourceFilesIdResponse(rsp *http.Response) (*GetTrackSourceFilesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrackSourceFilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrackSourceFilesSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTrackSourceFilesIdRelationshipsOwnersResponse parses an HTTP response from a GetTrackSourceFilesIdRelationshipsOwnersWithResponse call
func ParseGetTrackSourceFilesIdRelationshipsOwnersResponse(rsp *http.Response) (*GetTrackSourceFilesIdRelationshipsOwnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrackSourceFilesIdRelationshipsOwnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrackSourceFilesMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTrackStatisticsResponse parses an HTTP response from a GetTrackStatisticsWithResponse call
func ParseGetTrackStatisticsResponse(rsp *http.Response) (*GetTrackStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrackStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrackStatisticsMultiResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTrackStatisticsIdResponse parses an HTTP response from a GetTrackStatisticsIdWithResponse call
func ParseGetTrackStatisticsIdResponse(rsp *http.Response) (*GetTrackStatisticsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrackStatisticsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrackStatisticsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTrackStatisticsIdRelationshipsOwnersResponse parses an HTTP response from a GetTrackStatisticsIdRelationshipsOwnersWithResponse call
func ParseGetTrackStatisticsIdRelationshipsOwnersResponse(rsp *http.Response) (*GetTrackStatisticsIdRelationshipsOwnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrackStatisticsIdRelationshipsOwnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrackStatisticsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksResponse parses an HTTP response from a GetTracksWithResponse call
func ParseGetTracksResponse(rsp *http.Response) (*GetTracksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksMultiResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostTracksResponse parses an HTTP response from a PostTracksWithResponse call
func ParsePostTracksResponse(rsp *http.Response) (*PostTracksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTracksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TracksSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteTracksIdResponse parses an HTTP response from a DeleteTracksIdWithResponse call
func ParseDeleteTracksIdResponse(rsp *http.Response) (*DeleteTracksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTracksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksIdResponse parses an HTTP response from a GetTracksIdWithResponse call
func ParseGetTracksIdResponse(rsp *http.Response) (*GetTracksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePatchTracksIdResponse parses an HTTP response from a PatchTracksIdWithResponse call
func ParsePatchTracksIdResponse(rsp *http.Response) (*PatchTracksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchTracksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksIdRelationshipsAlbumsResponse parses an HTTP response from a GetTracksIdRelationshipsAlbumsWithResponse call
func ParseGetTracksIdRelationshipsAlbumsResponse(rsp *http.Response) (*GetTracksIdRelationshipsAlbumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdRelationshipsAlbumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksIdRelationshipsArtistsResponse parses an HTTP response from a GetTracksIdRelationshipsArtistsWithResponse call
func ParseGetTracksIdRelationshipsArtistsResponse(rsp *http.Response) (*GetTracksIdRelationshipsArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdRelationshipsArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksIdRelationshipsGenresResponse parses an HTTP response from a GetTracksIdRelationshipsGenresWithResponse call
func ParseGetTracksIdRelationshipsGenresResponse(rsp *http.Response) (*GetTracksIdRelationshipsGenresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdRelationshipsGenresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksIdRelationshipsLyricsResponse parses an HTTP response from a GetTracksIdRelationshipsLyricsWithResponse call
func ParseGetTracksIdRelationshipsLyricsResponse(rsp *http.Response) (*GetTracksIdRelationshipsLyricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdRelationshipsLyricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksIdRelationshipsOwnersResponse parses an HTTP response from a GetTracksIdRelationshipsOwnersWithResponse call
func ParseGetTracksIdRelationshipsOwnersResponse(rsp *http.Response) (*GetTracksIdRelationshipsOwnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdRelationshipsOwnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksIdRelationshipsProvidersResponse parses an HTTP response from a GetTracksIdRelationshipsProvidersWithResponse call
func ParseGetTracksIdRelationshipsProvidersResponse(rsp *http.Response) (*GetTracksIdRelationshipsProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdRelationshipsProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksIdRelationshipsRadioResponse parses an HTTP response from a GetTracksIdRelationshipsRadioWithResponse call
func ParseGetTracksIdRelationshipsRadioResponse(rsp *http.Response) (*GetTracksIdRelationshipsRadioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdRelationshipsRadioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksIdRelationshipsSimilarTracksResponse parses an HTTP response from a GetTracksIdRelationshipsSimilarTracksWithResponse call
func ParseGetTracksIdRelationshipsSimilarTracksResponse(rsp *http.Response) (*GetTracksIdRelationshipsSimilarTracksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdRelationshipsSimilarTracksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksIdRelationshipsSourceFileResponse parses an HTTP response from a GetTracksIdRelationshipsSourceFileWithResponse call
func ParseGetTracksIdRelationshipsSourceFileResponse(rsp *http.Response) (*GetTracksIdRelationshipsSourceFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdRelationshipsSourceFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksSingleRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetTracksIdRelationshipsTrackStatisticsResponse parses an HTTP response from a GetTracksIdRelationshipsTrackStatisticsWithResponse call
func ParseGetTracksIdRelationshipsTrackStatisticsResponse(rsp *http.Response) (*GetTracksIdRelationshipsTrackStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdRelationshipsTrackStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksSingleRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserCollectionsIdResponse parses an HTTP response from a GetUserCollectionsIdWithResponse call
func ParseGetUserCollectionsIdResponse(rsp *http.Response) (*GetUserCollectionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserCollectionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserCollectionsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUserCollectionsIdRelationshipsAlbumsResponse parses an HTTP response from a DeleteUserCollectionsIdRelationshipsAlbumsWithResponse call
func ParseDeleteUserCollectionsIdRelationshipsAlbumsResponse(rsp *http.Response) (*DeleteUserCollectionsIdRelationshipsAlbumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserCollectionsIdRelationshipsAlbumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserCollectionsIdRelationshipsAlbumsResponse parses an HTTP response from a GetUserCollectionsIdRelationshipsAlbumsWithResponse call
func ParseGetUserCollectionsIdRelationshipsAlbumsResponse(rsp *http.Response) (*GetUserCollectionsIdRelationshipsAlbumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserCollectionsIdRelationshipsAlbumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserCollectionsAlbumsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostUserCollectionsIdRelationshipsAlbumsResponse parses an HTTP response from a PostUserCollectionsIdRelationshipsAlbumsWithResponse call
func ParsePostUserCollectionsIdRelationshipsAlbumsResponse(rsp *http.Response) (*PostUserCollectionsIdRelationshipsAlbumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserCollectionsIdRelationshipsAlbumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUserCollectionsIdRelationshipsArtistsResponse parses an HTTP response from a DeleteUserCollectionsIdRelationshipsArtistsWithResponse call
func ParseDeleteUserCollectionsIdRelationshipsArtistsResponse(rsp *http.Response) (*DeleteUserCollectionsIdRelationshipsArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserCollectionsIdRelationshipsArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserCollectionsIdRelationshipsArtistsResponse parses an HTTP response from a GetUserCollectionsIdRelationshipsArtistsWithResponse call
func ParseGetUserCollectionsIdRelationshipsArtistsResponse(rsp *http.Response) (*GetUserCollectionsIdRelationshipsArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserCollectionsIdRelationshipsArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserCollectionsArtistsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostUserCollectionsIdRelationshipsArtistsResponse parses an HTTP response from a PostUserCollectionsIdRelationshipsArtistsWithResponse call
func ParsePostUserCollectionsIdRelationshipsArtistsResponse(rsp *http.Response) (*PostUserCollectionsIdRelationshipsArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserCollectionsIdRelationshipsArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserCollectionsIdRelationshipsOwnersResponse parses an HTTP response from a GetUserCollectionsIdRelationshipsOwnersWithResponse call
func ParseGetUserCollectionsIdRelationshipsOwnersResponse(rsp *http.Response) (*GetUserCollectionsIdRelationshipsOwnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserCollectionsIdRelationshipsOwnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserCollectionsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUserCollectionsIdRelationshipsPlaylistsResponse parses an HTTP response from a DeleteUserCollectionsIdRelationshipsPlaylistsWithResponse call
func ParseDeleteUserCollectionsIdRelationshipsPlaylistsResponse(rsp *http.Response) (*DeleteUserCollectionsIdRelationshipsPlaylistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserCollectionsIdRelationshipsPlaylistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserCollectionsIdRelationshipsPlaylistsResponse parses an HTTP response from a GetUserCollectionsIdRelationshipsPlaylistsWithResponse call
func ParseGetUserCollectionsIdRelationshipsPlaylistsResponse(rsp *http.Response) (*GetUserCollectionsIdRelationshipsPlaylistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserCollectionsIdRelationshipsPlaylistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserCollectionsPlaylistsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostUserCollectionsIdRelationshipsPlaylistsResponse parses an HTTP response from a PostUserCollectionsIdRelationshipsPlaylistsWithResponse call
func ParsePostUserCollectionsIdRelationshipsPlaylistsResponse(rsp *http.Response) (*PostUserCollectionsIdRelationshipsPlaylistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserCollectionsIdRelationshipsPlaylistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUserCollectionsIdRelationshipsTracksResponse parses an HTTP response from a DeleteUserCollectionsIdRelationshipsTracksWithResponse call
func ParseDeleteUserCollectionsIdRelationshipsTracksResponse(rsp *http.Response) (*DeleteUserCollectionsIdRelationshipsTracksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserCollectionsIdRelationshipsTracksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserCollectionsIdRelationshipsTracksResponse parses an HTTP response from a GetUserCollectionsIdRelationshipsTracksWithResponse call
func ParseGetUserCollectionsIdRelationshipsTracksResponse(rsp *http.Response) (*GetUserCollectionsIdRelationshipsTracksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserCollectionsIdRelationshipsTracksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserCollectionsTracksMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostUserCollectionsIdRelationshipsTracksResponse parses an HTTP response from a PostUserCollectionsIdRelationshipsTracksWithResponse call
func ParsePostUserCollectionsIdRelationshipsTracksResponse(rsp *http.Response) (*PostUserCollectionsIdRelationshipsTracksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserCollectionsIdRelationshipsTracksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUserCollectionsIdRelationshipsVideosResponse parses an HTTP response from a DeleteUserCollectionsIdRelationshipsVideosWithResponse call
func ParseDeleteUserCollectionsIdRelationshipsVideosResponse(rsp *http.Response) (*DeleteUserCollectionsIdRelationshipsVideosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserCollectionsIdRelationshipsVideosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserCollectionsIdRelationshipsVideosResponse parses an HTTP response from a GetUserCollectionsIdRelationshipsVideosWithResponse call
func ParseGetUserCollectionsIdRelationshipsVideosResponse(rsp *http.Response) (*GetUserCollectionsIdRelationshipsVideosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserCollectionsIdRelationshipsVideosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserCollectionsVideosMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostUserCollectionsIdRelationshipsVideosResponse parses an HTTP response from a PostUserCollectionsIdRelationshipsVideosWithResponse call
func ParsePostUserCollectionsIdRelationshipsVideosResponse(rsp *http.Response) (*PostUserCollectionsIdRelationshipsVideosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserCollectionsIdRelationshipsVideosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserEntitlementsIdResponse parses an HTTP response from a GetUserEntitlementsIdWithResponse call
func ParseGetUserEntitlementsIdResponse(rsp *http.Response) (*GetUserEntitlementsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserEntitlementsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserEntitlementsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserRecommendationsIdResponse parses an HTTP response from a GetUserRecommendationsIdWithResponse call
func ParseGetUserRecommendationsIdResponse(rsp *http.Response) (*GetUserRecommendationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRecommendationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRecommendationsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserRecommendationsIdRelationshipsDiscoveryMixesResponse parses an HTTP response from a GetUserRecommendationsIdRelationshipsDiscoveryMixesWithResponse call
func ParseGetUserRecommendationsIdRelationshipsDiscoveryMixesResponse(rsp *http.Response) (*GetUserRecommendationsIdRelationshipsDiscoveryMixesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRecommendationsIdRelationshipsDiscoveryMixesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRecommendationsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserRecommendationsIdRelationshipsMyMixesResponse parses an HTTP response from a GetUserRecommendationsIdRelationshipsMyMixesWithResponse call
func ParseGetUserRecommendationsIdRelationshipsMyMixesResponse(rsp *http.Response) (*GetUserRecommendationsIdRelationshipsMyMixesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRecommendationsIdRelationshipsMyMixesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRecommendationsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserRecommendationsIdRelationshipsNewArrivalMixesResponse parses an HTTP response from a GetUserRecommendationsIdRelationshipsNewArrivalMixesWithResponse call
func ParseGetUserRecommendationsIdRelationshipsNewArrivalMixesResponse(rsp *http.Response) (*GetUserRecommendationsIdRelationshipsNewArrivalMixesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserRecommendationsIdRelationshipsNewArrivalMixesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRecommendationsMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostUserReportsResponse parses an HTTP response from a PostUserReportsWithResponse call
func ParsePostUserReportsResponse(rsp *http.Response) (*PostUserReportsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserReportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserReportsSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserSharesResponse parses an HTTP response from a GetUserSharesWithResponse call
func ParseGetUserSharesResponse(rsp *http.Response) (*GetUserSharesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserSharesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserSharesMultiResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParsePostUserSharesResponse parses an HTTP response from a PostUserSharesWithResponse call
func ParsePostUserSharesResponse(rsp *http.Response) (*PostUserSharesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserSharesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserSharesSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserSharesIdResponse parses an HTTP response from a GetUserSharesIdWithResponse call
func ParseGetUserSharesIdResponse(rsp *http.Response) (*GetUserSharesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserSharesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserSharesSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserSharesIdRelationshipsOwnersResponse parses an HTTP response from a GetUserSharesIdRelationshipsOwnersWithResponse call
func ParseGetUserSharesIdRelationshipsOwnersResponse(rsp *http.Response) (*GetUserSharesIdRelationshipsOwnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserSharesIdRelationshipsOwnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserSharesMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserSharesIdRelationshipsSharedResourcesResponse parses an HTTP response from a GetUserSharesIdRelationshipsSharedResourcesWithResponse call
func ParseGetUserSharesIdRelationshipsSharedResourcesResponse(rsp *http.Response) (*GetUserSharesIdRelationshipsSharedResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserSharesIdRelationshipsSharedResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserSharesMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersMeResponse parses an HTTP response from a GetUsersMeWithResponse call
func ParseGetUsersMeResponse(rsp *http.Response) (*GetUsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetVideosResponse parses an HTTP response from a GetVideosWithResponse call
func ParseGetVideosResponse(rsp *http.Response) (*GetVideosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VideosMultiResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetVideosIdResponse parses an HTTP response from a GetVideosIdWithResponse call
func ParseGetVideosIdResponse(rsp *http.Response) (*GetVideosIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideosIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VideosSingleResourceDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetVideosIdRelationshipsAlbumsResponse parses an HTTP response from a GetVideosIdRelationshipsAlbumsWithResponse call
func ParseGetVideosIdRelationshipsAlbumsResponse(rsp *http.Response) (*GetVideosIdRelationshipsAlbumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideosIdRelationshipsAlbumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VideosMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetVideosIdRelationshipsArtistsResponse parses an HTTP response from a GetVideosIdRelationshipsArtistsWithResponse call
func ParseGetVideosIdRelationshipsArtistsResponse(rsp *http.Response) (*GetVideosIdRelationshipsArtistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideosIdRelationshipsArtistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VideosMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetVideosIdRelationshipsProvidersResponse parses an HTTP response from a GetVideosIdRelationshipsProvidersWithResponse call
func ParseGetVideosIdRelationshipsProvidersResponse(rsp *http.Response) (*GetVideosIdRelationshipsProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideosIdRelationshipsProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VideosMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}

// ParseGetVideosIdRelationshipsThumbnailArtResponse parses an HTTP response from a GetVideosIdRelationshipsThumbnailArtWithResponse call
func ParseGetVideosIdRelationshipsThumbnailArtResponse(rsp *http.Response) (*GetVideosIdRelationshipsThumbnailArtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideosIdRelationshipsThumbnailArtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VideosMultiRelationshipDataDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON500 = &dest

	}

	return response, nil
}
